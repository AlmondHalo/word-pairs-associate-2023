{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggregationCursor = void 0;\n\nconst aggregate_1 = require(\"../operations/aggregate\");\n\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n\nconst execute_operation_1 = require(\"../operations/execute_operation\");\n\nconst utils_1 = require(\"../utils\");\n/** @internal */\n\n\nconst kPipeline = Symbol('pipeline');\n/** @internal */\n\nconst kOptions = Symbol('options');\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */\n\nclass AggregationCursor extends abstract_cursor_1.AbstractCursor {\n  /** @internal */\n  constructor(topology, namespace, pipeline = [], options = {}) {\n    super(topology, namespace, options);\n    this[kPipeline] = pipeline;\n    this[kOptions] = options;\n  }\n\n  get pipeline() {\n    return this[kPipeline];\n  }\n\n  clone() {\n    const clonedOptions = utils_1.mergeOptions({}, this[kOptions]);\n    delete clonedOptions.session;\n    return new AggregationCursor(this.topology, this.namespace, this[kPipeline], { ...clonedOptions\n    });\n  }\n\n  map(transform) {\n    return super.map(transform);\n  }\n  /** @internal */\n\n\n  _initialize(session, callback) {\n    const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], { ...this[kOptions],\n      ...this.cursorOptions,\n      session\n    });\n    execute_operation_1.executeOperation(this.topology, aggregateOperation, (err, response) => {\n      if (err || response == null) return callback(err); // TODO: NODE-2882\n\n      callback(undefined, {\n        server: aggregateOperation.server,\n        session,\n        response\n      });\n    });\n  }\n\n  explain(verbosity, callback) {\n    if (typeof verbosity === 'function') callback = verbosity, verbosity = true;\n    if (verbosity == null) verbosity = true;\n    return execute_operation_1.executeOperation(this.topology, new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], { ...this[kOptions],\n      ...this.cursorOptions,\n      explain: verbosity\n    }), callback);\n  }\n\n  group($group) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kPipeline].push({\n      $group\n    });\n    return this;\n  }\n  /** Add a limit stage to the aggregation pipeline */\n\n\n  limit($limit) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kPipeline].push({\n      $limit\n    });\n    return this;\n  }\n  /** Add a match stage to the aggregation pipeline */\n\n\n  match($match) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kPipeline].push({\n      $match\n    });\n    return this;\n  }\n  /** Add a out stage to the aggregation pipeline */\n\n\n  out($out) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kPipeline].push({\n      $out\n    });\n    return this;\n  }\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.aggregate().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n\n\n  project($project) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kPipeline].push({\n      $project\n    });\n    return this;\n  }\n  /** Add a lookup stage to the aggregation pipeline */\n\n\n  lookup($lookup) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kPipeline].push({\n      $lookup\n    });\n    return this;\n  }\n  /** Add a redact stage to the aggregation pipeline */\n\n\n  redact($redact) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kPipeline].push({\n      $redact\n    });\n    return this;\n  }\n  /** Add a skip stage to the aggregation pipeline */\n\n\n  skip($skip) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kPipeline].push({\n      $skip\n    });\n    return this;\n  }\n  /** Add a sort stage to the aggregation pipeline */\n\n\n  sort($sort) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kPipeline].push({\n      $sort\n    });\n    return this;\n  }\n  /** Add a unwind stage to the aggregation pipeline */\n\n\n  unwind($unwind) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kPipeline].push({\n      $unwind\n    });\n    return this;\n  } // deprecated methods\n\n  /** @deprecated Add a geoNear stage to the aggregation pipeline */\n\n\n  geoNear($geoNear) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kPipeline].push({\n      $geoNear\n    });\n    return this;\n  }\n\n}\n\nexports.AggregationCursor = AggregationCursor;","map":{"version":3,"names":["Object","defineProperty","exports","value","AggregationCursor","aggregate_1","require","abstract_cursor_1","execute_operation_1","utils_1","kPipeline","Symbol","kOptions","AbstractCursor","constructor","topology","namespace","pipeline","options","clone","clonedOptions","mergeOptions","session","map","transform","_initialize","callback","aggregateOperation","AggregateOperation","cursorOptions","executeOperation","err","response","undefined","server","explain","verbosity","group","$group","assertUninitialized","push","limit","$limit","match","$match","out","$out","project","$project","lookup","$lookup","redact","$redact","skip","$skip","sort","$sort","unwind","$unwind","geoNear","$geoNear"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/cursor/aggregation_cursor.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AggregationCursor = void 0;\nconst aggregate_1 = require(\"../operations/aggregate\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst utils_1 = require(\"../utils\");\n/** @internal */\nconst kPipeline = Symbol('pipeline');\n/** @internal */\nconst kOptions = Symbol('options');\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */\nclass AggregationCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */\n    constructor(topology, namespace, pipeline = [], options = {}) {\n        super(topology, namespace, options);\n        this[kPipeline] = pipeline;\n        this[kOptions] = options;\n    }\n    get pipeline() {\n        return this[kPipeline];\n    }\n    clone() {\n        const clonedOptions = utils_1.mergeOptions({}, this[kOptions]);\n        delete clonedOptions.session;\n        return new AggregationCursor(this.topology, this.namespace, this[kPipeline], {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */\n    _initialize(session, callback) {\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], {\n            ...this[kOptions],\n            ...this.cursorOptions,\n            session\n        });\n        execute_operation_1.executeOperation(this.topology, aggregateOperation, (err, response) => {\n            if (err || response == null)\n                return callback(err);\n            // TODO: NODE-2882\n            callback(undefined, { server: aggregateOperation.server, session, response });\n        });\n    }\n    explain(verbosity, callback) {\n        if (typeof verbosity === 'function')\n            (callback = verbosity), (verbosity = true);\n        if (verbosity == null)\n            verbosity = true;\n        return execute_operation_1.executeOperation(this.topology, new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], {\n            ...this[kOptions],\n            ...this.cursorOptions,\n            explain: verbosity\n        }), callback);\n    }\n    group($group) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kPipeline].push({ $group });\n        return this;\n    }\n    /** Add a limit stage to the aggregation pipeline */\n    limit($limit) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kPipeline].push({ $limit });\n        return this;\n    }\n    /** Add a match stage to the aggregation pipeline */\n    match($match) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kPipeline].push({ $match });\n        return this;\n    }\n    /** Add a out stage to the aggregation pipeline */\n    out($out) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kPipeline].push({ $out });\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.aggregate().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project($project) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kPipeline].push({ $project });\n        return this;\n    }\n    /** Add a lookup stage to the aggregation pipeline */\n    lookup($lookup) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kPipeline].push({ $lookup });\n        return this;\n    }\n    /** Add a redact stage to the aggregation pipeline */\n    redact($redact) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kPipeline].push({ $redact });\n        return this;\n    }\n    /** Add a skip stage to the aggregation pipeline */\n    skip($skip) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kPipeline].push({ $skip });\n        return this;\n    }\n    /** Add a sort stage to the aggregation pipeline */\n    sort($sort) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kPipeline].push({ $sort });\n        return this;\n    }\n    /** Add a unwind stage to the aggregation pipeline */\n    unwind($unwind) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kPipeline].push({ $unwind });\n        return this;\n    }\n    // deprecated methods\n    /** @deprecated Add a geoNear stage to the aggregation pipeline */\n    geoNear($geoNear) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kPipeline].push({ $geoNear });\n        return this;\n    }\n}\nexports.AggregationCursor = AggregationCursor;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}