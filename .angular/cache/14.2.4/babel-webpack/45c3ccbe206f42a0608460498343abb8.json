{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Db = void 0;\n\nconst utils_1 = require(\"./utils\");\n\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\n\nconst bson_1 = require(\"./bson\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst error_1 = require(\"./error\");\n\nconst collection_1 = require(\"./collection\");\n\nconst change_stream_1 = require(\"./change_stream\");\n\nconst CONSTANTS = require(\"./constants\");\n\nconst write_concern_1 = require(\"./write_concern\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst logger_1 = require(\"./logger\");\n\nconst add_user_1 = require(\"./operations/add_user\");\n\nconst collections_1 = require(\"./operations/collections\");\n\nconst stats_1 = require(\"./operations/stats\");\n\nconst run_command_1 = require(\"./operations/run_command\");\n\nconst create_collection_1 = require(\"./operations/create_collection\");\n\nconst indexes_1 = require(\"./operations/indexes\");\n\nconst drop_1 = require(\"./operations/drop\");\n\nconst list_collections_1 = require(\"./operations/list_collections\");\n\nconst profiling_level_1 = require(\"./operations/profiling_level\");\n\nconst remove_user_1 = require(\"./operations/remove_user\");\n\nconst rename_1 = require(\"./operations/rename\");\n\nconst set_profiling_level_1 = require(\"./operations/set_profiling_level\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst admin_1 = require(\"./admin\"); // Allowed parameters\n\n\nconst DB_OPTIONS_ALLOW_LIST = ['writeConcern', 'readPreference', 'readPreferenceTags', 'native_parser', 'forceServerObjectId', 'pkFactory', 'serializeFunctions', 'raw', 'authSource', 'ignoreUndefined', 'readConcern', 'retryMiliSeconds', 'numberOfRetries', 'loggerLevel', 'logger', 'promoteBuffers', 'promoteLongs', 'bsonRegExp', 'promoteValues', 'compression', 'retryWrites'];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```js\n * const { MongoClient } = require('mongodb');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Select the database by name\n *   const testDb = client.db(dbName);\n *   client.close();\n * });\n * ```\n */\n\nclass Db {\n  /**\n   * Creates a new Db instance\n   *\n   * @param client - The MongoClient for the database.\n   * @param databaseName - The name of the database this instance represents.\n   * @param options - Optional settings for Db construction\n   */\n  constructor(client, databaseName, options) {\n    var _a;\n\n    options = options !== null && options !== void 0 ? options : {}; // Filter the options\n\n    options = utils_1.filterOptions(options, DB_OPTIONS_ALLOW_LIST); // Ensure we have a valid db name\n\n    validateDatabaseName(databaseName); // Internal state of the db object\n\n    this.s = {\n      // Client\n      client,\n      // Options\n      options,\n      // Logger instance\n      logger: new logger_1.Logger('Db', options),\n      // Unpack read preference\n      readPreference: read_preference_1.ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: bson_1.resolveBSONOptions(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: (_a = options === null || options === void 0 ? void 0 : options.pkFactory) !== null && _a !== void 0 ? _a : utils_1.DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: read_concern_1.ReadConcern.fromOptions(options),\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new utils_1.MongoDBNamespace(databaseName)\n    };\n  }\n\n  get databaseName() {\n    return this.s.namespace.db;\n  } // Options\n\n\n  get options() {\n    return this.s.options;\n  } // slaveOk specified\n\n\n  get slaveOk() {\n    var _a;\n\n    return ((_a = this.s.readPreference) === null || _a === void 0 ? void 0 : _a.preference) !== 'primary' || false;\n  }\n\n  get readConcern() {\n    return this.s.readConcern;\n  }\n  /**\n   * The current readPreference of the Db. If not explicitly defined for\n   * this Db, will be inherited from the parent MongoClient\n   */\n\n\n  get readPreference() {\n    if (this.s.readPreference == null) {\n      return this.s.client.readPreference;\n    }\n\n    return this.s.readPreference;\n  }\n\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  } // get the write Concern\n\n\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n\n  get namespace() {\n    return this.s.namespace.toString();\n  }\n\n  createCollection(name, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new create_collection_1.CreateCollectionOperation(this, name, utils_1.resolveOptions(this, options)), callback);\n  }\n\n  command(command, options, callback) {\n    if (typeof options === 'function') callback = options, options = {}; // Intentionally, we do not inherit options from parent for this operation.\n\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new run_command_1.RunCommandOperation(this, command, options !== null && options !== void 0 ? options : {}), callback);\n  }\n  /**\n   * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n   *\n   * @param pipeline - An array of aggregation stages to be executed\n   * @param options - Optional settings for the command\n   */\n\n\n  aggregate(pipeline = [], options) {\n    if (arguments.length > 2) {\n      throw new error_1.MongoInvalidArgumentError('Method \"db.aggregate()\" accepts at most two arguments');\n    }\n\n    if (typeof pipeline === 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must not be function');\n    }\n\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"options\" must not be function');\n    }\n\n    return new aggregation_cursor_1.AggregationCursor(utils_1.getTopology(this), this.s.namespace, pipeline, utils_1.resolveOptions(this, options));\n  }\n  /** Return the Admin db instance */\n\n\n  admin() {\n    return new admin_1.Admin(this);\n  }\n  /**\n   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n   *\n   * @param name - the collection name we wish to access.\n   * @returns return the new Collection instance\n   */\n\n\n  collection(name, options = {}) {\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n    }\n\n    const finalOptions = utils_1.resolveOptions(this, options);\n    return new collection_1.Collection(this, name, finalOptions);\n  }\n\n  stats(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new stats_1.DbStatsOperation(this, utils_1.resolveOptions(this, options)), callback);\n  }\n\n  listCollections(filter = {}, options = {}) {\n    return new list_collections_1.ListCollectionsCursor(this, filter, utils_1.resolveOptions(this, options));\n  }\n\n  renameCollection(fromCollection, toCollection, options, callback) {\n    if (typeof options === 'function') callback = options, options = {}; // Intentionally, we do not inherit options from parent for this operation.\n\n    options = { ...options,\n      readPreference: read_preference_1.ReadPreference.PRIMARY\n    }; // Add return new collection\n\n    options.new_collection = true;\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new rename_1.RenameOperation(this.collection(fromCollection), toCollection, options), callback);\n  }\n\n  dropCollection(name, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new drop_1.DropCollectionOperation(this, name, utils_1.resolveOptions(this, options)), callback);\n  }\n\n  dropDatabase(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new drop_1.DropDatabaseOperation(this, utils_1.resolveOptions(this, options)), callback);\n  }\n\n  collections(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new collections_1.CollectionsOperation(this, utils_1.resolveOptions(this, options)), callback);\n  }\n\n  createIndex(name, indexSpec, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new indexes_1.CreateIndexOperation(this, name, indexSpec, utils_1.resolveOptions(this, options)), callback);\n  }\n\n  addUser(username, password, options, callback) {\n    if (typeof password === 'function') {\n      callback = password, password = undefined, options = {};\n    } else if (typeof password !== 'string') {\n      if (typeof options === 'function') {\n        callback = options, options = password, password = undefined;\n      } else {\n        options = password, callback = undefined, password = undefined;\n      }\n    } else {\n      if (typeof options === 'function') callback = options, options = {};\n    }\n\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new add_user_1.AddUserOperation(this, username, password, utils_1.resolveOptions(this, options)), callback);\n  }\n\n  removeUser(username, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new remove_user_1.RemoveUserOperation(this, username, utils_1.resolveOptions(this, options)), callback);\n  }\n\n  setProfilingLevel(level, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new set_profiling_level_1.SetProfilingLevelOperation(this, level, utils_1.resolveOptions(this, options)), callback);\n  }\n\n  profilingLevel(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new profiling_level_1.ProfilingLevelOperation(this, utils_1.resolveOptions(this, options)), callback);\n  }\n\n  indexInformation(name, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this), new indexes_1.IndexInformationOperation(this, name, utils_1.resolveOptions(this, options)), callback);\n  }\n  /**\n   * Unref all sockets\n   * @deprecated This function is deprecated and will be removed in the next major version.\n   */\n\n\n  unref() {\n    utils_1.getTopology(this).unref();\n  }\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this database. Will ignore all\n   * changes to system collections.\n   *\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   */\n\n\n  watch(pipeline = [], options = {}) {\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n\n    return new change_stream_1.ChangeStream(this, pipeline, utils_1.resolveOptions(this, options));\n  }\n  /** Return the db logger */\n\n\n  getLogger() {\n    return this.s.logger;\n  }\n\n  get logger() {\n    return this.s.logger;\n  }\n\n}\n\nexports.Db = Db;\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION; // TODO(NODE-3484): Refactor into MongoDBNamespace\n// Validate the database name\n\nfunction validateDatabaseName(databaseName) {\n  if (typeof databaseName !== 'string') throw new error_1.MongoInvalidArgumentError('Database name must be a string');\n  if (databaseName.length === 0) throw new error_1.MongoInvalidArgumentError('Database name cannot be the empty string');\n  if (databaseName === '$external') return;\n  const invalidChars = [' ', '.', '$', '/', '\\\\'];\n\n  for (let i = 0; i < invalidChars.length; i++) {\n    if (databaseName.indexOf(invalidChars[i]) !== -1) throw new error_1.MongoAPIError(`database names cannot contain the character '${invalidChars[i]}'`);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","Db","utils_1","require","aggregation_cursor_1","bson_1","read_preference_1","error_1","collection_1","change_stream_1","CONSTANTS","write_concern_1","read_concern_1","logger_1","add_user_1","collections_1","stats_1","run_command_1","create_collection_1","indexes_1","drop_1","list_collections_1","profiling_level_1","remove_user_1","rename_1","set_profiling_level_1","execute_operation_1","admin_1","DB_OPTIONS_ALLOW_LIST","constructor","client","databaseName","options","_a","filterOptions","validateDatabaseName","s","logger","Logger","readPreference","ReadPreference","fromOptions","bsonOptions","resolveBSONOptions","pkFactory","DEFAULT_PK_FACTORY","readConcern","ReadConcern","writeConcern","WriteConcern","namespace","MongoDBNamespace","db","slaveOk","preference","toString","createCollection","name","callback","executeOperation","getTopology","CreateCollectionOperation","resolveOptions","command","RunCommandOperation","aggregate","pipeline","arguments","length","MongoInvalidArgumentError","AggregationCursor","admin","Admin","collection","finalOptions","Collection","stats","DbStatsOperation","listCollections","filter","ListCollectionsCursor","renameCollection","fromCollection","toCollection","PRIMARY","new_collection","RenameOperation","dropCollection","DropCollectionOperation","dropDatabase","DropDatabaseOperation","collections","CollectionsOperation","createIndex","indexSpec","CreateIndexOperation","addUser","username","password","undefined","AddUserOperation","removeUser","RemoveUserOperation","setProfilingLevel","level","SetProfilingLevelOperation","profilingLevel","ProfilingLevelOperation","indexInformation","IndexInformationOperation","unref","watch","Array","isArray","ChangeStream","getLogger","SYSTEM_NAMESPACE_COLLECTION","SYSTEM_INDEX_COLLECTION","SYSTEM_PROFILE_COLLECTION","SYSTEM_USER_COLLECTION","SYSTEM_COMMAND_COLLECTION","SYSTEM_JS_COLLECTION","invalidChars","i","indexOf","MongoAPIError"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/db.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Db = void 0;\nconst utils_1 = require(\"./utils\");\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\nconst bson_1 = require(\"./bson\");\nconst read_preference_1 = require(\"./read_preference\");\nconst error_1 = require(\"./error\");\nconst collection_1 = require(\"./collection\");\nconst change_stream_1 = require(\"./change_stream\");\nconst CONSTANTS = require(\"./constants\");\nconst write_concern_1 = require(\"./write_concern\");\nconst read_concern_1 = require(\"./read_concern\");\nconst logger_1 = require(\"./logger\");\nconst add_user_1 = require(\"./operations/add_user\");\nconst collections_1 = require(\"./operations/collections\");\nconst stats_1 = require(\"./operations/stats\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst create_collection_1 = require(\"./operations/create_collection\");\nconst indexes_1 = require(\"./operations/indexes\");\nconst drop_1 = require(\"./operations/drop\");\nconst list_collections_1 = require(\"./operations/list_collections\");\nconst profiling_level_1 = require(\"./operations/profiling_level\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst rename_1 = require(\"./operations/rename\");\nconst set_profiling_level_1 = require(\"./operations/set_profiling_level\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst admin_1 = require(\"./admin\");\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = [\n    'writeConcern',\n    'readPreference',\n    'readPreferenceTags',\n    'native_parser',\n    'forceServerObjectId',\n    'pkFactory',\n    'serializeFunctions',\n    'raw',\n    'authSource',\n    'ignoreUndefined',\n    'readConcern',\n    'retryMiliSeconds',\n    'numberOfRetries',\n    'loggerLevel',\n    'logger',\n    'promoteBuffers',\n    'promoteLongs',\n    'bsonRegExp',\n    'promoteValues',\n    'compression',\n    'retryWrites'\n];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```js\n * const { MongoClient } = require('mongodb');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Select the database by name\n *   const testDb = client.db(dbName);\n *   client.close();\n * });\n * ```\n */\nclass Db {\n    /**\n     * Creates a new Db instance\n     *\n     * @param client - The MongoClient for the database.\n     * @param databaseName - The name of the database this instance represents.\n     * @param options - Optional settings for Db construction\n     */\n    constructor(client, databaseName, options) {\n        var _a;\n        options = options !== null && options !== void 0 ? options : {};\n        // Filter the options\n        options = utils_1.filterOptions(options, DB_OPTIONS_ALLOW_LIST);\n        // Ensure we have a valid db name\n        validateDatabaseName(databaseName);\n        // Internal state of the db object\n        this.s = {\n            // Client\n            client,\n            // Options\n            options,\n            // Logger instance\n            logger: new logger_1.Logger('Db', options),\n            // Unpack read preference\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            // Merge bson options\n            bsonOptions: bson_1.resolveBSONOptions(options, client),\n            // Set up the primary key factory or fallback to ObjectId\n            pkFactory: (_a = options === null || options === void 0 ? void 0 : options.pkFactory) !== null && _a !== void 0 ? _a : utils_1.DEFAULT_PK_FACTORY,\n            // ReadConcern\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Namespace\n            namespace: new utils_1.MongoDBNamespace(databaseName)\n        };\n    }\n    get databaseName() {\n        return this.s.namespace.db;\n    }\n    // Options\n    get options() {\n        return this.s.options;\n    }\n    // slaveOk specified\n    get slaveOk() {\n        var _a;\n        return ((_a = this.s.readPreference) === null || _a === void 0 ? void 0 : _a.preference) !== 'primary' || false;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the Db. If not explicitly defined for\n     * this Db, will be inherited from the parent MongoClient\n     */\n    get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.s.client.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    // get the write Concern\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get namespace() {\n        return this.s.namespace.toString();\n    }\n    createCollection(name, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        return execute_operation_1.executeOperation(utils_1.getTopology(this), new create_collection_1.CreateCollectionOperation(this, name, utils_1.resolveOptions(this, options)), callback);\n    }\n    command(command, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        // Intentionally, we do not inherit options from parent for this operation.\n        return execute_operation_1.executeOperation(utils_1.getTopology(this), new run_command_1.RunCommandOperation(this, command, options !== null && options !== void 0 ? options : {}), callback);\n    }\n    /**\n     * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n     *\n     * @param pipeline - An array of aggregation stages to be executed\n     * @param options - Optional settings for the command\n     */\n    aggregate(pipeline = [], options) {\n        if (arguments.length > 2) {\n            throw new error_1.MongoInvalidArgumentError('Method \"db.aggregate()\" accepts at most two arguments');\n        }\n        if (typeof pipeline === 'function') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must not be function');\n        }\n        if (typeof options === 'function') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"options\" must not be function');\n        }\n        return new aggregation_cursor_1.AggregationCursor(utils_1.getTopology(this), this.s.namespace, pipeline, utils_1.resolveOptions(this, options));\n    }\n    /** Return the Admin db instance */\n    admin() {\n        return new admin_1.Admin(this);\n    }\n    /**\n     * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n     *\n     * @param name - the collection name we wish to access.\n     * @returns return the new Collection instance\n     */\n    collection(name, options = {}) {\n        if (typeof options === 'function') {\n            throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n        }\n        const finalOptions = utils_1.resolveOptions(this, options);\n        return new collection_1.Collection(this, name, finalOptions);\n    }\n    stats(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        return execute_operation_1.executeOperation(utils_1.getTopology(this), new stats_1.DbStatsOperation(this, utils_1.resolveOptions(this, options)), callback);\n    }\n    listCollections(filter = {}, options = {}) {\n        return new list_collections_1.ListCollectionsCursor(this, filter, utils_1.resolveOptions(this, options));\n    }\n    renameCollection(fromCollection, toCollection, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        // Intentionally, we do not inherit options from parent for this operation.\n        options = { ...options, readPreference: read_preference_1.ReadPreference.PRIMARY };\n        // Add return new collection\n        options.new_collection = true;\n        return execute_operation_1.executeOperation(utils_1.getTopology(this), new rename_1.RenameOperation(this.collection(fromCollection), toCollection, options), callback);\n    }\n    dropCollection(name, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        return execute_operation_1.executeOperation(utils_1.getTopology(this), new drop_1.DropCollectionOperation(this, name, utils_1.resolveOptions(this, options)), callback);\n    }\n    dropDatabase(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        return execute_operation_1.executeOperation(utils_1.getTopology(this), new drop_1.DropDatabaseOperation(this, utils_1.resolveOptions(this, options)), callback);\n    }\n    collections(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        return execute_operation_1.executeOperation(utils_1.getTopology(this), new collections_1.CollectionsOperation(this, utils_1.resolveOptions(this, options)), callback);\n    }\n    createIndex(name, indexSpec, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        return execute_operation_1.executeOperation(utils_1.getTopology(this), new indexes_1.CreateIndexOperation(this, name, indexSpec, utils_1.resolveOptions(this, options)), callback);\n    }\n    addUser(username, password, options, callback) {\n        if (typeof password === 'function') {\n            (callback = password), (password = undefined), (options = {});\n        }\n        else if (typeof password !== 'string') {\n            if (typeof options === 'function') {\n                (callback = options), (options = password), (password = undefined);\n            }\n            else {\n                (options = password), (callback = undefined), (password = undefined);\n            }\n        }\n        else {\n            if (typeof options === 'function')\n                (callback = options), (options = {});\n        }\n        return execute_operation_1.executeOperation(utils_1.getTopology(this), new add_user_1.AddUserOperation(this, username, password, utils_1.resolveOptions(this, options)), callback);\n    }\n    removeUser(username, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        return execute_operation_1.executeOperation(utils_1.getTopology(this), new remove_user_1.RemoveUserOperation(this, username, utils_1.resolveOptions(this, options)), callback);\n    }\n    setProfilingLevel(level, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        return execute_operation_1.executeOperation(utils_1.getTopology(this), new set_profiling_level_1.SetProfilingLevelOperation(this, level, utils_1.resolveOptions(this, options)), callback);\n    }\n    profilingLevel(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        return execute_operation_1.executeOperation(utils_1.getTopology(this), new profiling_level_1.ProfilingLevelOperation(this, utils_1.resolveOptions(this, options)), callback);\n    }\n    indexInformation(name, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        return execute_operation_1.executeOperation(utils_1.getTopology(this), new indexes_1.IndexInformationOperation(this, name, utils_1.resolveOptions(this, options)), callback);\n    }\n    /**\n     * Unref all sockets\n     * @deprecated This function is deprecated and will be removed in the next major version.\n     */\n    unref() {\n        utils_1.getTopology(this).unref();\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this database. Will ignore all\n     * changes to system collections.\n     *\n     * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, utils_1.resolveOptions(this, options));\n    }\n    /** Return the db logger */\n    getLogger() {\n        return this.s.logger;\n    }\n    get logger() {\n        return this.s.logger;\n    }\n}\nexports.Db = Db;\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\n// TODO(NODE-3484): Refactor into MongoDBNamespace\n// Validate the database name\nfunction validateDatabaseName(databaseName) {\n    if (typeof databaseName !== 'string')\n        throw new error_1.MongoInvalidArgumentError('Database name must be a string');\n    if (databaseName.length === 0)\n        throw new error_1.MongoInvalidArgumentError('Database name cannot be the empty string');\n    if (databaseName === '$external')\n        return;\n    const invalidChars = [' ', '.', '$', '/', '\\\\'];\n    for (let i = 0; i < invalidChars.length; i++) {\n        if (databaseName.indexOf(invalidChars[i]) !== -1)\n            throw new error_1.MongoAPIError(`database names cannot contain the character '${invalidChars[i]}'`);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}