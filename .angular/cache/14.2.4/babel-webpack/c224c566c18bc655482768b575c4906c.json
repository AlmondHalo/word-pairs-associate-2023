{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddUserOperation = void 0;\n\nconst crypto = require(\"crypto\");\n\nconst operation_1 = require(\"./operation\");\n\nconst command_1 = require(\"./command\");\n\nconst error_1 = require(\"../error\");\n\nconst utils_1 = require(\"../utils\");\n/** @internal */\n\n\nclass AddUserOperation extends command_1.CommandOperation {\n  constructor(db, username, password, options) {\n    super(db, options);\n    this.db = db;\n    this.username = username;\n    this.password = password;\n    this.options = options !== null && options !== void 0 ? options : {};\n  }\n\n  execute(server, session, callback) {\n    const db = this.db;\n    const username = this.username;\n    const password = this.password;\n    const options = this.options; // Error out if digestPassword set\n\n    if (options.digestPassword != null) {\n      return callback(new error_1.MongoInvalidArgumentError('Option \"digestPassword\" not supported via addUser, use db.command(...) instead'));\n    }\n\n    let roles;\n\n    if (!options.roles || Array.isArray(options.roles) && options.roles.length === 0) {\n      utils_1.emitWarningOnce('Creating a user without roles is deprecated. Defaults to \"root\" if db is \"admin\" or \"dbOwner\" otherwise');\n\n      if (db.databaseName.toLowerCase() === 'admin') {\n        roles = ['root'];\n      } else {\n        roles = ['dbOwner'];\n      }\n    } else {\n      roles = Array.isArray(options.roles) ? options.roles : [options.roles];\n    }\n\n    const digestPassword = utils_1.getTopology(db).lastIsMaster().maxWireVersion >= 7;\n    let userPassword = password;\n\n    if (!digestPassword) {\n      // Use node md5 generator\n      const md5 = crypto.createHash('md5'); // Generate keys used for authentication\n\n      md5.update(`${username}:mongo:${password}`);\n      userPassword = md5.digest('hex');\n    } // Build the command to execute\n\n\n    const command = {\n      createUser: username,\n      customData: options.customData || {},\n      roles: roles,\n      digestPassword\n    }; // No password\n\n    if (typeof password === 'string') {\n      command.pwd = userPassword;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n\n}\n\nexports.AddUserOperation = AddUserOperation;\noperation_1.defineAspects(AddUserOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"names":["Object","defineProperty","exports","value","AddUserOperation","crypto","require","operation_1","command_1","error_1","utils_1","CommandOperation","constructor","db","username","password","options","execute","server","session","callback","digestPassword","MongoInvalidArgumentError","roles","Array","isArray","length","emitWarningOnce","databaseName","toLowerCase","getTopology","lastIsMaster","maxWireVersion","userPassword","md5","createHash","update","digest","command","createUser","customData","pwd","executeCommand","defineAspects","Aspect","WRITE_OPERATION"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/operations/add_user.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddUserOperation = void 0;\nconst crypto = require(\"crypto\");\nconst operation_1 = require(\"./operation\");\nconst command_1 = require(\"./command\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\n/** @internal */\nclass AddUserOperation extends command_1.CommandOperation {\n    constructor(db, username, password, options) {\n        super(db, options);\n        this.db = db;\n        this.username = username;\n        this.password = password;\n        this.options = options !== null && options !== void 0 ? options : {};\n    }\n    execute(server, session, callback) {\n        const db = this.db;\n        const username = this.username;\n        const password = this.password;\n        const options = this.options;\n        // Error out if digestPassword set\n        if (options.digestPassword != null) {\n            return callback(new error_1.MongoInvalidArgumentError('Option \"digestPassword\" not supported via addUser, use db.command(...) instead'));\n        }\n        let roles;\n        if (!options.roles || (Array.isArray(options.roles) && options.roles.length === 0)) {\n            utils_1.emitWarningOnce('Creating a user without roles is deprecated. Defaults to \"root\" if db is \"admin\" or \"dbOwner\" otherwise');\n            if (db.databaseName.toLowerCase() === 'admin') {\n                roles = ['root'];\n            }\n            else {\n                roles = ['dbOwner'];\n            }\n        }\n        else {\n            roles = Array.isArray(options.roles) ? options.roles : [options.roles];\n        }\n        const digestPassword = utils_1.getTopology(db).lastIsMaster().maxWireVersion >= 7;\n        let userPassword = password;\n        if (!digestPassword) {\n            // Use node md5 generator\n            const md5 = crypto.createHash('md5');\n            // Generate keys used for authentication\n            md5.update(`${username}:mongo:${password}`);\n            userPassword = md5.digest('hex');\n        }\n        // Build the command to execute\n        const command = {\n            createUser: username,\n            customData: options.customData || {},\n            roles: roles,\n            digestPassword\n        };\n        // No password\n        if (typeof password === 'string') {\n            command.pwd = userPassword;\n        }\n        super.executeCommand(server, session, command, callback);\n    }\n}\nexports.AddUserOperation = AddUserOperation;\noperation_1.defineAspects(AddUserOperation, [operation_1.Aspect.WRITE_OPERATION]);\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2B,KAAK,CAAhC;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,UAAD,CAAvB;AACA;;;AACA,MAAMF,gBAAN,SAA+BI,SAAS,CAACG,gBAAzC,CAA0D;EACtDC,WAAW,CAACC,EAAD,EAAKC,QAAL,EAAeC,QAAf,EAAyBC,OAAzB,EAAkC;IACzC,MAAMH,EAAN,EAAUG,OAAV;IACA,KAAKH,EAAL,GAAUA,EAAV;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKC,OAAL,GAAeA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyCA,OAAzC,GAAmD,EAAlE;EACH;;EACDC,OAAO,CAACC,MAAD,EAASC,OAAT,EAAkBC,QAAlB,EAA4B;IAC/B,MAAMP,EAAE,GAAG,KAAKA,EAAhB;IACA,MAAMC,QAAQ,GAAG,KAAKA,QAAtB;IACA,MAAMC,QAAQ,GAAG,KAAKA,QAAtB;IACA,MAAMC,OAAO,GAAG,KAAKA,OAArB,CAJ+B,CAK/B;;IACA,IAAIA,OAAO,CAACK,cAAR,IAA0B,IAA9B,EAAoC;MAChC,OAAOD,QAAQ,CAAC,IAAIX,OAAO,CAACa,yBAAZ,CAAsC,gFAAtC,CAAD,CAAf;IACH;;IACD,IAAIC,KAAJ;;IACA,IAAI,CAACP,OAAO,CAACO,KAAT,IAAmBC,KAAK,CAACC,OAAN,CAAcT,OAAO,CAACO,KAAtB,KAAgCP,OAAO,CAACO,KAAR,CAAcG,MAAd,KAAyB,CAAhF,EAAoF;MAChFhB,OAAO,CAACiB,eAAR,CAAwB,yGAAxB;;MACA,IAAId,EAAE,CAACe,YAAH,CAAgBC,WAAhB,OAAkC,OAAtC,EAA+C;QAC3CN,KAAK,GAAG,CAAC,MAAD,CAAR;MACH,CAFD,MAGK;QACDA,KAAK,GAAG,CAAC,SAAD,CAAR;MACH;IACJ,CARD,MASK;MACDA,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcT,OAAO,CAACO,KAAtB,IAA+BP,OAAO,CAACO,KAAvC,GAA+C,CAACP,OAAO,CAACO,KAAT,CAAvD;IACH;;IACD,MAAMF,cAAc,GAAGX,OAAO,CAACoB,WAAR,CAAoBjB,EAApB,EAAwBkB,YAAxB,GAAuCC,cAAvC,IAAyD,CAAhF;IACA,IAAIC,YAAY,GAAGlB,QAAnB;;IACA,IAAI,CAACM,cAAL,EAAqB;MACjB;MACA,MAAMa,GAAG,GAAG7B,MAAM,CAAC8B,UAAP,CAAkB,KAAlB,CAAZ,CAFiB,CAGjB;;MACAD,GAAG,CAACE,MAAJ,CAAY,GAAEtB,QAAS,UAASC,QAAS,EAAzC;MACAkB,YAAY,GAAGC,GAAG,CAACG,MAAJ,CAAW,KAAX,CAAf;IACH,CA9B8B,CA+B/B;;;IACA,MAAMC,OAAO,GAAG;MACZC,UAAU,EAAEzB,QADA;MAEZ0B,UAAU,EAAExB,OAAO,CAACwB,UAAR,IAAsB,EAFtB;MAGZjB,KAAK,EAAEA,KAHK;MAIZF;IAJY,CAAhB,CAhC+B,CAsC/B;;IACA,IAAI,OAAON,QAAP,KAAoB,QAAxB,EAAkC;MAC9BuB,OAAO,CAACG,GAAR,GAAcR,YAAd;IACH;;IACD,MAAMS,cAAN,CAAqBxB,MAArB,EAA6BC,OAA7B,EAAsCmB,OAAtC,EAA+ClB,QAA/C;EACH;;AAnDqD;;AAqD1DlB,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B;AACAG,WAAW,CAACoC,aAAZ,CAA0BvC,gBAA1B,EAA4C,CAACG,WAAW,CAACqC,MAAZ,CAAmBC,eAApB,CAA5C"},"metadata":{},"sourceType":"script"}