{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HEARTBEAT_EVENTS = exports.Server = void 0;\n\nconst logger_1 = require(\"../logger\");\n\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\n\nconst server_description_1 = require(\"./server_description\");\n\nconst monitor_1 = require(\"./monitor\");\n\nconst transactions_1 = require(\"../transactions\");\n\nconst utils_1 = require(\"../utils\");\n\nconst common_1 = require(\"./common\");\n\nconst error_1 = require(\"../error\");\n\nconst connection_1 = require(\"../cmap/connection\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst utils_2 = require(\"../utils\");\n\nconst stateTransition = utils_1.makeStateMachine({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\n\nconst kMonitor = Symbol('monitor');\n/** @internal */\n\nclass Server extends mongo_types_1.TypedEventEmitter {\n  /**\n   * Create a server\n   */\n  constructor(topology, description, options) {\n    super();\n    this.serverApi = options.serverApi;\n    const poolOptions = {\n      hostAddress: description.hostAddress,\n      ...options\n    };\n    this.s = {\n      description,\n      options,\n      logger: new logger_1.Logger('Server'),\n      state: common_1.STATE_CLOSED,\n      topology,\n      pool: new connection_pool_1.ConnectionPool(poolOptions)\n    };\n\n    for (const event of [...connection_pool_1.CMAP_EVENTS, ...connection_1.APM_EVENTS]) {\n      this.s.pool.on(event, e => this.emit(event, e));\n    }\n\n    this.s.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, clusterTime => {\n      this.clusterTime = clusterTime;\n    }); // monitoring is disabled in load balancing mode\n\n    if (this.loadBalanced) return; // create the monitor\n\n    this[kMonitor] = new monitor_1.Monitor(this, this.s.options);\n\n    for (const event of exports.HEARTBEAT_EVENTS) {\n      this[kMonitor].on(event, e => this.emit(event, e));\n    }\n\n    this[kMonitor].on('resetConnectionPool', () => {\n      this.s.pool.clear();\n    });\n    this[kMonitor].on('resetServer', error => markServerUnknown(this, error));\n    this[kMonitor].on(Server.SERVER_HEARTBEAT_SUCCEEDED, event => {\n      this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n        roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n      }));\n\n      if (this.s.state === common_1.STATE_CONNECTING) {\n        stateTransition(this, common_1.STATE_CONNECTED);\n        this.emit(Server.CONNECT, this);\n      }\n    });\n  }\n\n  get description() {\n    return this.s.description;\n  }\n\n  get name() {\n    return this.s.description.address;\n  }\n\n  get autoEncrypter() {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n  }\n\n  get loadBalanced() {\n    return this.s.topology.description.type === common_1.TopologyType.LoadBalanced;\n  }\n  /**\n   * Initiate server connect\n   */\n\n\n  connect() {\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CONNECTING); // If in load balancer mode we automatically set the server to\n    // a load balancer. It never transitions out of this state and\n    // has no monitor.\n\n    if (!this.loadBalanced) {\n      this[kMonitor].connect();\n    } else {\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Server.CONNECT, this);\n    }\n  }\n  /** Destroy the server connection */\n\n\n  destroy(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = Object.assign({}, {\n      force: false\n    }, options);\n\n    if (this.s.state === common_1.STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CLOSING);\n\n    if (!this.loadBalanced) {\n      this[kMonitor].close();\n    }\n\n    this.s.pool.close(options, err => {\n      stateTransition(this, common_1.STATE_CLOSED);\n      this.emit('closed');\n\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    });\n  }\n  /**\n   * Immediately schedule monitoring of this server. If there already an attempt being made\n   * this will be a no-op.\n   */\n\n\n  requestCheck() {\n    if (!this.loadBalanced) {\n      this[kMonitor].requestCheck();\n    }\n  }\n\n  command(ns, cmd, options, callback) {\n    if (typeof options === 'function') {\n      callback = options, options = {}, options = options !== null && options !== void 0 ? options : {};\n    }\n\n    if (callback == null) {\n      throw new error_1.MongoInvalidArgumentError('Callback must be provided');\n    }\n\n    if (ns.db == null || typeof ns === 'string') {\n      throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n    }\n\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      callback(new error_1.MongoServerClosedError());\n      return;\n    } // Clone the options\n\n\n    const finalOptions = Object.assign({}, options, {\n      wireProtocolCommand: false\n    }); // error if collation not supported\n\n    if (utils_1.collationNotSupported(this, cmd)) {\n      callback(new error_1.MongoCompatibilityError(`Server ${this.name} does not support collation`));\n      return;\n    }\n\n    const session = finalOptions.session;\n    const conn = session === null || session === void 0 ? void 0 : session.pinnedConnection; // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n    //       (and prevent them from being checked back in) at the point of operation execution.\n    //       This should be considered as part of the work for NODE-2882\n\n    if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n      this.s.pool.checkOut((err, checkedOut) => {\n        if (err || checkedOut == null) {\n          if (callback) return callback(err);\n          return;\n        }\n\n        session.pin(checkedOut);\n        this.command(ns, cmd, finalOptions, callback);\n      });\n      return;\n    }\n\n    this.s.pool.withConnection(conn, (err, conn, cb) => {\n      if (err || !conn) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.command(ns, cmd, finalOptions, makeOperationHandler(this, conn, cmd, finalOptions, cb));\n    }, callback);\n  }\n  /**\n   * Execute a query against the server\n   * @internal\n   */\n\n\n  query(ns, cmd, options, callback) {\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      callback(new error_1.MongoServerClosedError());\n      return;\n    }\n\n    this.s.pool.withConnection(undefined, (err, conn, cb) => {\n      if (err || !conn) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.query(ns, cmd, options, makeOperationHandler(this, conn, cmd, options, cb));\n    }, callback);\n  }\n  /**\n   * Execute a `getMore` against the server\n   * @internal\n   */\n\n\n  getMore(ns, cursorId, options, callback) {\n    var _a;\n\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      callback(new error_1.MongoServerClosedError());\n      return;\n    }\n\n    this.s.pool.withConnection((_a = options.session) === null || _a === void 0 ? void 0 : _a.pinnedConnection, (err, conn, cb) => {\n      if (err || !conn) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.getMore(ns, cursorId, options, makeOperationHandler(this, conn, {}, options, cb));\n    }, callback);\n  }\n  /**\n   * Execute a `killCursors` command against the server\n   * @internal\n   */\n\n\n  killCursors(ns, cursorIds, options, callback) {\n    var _a;\n\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback(new error_1.MongoServerClosedError());\n      }\n\n      return;\n    }\n\n    this.s.pool.withConnection((_a = options.session) === null || _a === void 0 ? void 0 : _a.pinnedConnection, (err, conn, cb) => {\n      if (err || !conn) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.killCursors(ns, cursorIds, options, makeOperationHandler(this, conn, {}, undefined, cb));\n    }, callback);\n  }\n\n}\n\nexports.Server = Server;\n/** @event */\n\nServer.SERVER_HEARTBEAT_STARTED = 'serverHeartbeatStarted';\n/** @event */\n\nServer.SERVER_HEARTBEAT_SUCCEEDED = 'serverHeartbeatSucceeded';\n/** @event */\n\nServer.SERVER_HEARTBEAT_FAILED = 'serverHeartbeatFailed';\n/** @event */\n\nServer.CONNECT = 'connect';\n/** @event */\n\nServer.DESCRIPTION_RECEIVED = 'descriptionReceived';\n/** @event */\n\nServer.CLOSED = 'closed';\n/** @event */\n\nServer.ENDED = 'ended';\nexports.HEARTBEAT_EVENTS = [Server.SERVER_HEARTBEAT_STARTED, Server.SERVER_HEARTBEAT_SUCCEEDED, Server.SERVER_HEARTBEAT_FAILED];\nObject.defineProperty(Server.prototype, 'clusterTime', {\n  get() {\n    return this.s.topology.clusterTime;\n  },\n\n  set(clusterTime) {\n    this.s.topology.clusterTime = clusterTime;\n  }\n\n});\n\nfunction calculateRoundTripTime(oldRtt, duration) {\n  if (oldRtt === -1) {\n    return duration;\n  }\n\n  const alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\n\nfunction markServerUnknown(server, error) {\n  // Load balancer servers can never be marked unknown.\n  if (server.loadBalanced) {\n    return;\n  }\n\n  if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n    server[kMonitor].reset();\n  }\n\n  server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, {\n    error,\n    topologyVersion: error && error.topologyVersion ? error.topologyVersion : server.description.topologyVersion\n  }));\n}\n\nfunction isPinnableCommand(cmd, session) {\n  if (session) {\n    return session.inTransaction() || 'aggregate' in cmd || 'find' in cmd || 'getMore' in cmd || 'listCollections' in cmd || 'listIndexes' in cmd;\n  }\n\n  return false;\n}\n\nfunction connectionIsStale(pool, connection) {\n  if (connection.serviceId) {\n    return connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString());\n  }\n\n  return connection.generation !== pool.generation;\n}\n\nfunction shouldHandleStateChangeError(server, err) {\n  const etv = err.topologyVersion;\n  const stv = server.description.topologyVersion;\n  return server_description_1.compareTopologyVersion(stv, etv) < 0;\n}\n\nfunction inActiveTransaction(session, cmd) {\n  return session && session.inTransaction() && !transactions_1.isTransactionCommand(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\n\n\nfunction isRetryableWritesEnabled(topology) {\n  return topology.s.options.retryWrites !== false;\n}\n\nfunction makeOperationHandler(server, connection, cmd, options, callback) {\n  const session = options === null || options === void 0 ? void 0 : options.session;\n  return function handleOperationResult(err, result) {\n    if (err && !connectionIsStale(server.s.pool, connection)) {\n      if (err instanceof error_1.MongoNetworkError) {\n        if (session && !session.hasEnded && session.serverSession) {\n          session.serverSession.isDirty = true;\n        } // inActiveTransaction check handles commit and abort.\n\n\n        if (inActiveTransaction(session, cmd) && !err.hasErrorLabel('TransientTransactionError')) {\n          err.addErrorLabel('TransientTransactionError');\n        }\n\n        if ((isRetryableWritesEnabled(server.s.topology) || transactions_1.isTransactionCommand(cmd)) && utils_2.supportsRetryableWrites(server) && !inActiveTransaction(session, cmd)) {\n          err.addErrorLabel('RetryableWriteError');\n        }\n\n        if (!(err instanceof error_1.MongoNetworkTimeoutError) || error_1.isNetworkErrorBeforeHandshake(err)) {\n          // In load balanced mode we never mark the server as unknown and always\n          // clear for the specific service id.\n          server.s.pool.clear(connection.serviceId);\n\n          if (!server.loadBalanced) {\n            markServerUnknown(server, err);\n          }\n        }\n      } else {\n        // if pre-4.4 server, then add error label if its a retryable write error\n        if ((isRetryableWritesEnabled(server.s.topology) || transactions_1.isTransactionCommand(cmd)) && utils_1.maxWireVersion(server) < 9 && error_1.isRetryableWriteError(err) && !inActiveTransaction(session, cmd)) {\n          err.addErrorLabel('RetryableWriteError');\n        }\n\n        if (error_1.isSDAMUnrecoverableError(err)) {\n          if (shouldHandleStateChangeError(server, err)) {\n            if (utils_1.maxWireVersion(server) <= 7 || error_1.isNodeShuttingDownError(err)) {\n              server.s.pool.clear(connection.serviceId);\n            }\n\n            if (!server.loadBalanced) {\n              markServerUnknown(server, err);\n              process.nextTick(() => server.requestCheck());\n            }\n          }\n        }\n      }\n\n      if (session && session.isPinned && err.hasErrorLabel('TransientTransactionError')) {\n        session.unpin({\n          force: true\n        });\n      }\n    }\n\n    callback(err, result);\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","HEARTBEAT_EVENTS","Server","logger_1","require","connection_pool_1","server_description_1","monitor_1","transactions_1","utils_1","common_1","error_1","connection_1","mongo_types_1","utils_2","stateTransition","makeStateMachine","STATE_CLOSED","STATE_CONNECTING","STATE_CLOSING","STATE_CONNECTED","kMonitor","Symbol","TypedEventEmitter","constructor","topology","description","options","serverApi","poolOptions","hostAddress","s","logger","Logger","state","pool","ConnectionPool","event","CMAP_EVENTS","APM_EVENTS","on","e","emit","Connection","CLUSTER_TIME_RECEIVED","clusterTime","loadBalanced","Monitor","clear","error","markServerUnknown","SERVER_HEARTBEAT_SUCCEEDED","DESCRIPTION_RECEIVED","ServerDescription","reply","roundTripTime","calculateRoundTripTime","duration","CONNECT","name","address","autoEncrypter","type","TopologyType","LoadBalanced","connect","destroy","callback","assign","force","close","err","requestCheck","command","ns","cmd","MongoInvalidArgumentError","db","MongoServerClosedError","finalOptions","wireProtocolCommand","collationNotSupported","MongoCompatibilityError","session","conn","pinnedConnection","isPinnableCommand","checkOut","checkedOut","pin","withConnection","cb","makeOperationHandler","query","undefined","getMore","cursorId","_a","killCursors","cursorIds","SERVER_HEARTBEAT_STARTED","SERVER_HEARTBEAT_FAILED","CLOSED","ENDED","prototype","get","set","oldRtt","alpha","server","MongoNetworkError","MongoNetworkTimeoutError","reset","topologyVersion","inTransaction","connectionIsStale","connection","serviceId","generation","serviceGenerations","toHexString","shouldHandleStateChangeError","etv","stv","compareTopologyVersion","inActiveTransaction","isTransactionCommand","isRetryableWritesEnabled","retryWrites","handleOperationResult","result","hasEnded","serverSession","isDirty","hasErrorLabel","addErrorLabel","supportsRetryableWrites","isNetworkErrorBeforeHandshake","maxWireVersion","isRetryableWriteError","isSDAMUnrecoverableError","isNodeShuttingDownError","process","nextTick","isPinned","unpin"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/sdam/server.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HEARTBEAT_EVENTS = exports.Server = void 0;\nconst logger_1 = require(\"../logger\");\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\nconst server_description_1 = require(\"./server_description\");\nconst monitor_1 = require(\"./monitor\");\nconst transactions_1 = require(\"../transactions\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst error_1 = require(\"../error\");\nconst connection_1 = require(\"../cmap/connection\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_2 = require(\"../utils\");\nconst stateTransition = utils_1.makeStateMachine({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kMonitor = Symbol('monitor');\n/** @internal */\nclass Server extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a server\n     */\n    constructor(topology, description, options) {\n        super();\n        this.serverApi = options.serverApi;\n        const poolOptions = { hostAddress: description.hostAddress, ...options };\n        this.s = {\n            description,\n            options,\n            logger: new logger_1.Logger('Server'),\n            state: common_1.STATE_CLOSED,\n            topology,\n            pool: new connection_pool_1.ConnectionPool(poolOptions)\n        };\n        for (const event of [...connection_pool_1.CMAP_EVENTS, ...connection_1.APM_EVENTS]) {\n            this.s.pool.on(event, (e) => this.emit(event, e));\n        }\n        this.s.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, (clusterTime) => {\n            this.clusterTime = clusterTime;\n        });\n        // monitoring is disabled in load balancing mode\n        if (this.loadBalanced)\n            return;\n        // create the monitor\n        this[kMonitor] = new monitor_1.Monitor(this, this.s.options);\n        for (const event of exports.HEARTBEAT_EVENTS) {\n            this[kMonitor].on(event, (e) => this.emit(event, e));\n        }\n        this[kMonitor].on('resetConnectionPool', () => {\n            this.s.pool.clear();\n        });\n        this[kMonitor].on('resetServer', (error) => markServerUnknown(this, error));\n        this[kMonitor].on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event) => {\n            this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n                roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n            }));\n            if (this.s.state === common_1.STATE_CONNECTING) {\n                stateTransition(this, common_1.STATE_CONNECTED);\n                this.emit(Server.CONNECT, this);\n            }\n        });\n    }\n    get description() {\n        return this.s.description;\n    }\n    get name() {\n        return this.s.description.address;\n    }\n    get autoEncrypter() {\n        if (this.s.options && this.s.options.autoEncrypter) {\n            return this.s.options.autoEncrypter;\n        }\n    }\n    get loadBalanced() {\n        return this.s.topology.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /**\n     * Initiate server connect\n     */\n    connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // If in load balancer mode we automatically set the server to\n        // a load balancer. It never transitions out of this state and\n        // has no monitor.\n        if (!this.loadBalanced) {\n            this[kMonitor].connect();\n        }\n        else {\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Server.CONNECT, this);\n        }\n    }\n    /** Destroy the server connection */\n    destroy(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = Object.assign({}, { force: false }, options);\n        if (this.s.state === common_1.STATE_CLOSED) {\n            if (typeof callback === 'function') {\n                callback();\n            }\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        if (!this.loadBalanced) {\n            this[kMonitor].close();\n        }\n        this.s.pool.close(options, err => {\n            stateTransition(this, common_1.STATE_CLOSED);\n            this.emit('closed');\n            if (typeof callback === 'function') {\n                callback(err);\n            }\n        });\n    }\n    /**\n     * Immediately schedule monitoring of this server. If there already an attempt being made\n     * this will be a no-op.\n     */\n    requestCheck() {\n        if (!this.loadBalanced) {\n            this[kMonitor].requestCheck();\n        }\n    }\n    command(ns, cmd, options, callback) {\n        if (typeof options === 'function') {\n            (callback = options), (options = {}), (options = options !== null && options !== void 0 ? options : {});\n        }\n        if (callback == null) {\n            throw new error_1.MongoInvalidArgumentError('Callback must be provided');\n        }\n        if (ns.db == null || typeof ns === 'string') {\n            throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n        }\n        if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n            callback(new error_1.MongoServerClosedError());\n            return;\n        }\n        // Clone the options\n        const finalOptions = Object.assign({}, options, { wireProtocolCommand: false });\n        // error if collation not supported\n        if (utils_1.collationNotSupported(this, cmd)) {\n            callback(new error_1.MongoCompatibilityError(`Server ${this.name} does not support collation`));\n            return;\n        }\n        const session = finalOptions.session;\n        const conn = session === null || session === void 0 ? void 0 : session.pinnedConnection;\n        // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n        //       (and prevent them from being checked back in) at the point of operation execution.\n        //       This should be considered as part of the work for NODE-2882\n        if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n            this.s.pool.checkOut((err, checkedOut) => {\n                if (err || checkedOut == null) {\n                    if (callback)\n                        return callback(err);\n                    return;\n                }\n                session.pin(checkedOut);\n                this.command(ns, cmd, finalOptions, callback);\n            });\n            return;\n        }\n        this.s.pool.withConnection(conn, (err, conn, cb) => {\n            if (err || !conn) {\n                markServerUnknown(this, err);\n                return cb(err);\n            }\n            conn.command(ns, cmd, finalOptions, makeOperationHandler(this, conn, cmd, finalOptions, cb));\n        }, callback);\n    }\n    /**\n     * Execute a query against the server\n     * @internal\n     */\n    query(ns, cmd, options, callback) {\n        if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n            callback(new error_1.MongoServerClosedError());\n            return;\n        }\n        this.s.pool.withConnection(undefined, (err, conn, cb) => {\n            if (err || !conn) {\n                markServerUnknown(this, err);\n                return cb(err);\n            }\n            conn.query(ns, cmd, options, makeOperationHandler(this, conn, cmd, options, cb));\n        }, callback);\n    }\n    /**\n     * Execute a `getMore` against the server\n     * @internal\n     */\n    getMore(ns, cursorId, options, callback) {\n        var _a;\n        if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n            callback(new error_1.MongoServerClosedError());\n            return;\n        }\n        this.s.pool.withConnection((_a = options.session) === null || _a === void 0 ? void 0 : _a.pinnedConnection, (err, conn, cb) => {\n            if (err || !conn) {\n                markServerUnknown(this, err);\n                return cb(err);\n            }\n            conn.getMore(ns, cursorId, options, makeOperationHandler(this, conn, {}, options, cb));\n        }, callback);\n    }\n    /**\n     * Execute a `killCursors` command against the server\n     * @internal\n     */\n    killCursors(ns, cursorIds, options, callback) {\n        var _a;\n        if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n            if (typeof callback === 'function') {\n                callback(new error_1.MongoServerClosedError());\n            }\n            return;\n        }\n        this.s.pool.withConnection((_a = options.session) === null || _a === void 0 ? void 0 : _a.pinnedConnection, (err, conn, cb) => {\n            if (err || !conn) {\n                markServerUnknown(this, err);\n                return cb(err);\n            }\n            conn.killCursors(ns, cursorIds, options, makeOperationHandler(this, conn, {}, undefined, cb));\n        }, callback);\n    }\n}\nexports.Server = Server;\n/** @event */\nServer.SERVER_HEARTBEAT_STARTED = 'serverHeartbeatStarted';\n/** @event */\nServer.SERVER_HEARTBEAT_SUCCEEDED = 'serverHeartbeatSucceeded';\n/** @event */\nServer.SERVER_HEARTBEAT_FAILED = 'serverHeartbeatFailed';\n/** @event */\nServer.CONNECT = 'connect';\n/** @event */\nServer.DESCRIPTION_RECEIVED = 'descriptionReceived';\n/** @event */\nServer.CLOSED = 'closed';\n/** @event */\nServer.ENDED = 'ended';\nexports.HEARTBEAT_EVENTS = [\n    Server.SERVER_HEARTBEAT_STARTED,\n    Server.SERVER_HEARTBEAT_SUCCEEDED,\n    Server.SERVER_HEARTBEAT_FAILED\n];\nObject.defineProperty(Server.prototype, 'clusterTime', {\n    get() {\n        return this.s.topology.clusterTime;\n    },\n    set(clusterTime) {\n        this.s.topology.clusterTime = clusterTime;\n    }\n});\nfunction calculateRoundTripTime(oldRtt, duration) {\n    if (oldRtt === -1) {\n        return duration;\n    }\n    const alpha = 0.2;\n    return alpha * duration + (1 - alpha) * oldRtt;\n}\nfunction markServerUnknown(server, error) {\n    // Load balancer servers can never be marked unknown.\n    if (server.loadBalanced) {\n        return;\n    }\n    if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n        server[kMonitor].reset();\n    }\n    server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, {\n        error,\n        topologyVersion: error && error.topologyVersion ? error.topologyVersion : server.description.topologyVersion\n    }));\n}\nfunction isPinnableCommand(cmd, session) {\n    if (session) {\n        return (session.inTransaction() ||\n            'aggregate' in cmd ||\n            'find' in cmd ||\n            'getMore' in cmd ||\n            'listCollections' in cmd ||\n            'listIndexes' in cmd);\n    }\n    return false;\n}\nfunction connectionIsStale(pool, connection) {\n    if (connection.serviceId) {\n        return (connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString()));\n    }\n    return connection.generation !== pool.generation;\n}\nfunction shouldHandleStateChangeError(server, err) {\n    const etv = err.topologyVersion;\n    const stv = server.description.topologyVersion;\n    return server_description_1.compareTopologyVersion(stv, etv) < 0;\n}\nfunction inActiveTransaction(session, cmd) {\n    return session && session.inTransaction() && !transactions_1.isTransactionCommand(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology) {\n    return topology.s.options.retryWrites !== false;\n}\nfunction makeOperationHandler(server, connection, cmd, options, callback) {\n    const session = options === null || options === void 0 ? void 0 : options.session;\n    return function handleOperationResult(err, result) {\n        if (err && !connectionIsStale(server.s.pool, connection)) {\n            if (err instanceof error_1.MongoNetworkError) {\n                if (session && !session.hasEnded && session.serverSession) {\n                    session.serverSession.isDirty = true;\n                }\n                // inActiveTransaction check handles commit and abort.\n                if (inActiveTransaction(session, cmd) && !err.hasErrorLabel('TransientTransactionError')) {\n                    err.addErrorLabel('TransientTransactionError');\n                }\n                if ((isRetryableWritesEnabled(server.s.topology) || transactions_1.isTransactionCommand(cmd)) &&\n                    utils_2.supportsRetryableWrites(server) &&\n                    !inActiveTransaction(session, cmd)) {\n                    err.addErrorLabel('RetryableWriteError');\n                }\n                if (!(err instanceof error_1.MongoNetworkTimeoutError) || error_1.isNetworkErrorBeforeHandshake(err)) {\n                    // In load balanced mode we never mark the server as unknown and always\n                    // clear for the specific service id.\n                    server.s.pool.clear(connection.serviceId);\n                    if (!server.loadBalanced) {\n                        markServerUnknown(server, err);\n                    }\n                }\n            }\n            else {\n                // if pre-4.4 server, then add error label if its a retryable write error\n                if ((isRetryableWritesEnabled(server.s.topology) || transactions_1.isTransactionCommand(cmd)) &&\n                    utils_1.maxWireVersion(server) < 9 &&\n                    error_1.isRetryableWriteError(err) &&\n                    !inActiveTransaction(session, cmd)) {\n                    err.addErrorLabel('RetryableWriteError');\n                }\n                if (error_1.isSDAMUnrecoverableError(err)) {\n                    if (shouldHandleStateChangeError(server, err)) {\n                        if (utils_1.maxWireVersion(server) <= 7 || error_1.isNodeShuttingDownError(err)) {\n                            server.s.pool.clear(connection.serviceId);\n                        }\n                        if (!server.loadBalanced) {\n                            markServerUnknown(server, err);\n                            process.nextTick(() => server.requestCheck());\n                        }\n                    }\n                }\n            }\n            if (session && session.isPinned && err.hasErrorLabel('TransientTransactionError')) {\n                session.unpin({ force: true });\n            }\n        }\n        callback(err, result);\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}