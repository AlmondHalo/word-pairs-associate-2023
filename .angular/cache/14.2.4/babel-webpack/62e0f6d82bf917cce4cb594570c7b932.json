{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readPreferenceServerSelector = exports.writableServerSelector = void 0;\n\nconst common_1 = require(\"./common\");\n\nconst read_preference_1 = require(\"../read_preference\");\n\nconst error_1 = require(\"../error\"); // max staleness constants\n\n\nconst IDLE_WRITE_PERIOD = 10000;\nconst SMALLEST_MAX_STALENESS_SECONDS = 90;\n/**\n * Returns a server selector that selects for writable servers\n */\n\nfunction writableServerSelector() {\n  return (topologyDescription, servers) => latencyWindowReducer(topologyDescription, servers.filter(s => s.isWritable));\n}\n\nexports.writableServerSelector = writableServerSelector;\n/**\n * Reduces the passed in array of servers by the rules of the \"Max Staleness\" specification\n * found here: https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.rst\n *\n * @param readPreference - The read preference providing max staleness guidance\n * @param topologyDescription - The topology description\n * @param servers - The list of server descriptions to be reduced\n * @returns The list of servers that satisfy the requirements of max staleness\n */\n\nfunction maxStalenessReducer(readPreference, topologyDescription, servers) {\n  if (readPreference.maxStalenessSeconds == null || readPreference.maxStalenessSeconds < 0) {\n    return servers;\n  }\n\n  const maxStaleness = readPreference.maxStalenessSeconds;\n  const maxStalenessVariance = (topologyDescription.heartbeatFrequencyMS + IDLE_WRITE_PERIOD) / 1000;\n\n  if (maxStaleness < maxStalenessVariance) {\n    throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${maxStalenessVariance} seconds`);\n  }\n\n  if (maxStaleness < SMALLEST_MAX_STALENESS_SECONDS) {\n    throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${SMALLEST_MAX_STALENESS_SECONDS} seconds`);\n  }\n\n  if (topologyDescription.type === common_1.TopologyType.ReplicaSetWithPrimary) {\n    const primary = Array.from(topologyDescription.servers.values()).filter(primaryFilter)[0];\n    return servers.reduce((result, server) => {\n      var _a;\n\n      const stalenessMS = server.lastUpdateTime - server.lastWriteDate - (primary.lastUpdateTime - primary.lastWriteDate) + topologyDescription.heartbeatFrequencyMS;\n      const staleness = stalenessMS / 1000;\n      const maxStalenessSeconds = (_a = readPreference.maxStalenessSeconds) !== null && _a !== void 0 ? _a : 0;\n\n      if (staleness <= maxStalenessSeconds) {\n        result.push(server);\n      }\n\n      return result;\n    }, []);\n  }\n\n  if (topologyDescription.type === common_1.TopologyType.ReplicaSetNoPrimary) {\n    if (servers.length === 0) {\n      return servers;\n    }\n\n    const sMax = servers.reduce((max, s) => s.lastWriteDate > max.lastWriteDate ? s : max);\n    return servers.reduce((result, server) => {\n      var _a;\n\n      const stalenessMS = sMax.lastWriteDate - server.lastWriteDate + topologyDescription.heartbeatFrequencyMS;\n      const staleness = stalenessMS / 1000;\n      const maxStalenessSeconds = (_a = readPreference.maxStalenessSeconds) !== null && _a !== void 0 ? _a : 0;\n\n      if (staleness <= maxStalenessSeconds) {\n        result.push(server);\n      }\n\n      return result;\n    }, []);\n  }\n\n  return servers;\n}\n/**\n * Determines whether a server's tags match a given set of tags\n *\n * @param tagSet - The requested tag set to match\n * @param serverTags - The server's tags\n */\n\n\nfunction tagSetMatch(tagSet, serverTags) {\n  const keys = Object.keys(tagSet);\n  const serverTagKeys = Object.keys(serverTags);\n\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n\n    if (serverTagKeys.indexOf(key) === -1 || serverTags[key] !== tagSet[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Reduces a set of server descriptions based on tags requested by the read preference\n *\n * @param readPreference - The read preference providing the requested tags\n * @param servers - The list of server descriptions to reduce\n * @returns The list of servers matching the requested tags\n */\n\n\nfunction tagSetReducer(readPreference, servers) {\n  if (readPreference.tags == null || Array.isArray(readPreference.tags) && readPreference.tags.length === 0) {\n    return servers;\n  }\n\n  for (let i = 0; i < readPreference.tags.length; ++i) {\n    const tagSet = readPreference.tags[i];\n    const serversMatchingTagset = servers.reduce((matched, server) => {\n      if (tagSetMatch(tagSet, server.tags)) matched.push(server);\n      return matched;\n    }, []);\n\n    if (serversMatchingTagset.length) {\n      return serversMatchingTagset;\n    }\n  }\n\n  return [];\n}\n/**\n * Reduces a list of servers to ensure they fall within an acceptable latency window. This is\n * further specified in the \"Server Selection\" specification, found here:\n * https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst\n *\n * @param topologyDescription - The topology description\n * @param servers - The list of servers to reduce\n * @returns The servers which fall within an acceptable latency window\n */\n\n\nfunction latencyWindowReducer(topologyDescription, servers) {\n  const low = servers.reduce((min, server) => min === -1 ? server.roundTripTime : Math.min(server.roundTripTime, min), -1);\n  const high = low + topologyDescription.localThresholdMS;\n  return servers.reduce((result, server) => {\n    if (server.roundTripTime <= high && server.roundTripTime >= low) result.push(server);\n    return result;\n  }, []);\n} // filters\n\n\nfunction primaryFilter(server) {\n  return server.type === common_1.ServerType.RSPrimary;\n}\n\nfunction secondaryFilter(server) {\n  return server.type === common_1.ServerType.RSSecondary;\n}\n\nfunction nearestFilter(server) {\n  return server.type === common_1.ServerType.RSSecondary || server.type === common_1.ServerType.RSPrimary;\n}\n\nfunction knownFilter(server) {\n  return server.type !== common_1.ServerType.Unknown;\n}\n\nfunction loadBalancerFilter(server) {\n  return server.type === common_1.ServerType.LoadBalancer;\n}\n/**\n * Returns a function which selects servers based on a provided read preference\n *\n * @param readPreference - The read preference to select with\n */\n\n\nfunction readPreferenceServerSelector(readPreference) {\n  if (!readPreference.isValid()) {\n    throw new error_1.MongoInvalidArgumentError('Invalid read preference specified');\n  }\n\n  return (topologyDescription, servers) => {\n    const commonWireVersion = topologyDescription.commonWireVersion;\n\n    if (commonWireVersion && readPreference.minWireVersion && readPreference.minWireVersion > commonWireVersion) {\n      throw new error_1.MongoCompatibilityError(`Minimum wire version '${readPreference.minWireVersion}' required, but found '${commonWireVersion}'`);\n    }\n\n    if (topologyDescription.type === common_1.TopologyType.LoadBalanced) {\n      return servers.filter(loadBalancerFilter);\n    }\n\n    if (topologyDescription.type === common_1.TopologyType.Unknown) {\n      return [];\n    }\n\n    if (topologyDescription.type === common_1.TopologyType.Single || topologyDescription.type === common_1.TopologyType.Sharded) {\n      return latencyWindowReducer(topologyDescription, servers.filter(knownFilter));\n    }\n\n    const mode = readPreference.mode;\n\n    if (mode === read_preference_1.ReadPreference.PRIMARY) {\n      return servers.filter(primaryFilter);\n    }\n\n    if (mode === read_preference_1.ReadPreference.PRIMARY_PREFERRED) {\n      const result = servers.filter(primaryFilter);\n\n      if (result.length) {\n        return result;\n      }\n    }\n\n    const filter = mode === read_preference_1.ReadPreference.NEAREST ? nearestFilter : secondaryFilter;\n    const selectedServers = latencyWindowReducer(topologyDescription, tagSetReducer(readPreference, maxStalenessReducer(readPreference, topologyDescription, servers.filter(filter))));\n\n    if (mode === read_preference_1.ReadPreference.SECONDARY_PREFERRED && selectedServers.length === 0) {\n      return servers.filter(primaryFilter);\n    }\n\n    return selectedServers;\n  };\n}\n\nexports.readPreferenceServerSelector = readPreferenceServerSelector;","map":{"version":3,"names":["Object","defineProperty","exports","value","readPreferenceServerSelector","writableServerSelector","common_1","require","read_preference_1","error_1","IDLE_WRITE_PERIOD","SMALLEST_MAX_STALENESS_SECONDS","topologyDescription","servers","latencyWindowReducer","filter","s","isWritable","maxStalenessReducer","readPreference","maxStalenessSeconds","maxStaleness","maxStalenessVariance","heartbeatFrequencyMS","MongoInvalidArgumentError","type","TopologyType","ReplicaSetWithPrimary","primary","Array","from","values","primaryFilter","reduce","result","server","_a","stalenessMS","lastUpdateTime","lastWriteDate","staleness","push","ReplicaSetNoPrimary","length","sMax","max","tagSetMatch","tagSet","serverTags","keys","serverTagKeys","i","key","indexOf","tagSetReducer","tags","isArray","serversMatchingTagset","matched","low","min","roundTripTime","Math","high","localThresholdMS","ServerType","RSPrimary","secondaryFilter","RSSecondary","nearestFilter","knownFilter","Unknown","loadBalancerFilter","LoadBalancer","isValid","commonWireVersion","minWireVersion","MongoCompatibilityError","LoadBalanced","Single","Sharded","mode","ReadPreference","PRIMARY","PRIMARY_PREFERRED","NEAREST","selectedServers","SECONDARY_PREFERRED"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/sdam/server_selection.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readPreferenceServerSelector = exports.writableServerSelector = void 0;\nconst common_1 = require(\"./common\");\nconst read_preference_1 = require(\"../read_preference\");\nconst error_1 = require(\"../error\");\n// max staleness constants\nconst IDLE_WRITE_PERIOD = 10000;\nconst SMALLEST_MAX_STALENESS_SECONDS = 90;\n/**\n * Returns a server selector that selects for writable servers\n */\nfunction writableServerSelector() {\n    return (topologyDescription, servers) => latencyWindowReducer(topologyDescription, servers.filter((s) => s.isWritable));\n}\nexports.writableServerSelector = writableServerSelector;\n/**\n * Reduces the passed in array of servers by the rules of the \"Max Staleness\" specification\n * found here: https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.rst\n *\n * @param readPreference - The read preference providing max staleness guidance\n * @param topologyDescription - The topology description\n * @param servers - The list of server descriptions to be reduced\n * @returns The list of servers that satisfy the requirements of max staleness\n */\nfunction maxStalenessReducer(readPreference, topologyDescription, servers) {\n    if (readPreference.maxStalenessSeconds == null || readPreference.maxStalenessSeconds < 0) {\n        return servers;\n    }\n    const maxStaleness = readPreference.maxStalenessSeconds;\n    const maxStalenessVariance = (topologyDescription.heartbeatFrequencyMS + IDLE_WRITE_PERIOD) / 1000;\n    if (maxStaleness < maxStalenessVariance) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${maxStalenessVariance} seconds`);\n    }\n    if (maxStaleness < SMALLEST_MAX_STALENESS_SECONDS) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${SMALLEST_MAX_STALENESS_SECONDS} seconds`);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetWithPrimary) {\n        const primary = Array.from(topologyDescription.servers.values()).filter(primaryFilter)[0];\n        return servers.reduce((result, server) => {\n            var _a;\n            const stalenessMS = server.lastUpdateTime -\n                server.lastWriteDate -\n                (primary.lastUpdateTime - primary.lastWriteDate) +\n                topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = (_a = readPreference.maxStalenessSeconds) !== null && _a !== void 0 ? _a : 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetNoPrimary) {\n        if (servers.length === 0) {\n            return servers;\n        }\n        const sMax = servers.reduce((max, s) => s.lastWriteDate > max.lastWriteDate ? s : max);\n        return servers.reduce((result, server) => {\n            var _a;\n            const stalenessMS = sMax.lastWriteDate - server.lastWriteDate + topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = (_a = readPreference.maxStalenessSeconds) !== null && _a !== void 0 ? _a : 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    return servers;\n}\n/**\n * Determines whether a server's tags match a given set of tags\n *\n * @param tagSet - The requested tag set to match\n * @param serverTags - The server's tags\n */\nfunction tagSetMatch(tagSet, serverTags) {\n    const keys = Object.keys(tagSet);\n    const serverTagKeys = Object.keys(serverTags);\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (serverTagKeys.indexOf(key) === -1 || serverTags[key] !== tagSet[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Reduces a set of server descriptions based on tags requested by the read preference\n *\n * @param readPreference - The read preference providing the requested tags\n * @param servers - The list of server descriptions to reduce\n * @returns The list of servers matching the requested tags\n */\nfunction tagSetReducer(readPreference, servers) {\n    if (readPreference.tags == null ||\n        (Array.isArray(readPreference.tags) && readPreference.tags.length === 0)) {\n        return servers;\n    }\n    for (let i = 0; i < readPreference.tags.length; ++i) {\n        const tagSet = readPreference.tags[i];\n        const serversMatchingTagset = servers.reduce((matched, server) => {\n            if (tagSetMatch(tagSet, server.tags))\n                matched.push(server);\n            return matched;\n        }, []);\n        if (serversMatchingTagset.length) {\n            return serversMatchingTagset;\n        }\n    }\n    return [];\n}\n/**\n * Reduces a list of servers to ensure they fall within an acceptable latency window. This is\n * further specified in the \"Server Selection\" specification, found here:\n * https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst\n *\n * @param topologyDescription - The topology description\n * @param servers - The list of servers to reduce\n * @returns The servers which fall within an acceptable latency window\n */\nfunction latencyWindowReducer(topologyDescription, servers) {\n    const low = servers.reduce((min, server) => min === -1 ? server.roundTripTime : Math.min(server.roundTripTime, min), -1);\n    const high = low + topologyDescription.localThresholdMS;\n    return servers.reduce((result, server) => {\n        if (server.roundTripTime <= high && server.roundTripTime >= low)\n            result.push(server);\n        return result;\n    }, []);\n}\n// filters\nfunction primaryFilter(server) {\n    return server.type === common_1.ServerType.RSPrimary;\n}\nfunction secondaryFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary;\n}\nfunction nearestFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary || server.type === common_1.ServerType.RSPrimary;\n}\nfunction knownFilter(server) {\n    return server.type !== common_1.ServerType.Unknown;\n}\nfunction loadBalancerFilter(server) {\n    return server.type === common_1.ServerType.LoadBalancer;\n}\n/**\n * Returns a function which selects servers based on a provided read preference\n *\n * @param readPreference - The read preference to select with\n */\nfunction readPreferenceServerSelector(readPreference) {\n    if (!readPreference.isValid()) {\n        throw new error_1.MongoInvalidArgumentError('Invalid read preference specified');\n    }\n    return (topologyDescription, servers) => {\n        const commonWireVersion = topologyDescription.commonWireVersion;\n        if (commonWireVersion &&\n            readPreference.minWireVersion &&\n            readPreference.minWireVersion > commonWireVersion) {\n            throw new error_1.MongoCompatibilityError(`Minimum wire version '${readPreference.minWireVersion}' required, but found '${commonWireVersion}'`);\n        }\n        if (topologyDescription.type === common_1.TopologyType.LoadBalanced) {\n            return servers.filter(loadBalancerFilter);\n        }\n        if (topologyDescription.type === common_1.TopologyType.Unknown) {\n            return [];\n        }\n        if (topologyDescription.type === common_1.TopologyType.Single ||\n            topologyDescription.type === common_1.TopologyType.Sharded) {\n            return latencyWindowReducer(topologyDescription, servers.filter(knownFilter));\n        }\n        const mode = readPreference.mode;\n        if (mode === read_preference_1.ReadPreference.PRIMARY) {\n            return servers.filter(primaryFilter);\n        }\n        if (mode === read_preference_1.ReadPreference.PRIMARY_PREFERRED) {\n            const result = servers.filter(primaryFilter);\n            if (result.length) {\n                return result;\n            }\n        }\n        const filter = mode === read_preference_1.ReadPreference.NEAREST ? nearestFilter : secondaryFilter;\n        const selectedServers = latencyWindowReducer(topologyDescription, tagSetReducer(readPreference, maxStalenessReducer(readPreference, topologyDescription, servers.filter(filter))));\n        if (mode === read_preference_1.ReadPreference.SECONDARY_PREFERRED && selectedServers.length === 0) {\n            return servers.filter(primaryFilter);\n        }\n        return selectedServers;\n    };\n}\nexports.readPreferenceServerSelector = readPreferenceServerSelector;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}