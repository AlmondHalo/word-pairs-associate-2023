{"ast":null,"code":"import { AppModule } from '../app.module'; // yoannes\n\nimport Swal from 'sweetalert2'; // yoannes\n\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../app.module\";\nimport * as i2 from \"@angular/router\";\nconst win = window; //yoannes\n\nexport let MessageThreeComponent = /*#__PURE__*/(() => {\n  class MessageThreeComponent {\n    // constructor() { }\n    //constructor() { }\n    //yoannes Inject the class in the components where you want to access the global variable:\n    constructor(globalService, router) {\n      this.globalService = globalService;\n      this.router = router;\n    }\n\n    accessGlobalVariable() {\n      console.log(AppModule.globalVariable);\n    } // yoannes end\n\n\n    ngOnInit() {\n      this.inputStudyId(); //yoannes\n    } //yoannes function to get the Study ID\n\n\n    inputStudyId() {\n      Swal.fire({\n        title: 'Enter Study ID',\n        input: 'text',\n        width: 700,\n        padding: 50,\n        allowEscapeKey: false,\n        inputAttributes: {\n          autocapitalize: 'off'\n        },\n        showCancelButton: false,\n        confirmButtonText: 'Submit',\n        showLoaderOnConfirm: true,\n        preConfirm: inputValue => {\n          if (!inputValue) {\n            Swal.showValidationMessage('Please enter a Study ID');\n          } else {\n            AppModule.globalVariable = inputValue.toUpperCase();\n            this.popSweetAlertSelection();\n          }\n        },\n        allowOutsideClick: () => !Swal.isLoading()\n      });\n    } //yoanes, prompt selection of the training (evening) vs Testing (morning)\n\n\n    popSweetAlertSelection() {\n      Swal.fire({\n        text: \"Study ID \" + AppModule.globalVariable,\n        showCancelButton: true,\n        cancelButtonText: \"Testing (morning)\",\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#3085d6',\n        width: 700,\n        padding: 100,\n        confirmButtonText: 'Training (evening)'\n      }).then(result => {\n        if (result.value) {// do nothing stay in testing evening\n        } else if (result.dismiss === Swal.DismissReason.cancel) {\n          //Go to the task page\n          this.router.navigate(['/task-message-three']);\n        }\n      });\n    }\n\n  }\n\n  MessageThreeComponent.ɵfac = function MessageThreeComponent_Factory(t) {\n    return new (t || MessageThreeComponent)(i0.ɵɵdirectiveInject(i1.AppModule), i0.ɵɵdirectiveInject(i2.Router));\n  };\n\n  MessageThreeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MessageThreeComponent,\n    selectors: [[\"app-message-three\"]],\n    decls: 16,\n    vars: 0,\n    consts: [[1, \"message-format\"], [\"routerLink\", \"/word-display-three\", 1, \"continue_btn\"]],\n    template: function MessageThreeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"p\");\n        i0.ɵɵtext(2, \"You will be presented with a list of word pairs, one pair at a time.\");\n        i0.ɵɵelement(3, \"br\");\n        i0.ɵɵtext(4, \" Please try to memorize as many of the word pairs as possible.\");\n        i0.ɵɵelement(5, \"br\");\n        i0.ɵɵtext(6, \" No response is required in this first part of the experiment.\");\n        i0.ɵɵelement(7, \"br\")(8, \"br\");\n        i0.ɵɵelementStart(9, \"strong\");\n        i0.ɵɵtext(10, \"(The \\\"Next\\\" button will appear as watermark, it will not be available\");\n        i0.ɵɵelement(11, \"br\");\n        i0.ɵɵtext(12, \" until the last pair of words has been shown)\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"nav\")(14, \"a\", 1);\n        i0.ɵɵtext(15, \"Continue\");\n        i0.ɵɵelementEnd()()();\n      }\n    },\n    dependencies: [i2.RouterLinkWithHref]\n  });\n  return MessageThreeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}