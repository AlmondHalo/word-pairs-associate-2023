{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerHeartbeatFailedEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.TopologyClosedEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.ServerClosedEvent = exports.ServerOpeningEvent = exports.ServerDescriptionChangedEvent = void 0;\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\n\nclass ServerDescriptionChangedEvent {\n  /** @internal */\n  constructor(topologyId, address, previousDescription, newDescription) {\n    this.topologyId = topologyId;\n    this.address = address;\n    this.previousDescription = previousDescription;\n    this.newDescription = newDescription;\n  }\n\n}\n\nexports.ServerDescriptionChangedEvent = ServerDescriptionChangedEvent;\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\n\nclass ServerOpeningEvent {\n  /** @internal */\n  constructor(topologyId, address) {\n    this.topologyId = topologyId;\n    this.address = address;\n  }\n\n}\n\nexports.ServerOpeningEvent = ServerOpeningEvent;\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\n\nclass ServerClosedEvent {\n  /** @internal */\n  constructor(topologyId, address) {\n    this.topologyId = topologyId;\n    this.address = address;\n  }\n\n}\n\nexports.ServerClosedEvent = ServerClosedEvent;\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\n\nclass TopologyDescriptionChangedEvent {\n  /** @internal */\n  constructor(topologyId, previousDescription, newDescription) {\n    this.topologyId = topologyId;\n    this.previousDescription = previousDescription;\n    this.newDescription = newDescription;\n  }\n\n}\n\nexports.TopologyDescriptionChangedEvent = TopologyDescriptionChangedEvent;\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\n\nclass TopologyOpeningEvent {\n  /** @internal */\n  constructor(topologyId) {\n    this.topologyId = topologyId;\n  }\n\n}\n\nexports.TopologyOpeningEvent = TopologyOpeningEvent;\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\n\nclass TopologyClosedEvent {\n  /** @internal */\n  constructor(topologyId) {\n    this.topologyId = topologyId;\n  }\n\n}\n\nexports.TopologyClosedEvent = TopologyClosedEvent;\n/**\n * Emitted when the server monitor’s ismaster command is started - immediately before\n * the ismaster command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\n\nclass ServerHeartbeatStartedEvent {\n  /** @internal */\n  constructor(connectionId) {\n    this.connectionId = connectionId;\n  }\n\n}\n\nexports.ServerHeartbeatStartedEvent = ServerHeartbeatStartedEvent;\n/**\n * Emitted when the server monitor’s ismaster succeeds.\n * @public\n * @category Event\n */\n\nclass ServerHeartbeatSucceededEvent {\n  /** @internal */\n  constructor(connectionId, duration, reply) {\n    this.connectionId = connectionId;\n    this.duration = duration;\n    this.reply = reply;\n  }\n\n}\n\nexports.ServerHeartbeatSucceededEvent = ServerHeartbeatSucceededEvent;\n/**\n * Emitted when the server monitor’s ismaster fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\n\nclass ServerHeartbeatFailedEvent {\n  /** @internal */\n  constructor(connectionId, duration, failure) {\n    this.connectionId = connectionId;\n    this.duration = duration;\n    this.failure = failure;\n  }\n\n}\n\nexports.ServerHeartbeatFailedEvent = ServerHeartbeatFailedEvent;","map":{"version":3,"names":["Object","defineProperty","exports","value","ServerHeartbeatFailedEvent","ServerHeartbeatSucceededEvent","ServerHeartbeatStartedEvent","TopologyClosedEvent","TopologyOpeningEvent","TopologyDescriptionChangedEvent","ServerClosedEvent","ServerOpeningEvent","ServerDescriptionChangedEvent","constructor","topologyId","address","previousDescription","newDescription","connectionId","duration","reply","failure"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/sdam/events.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServerHeartbeatFailedEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.TopologyClosedEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.ServerClosedEvent = exports.ServerOpeningEvent = exports.ServerDescriptionChangedEvent = void 0;\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\nclass ServerDescriptionChangedEvent {\n    /** @internal */\n    constructor(topologyId, address, previousDescription, newDescription) {\n        this.topologyId = topologyId;\n        this.address = address;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.ServerDescriptionChangedEvent = ServerDescriptionChangedEvent;\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\nclass ServerOpeningEvent {\n    /** @internal */\n    constructor(topologyId, address) {\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerOpeningEvent = ServerOpeningEvent;\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\nclass ServerClosedEvent {\n    /** @internal */\n    constructor(topologyId, address) {\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerClosedEvent = ServerClosedEvent;\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\nclass TopologyDescriptionChangedEvent {\n    /** @internal */\n    constructor(topologyId, previousDescription, newDescription) {\n        this.topologyId = topologyId;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.TopologyDescriptionChangedEvent = TopologyDescriptionChangedEvent;\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\nclass TopologyOpeningEvent {\n    /** @internal */\n    constructor(topologyId) {\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyOpeningEvent = TopologyOpeningEvent;\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\nclass TopologyClosedEvent {\n    /** @internal */\n    constructor(topologyId) {\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyClosedEvent = TopologyClosedEvent;\n/**\n * Emitted when the server monitor’s ismaster command is started - immediately before\n * the ismaster command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\nclass ServerHeartbeatStartedEvent {\n    /** @internal */\n    constructor(connectionId) {\n        this.connectionId = connectionId;\n    }\n}\nexports.ServerHeartbeatStartedEvent = ServerHeartbeatStartedEvent;\n/**\n * Emitted when the server monitor’s ismaster succeeds.\n * @public\n * @category Event\n */\nclass ServerHeartbeatSucceededEvent {\n    /** @internal */\n    constructor(connectionId, duration, reply) {\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.reply = reply;\n    }\n}\nexports.ServerHeartbeatSucceededEvent = ServerHeartbeatSucceededEvent;\n/**\n * Emitted when the server monitor’s ismaster fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\nclass ServerHeartbeatFailedEvent {\n    /** @internal */\n    constructor(connectionId, duration, failure) {\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.failure = failure;\n    }\n}\nexports.ServerHeartbeatFailedEvent = ServerHeartbeatFailedEvent;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}