{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoCR = void 0;\n\nconst crypto = require(\"crypto\");\n\nconst auth_provider_1 = require(\"./auth_provider\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst error_1 = require(\"../../error\");\n\nclass MongoCR extends auth_provider_1.AuthProvider {\n  auth(authContext, callback) {\n    const {\n      connection,\n      credentials\n    } = authContext;\n\n    if (!credentials) {\n      return callback(new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.'));\n    }\n\n    const username = credentials.username;\n    const password = credentials.password;\n    const source = credentials.source;\n    connection.command(utils_1.ns(`${source}.$cmd`), {\n      getnonce: 1\n    }, undefined, (err, r) => {\n      let nonce = null;\n      let key = null; // Get nonce\n\n      if (err == null) {\n        nonce = r.nonce; // Use node md5 generator\n\n        let md5 = crypto.createHash('md5'); // Generate keys used for authentication\n\n        md5.update(`${username}:mongo:${password}`, 'utf8');\n        const hash_password = md5.digest('hex'); // Final key\n\n        md5 = crypto.createHash('md5');\n        md5.update(nonce + username + hash_password, 'utf8');\n        key = md5.digest('hex');\n      }\n\n      const authenticateCommand = {\n        authenticate: 1,\n        user: username,\n        nonce,\n        key\n      };\n      connection.command(utils_1.ns(`${source}.$cmd`), authenticateCommand, undefined, callback);\n    });\n  }\n\n}\n\nexports.MongoCR = MongoCR;","map":{"version":3,"names":["Object","defineProperty","exports","value","MongoCR","crypto","require","auth_provider_1","utils_1","error_1","AuthProvider","auth","authContext","callback","connection","credentials","MongoMissingCredentialsError","username","password","source","command","ns","getnonce","undefined","err","r","nonce","key","md5","createHash","update","hash_password","digest","authenticateCommand","authenticate","user"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/cmap/auth/mongocr.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoCR = void 0;\nconst crypto = require(\"crypto\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst utils_1 = require(\"../../utils\");\nconst error_1 = require(\"../../error\");\nclass MongoCR extends auth_provider_1.AuthProvider {\n    auth(authContext, callback) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            return callback(new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.'));\n        }\n        const username = credentials.username;\n        const password = credentials.password;\n        const source = credentials.source;\n        connection.command(utils_1.ns(`${source}.$cmd`), { getnonce: 1 }, undefined, (err, r) => {\n            let nonce = null;\n            let key = null;\n            // Get nonce\n            if (err == null) {\n                nonce = r.nonce;\n                // Use node md5 generator\n                let md5 = crypto.createHash('md5');\n                // Generate keys used for authentication\n                md5.update(`${username}:mongo:${password}`, 'utf8');\n                const hash_password = md5.digest('hex');\n                // Final key\n                md5 = crypto.createHash('md5');\n                md5.update(nonce + username + hash_password, 'utf8');\n                key = md5.digest('hex');\n            }\n            const authenticateCommand = {\n                authenticate: 1,\n                user: username,\n                nonce,\n                key\n            };\n            connection.command(utils_1.ns(`${source}.$cmd`), authenticateCommand, undefined, callback);\n        });\n    }\n}\nexports.MongoCR = MongoCR;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,iBAAD,CAA/B;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAMF,OAAN,SAAsBG,eAAe,CAACG,YAAtC,CAAmD;EAC/CC,IAAI,CAACC,WAAD,EAAcC,QAAd,EAAwB;IACxB,MAAM;MAAEC,UAAF;MAAcC;IAAd,IAA8BH,WAApC;;IACA,IAAI,CAACG,WAAL,EAAkB;MACd,OAAOF,QAAQ,CAAC,IAAIJ,OAAO,CAACO,4BAAZ,CAAyC,uCAAzC,CAAD,CAAf;IACH;;IACD,MAAMC,QAAQ,GAAGF,WAAW,CAACE,QAA7B;IACA,MAAMC,QAAQ,GAAGH,WAAW,CAACG,QAA7B;IACA,MAAMC,MAAM,GAAGJ,WAAW,CAACI,MAA3B;IACAL,UAAU,CAACM,OAAX,CAAmBZ,OAAO,CAACa,EAAR,CAAY,GAAEF,MAAO,OAArB,CAAnB,EAAiD;MAAEG,QAAQ,EAAE;IAAZ,CAAjD,EAAkEC,SAAlE,EAA6E,CAACC,GAAD,EAAMC,CAAN,KAAY;MACrF,IAAIC,KAAK,GAAG,IAAZ;MACA,IAAIC,GAAG,GAAG,IAAV,CAFqF,CAGrF;;MACA,IAAIH,GAAG,IAAI,IAAX,EAAiB;QACbE,KAAK,GAAGD,CAAC,CAACC,KAAV,CADa,CAEb;;QACA,IAAIE,GAAG,GAAGvB,MAAM,CAACwB,UAAP,CAAkB,KAAlB,CAAV,CAHa,CAIb;;QACAD,GAAG,CAACE,MAAJ,CAAY,GAAEb,QAAS,UAASC,QAAS,EAAzC,EAA4C,MAA5C;QACA,MAAMa,aAAa,GAAGH,GAAG,CAACI,MAAJ,CAAW,KAAX,CAAtB,CANa,CAOb;;QACAJ,GAAG,GAAGvB,MAAM,CAACwB,UAAP,CAAkB,KAAlB,CAAN;QACAD,GAAG,CAACE,MAAJ,CAAWJ,KAAK,GAAGT,QAAR,GAAmBc,aAA9B,EAA6C,MAA7C;QACAJ,GAAG,GAAGC,GAAG,CAACI,MAAJ,CAAW,KAAX,CAAN;MACH;;MACD,MAAMC,mBAAmB,GAAG;QACxBC,YAAY,EAAE,CADU;QAExBC,IAAI,EAAElB,QAFkB;QAGxBS,KAHwB;QAIxBC;MAJwB,CAA5B;MAMAb,UAAU,CAACM,OAAX,CAAmBZ,OAAO,CAACa,EAAR,CAAY,GAAEF,MAAO,OAArB,CAAnB,EAAiDc,mBAAjD,EAAsEV,SAAtE,EAAiFV,QAAjF;IACH,CAvBD;EAwBH;;AAjC8C;;AAmCnDX,OAAO,CAACE,OAAR,GAAkBA,OAAlB"},"metadata":{},"sourceType":"script"}