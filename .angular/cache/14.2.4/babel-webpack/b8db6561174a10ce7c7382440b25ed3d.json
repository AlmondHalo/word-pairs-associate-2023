{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Encrypter = void 0;\n/* eslint-disable @typescript-eslint/no-var-requires */\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nconst error_1 = require(\"./error\");\n\nconst bson_1 = require(\"./bson\");\n\nconst connect_1 = require(\"./operations/connect\");\n\nlet AutoEncrypterClass;\n/** @internal */\n\nconst kInternalClient = Symbol('internalClient');\n/** @internal */\n\nclass Encrypter {\n  constructor(client, uri, options) {\n    if (typeof options.autoEncryption !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n    }\n\n    this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n    this.needsConnecting = false;\n\n    if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = client;\n    } else if (options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n    }\n\n    if (this.bypassAutoEncryption) {\n      options.autoEncryption.metadataClient = undefined;\n    } else if (options.maxPoolSize === 0) {\n      options.autoEncryption.metadataClient = client;\n    } else {\n      options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n    }\n\n    options.autoEncryption.bson = Object.create(null); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    options.autoEncryption.bson.serialize = bson_1.serialize; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    options.autoEncryption.bson.deserialize = bson_1.deserialize;\n    this.autoEncrypter = new AutoEncrypterClass(client, options.autoEncryption);\n  }\n\n  getInternalClient(client, uri, options) {\n    if (!this[kInternalClient]) {\n      const clonedOptions = {};\n\n      for (const key of Object.keys(options)) {\n        if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key)) continue;\n        Reflect.set(clonedOptions, key, Reflect.get(options, key));\n      }\n\n      clonedOptions.minPoolSize = 0;\n      this[kInternalClient] = new mongo_client_1.MongoClient(uri, clonedOptions);\n\n      for (const eventName of connect_1.MONGO_CLIENT_EVENTS) {\n        for (const listener of client.listeners(eventName)) {\n          this[kInternalClient].on(eventName, listener);\n        }\n      }\n\n      client.on('newListener', (eventName, listener) => {\n        this[kInternalClient].on(eventName, listener);\n      });\n      this.needsConnecting = true;\n    }\n\n    return this[kInternalClient];\n  }\n\n  connectInternalClient(callback) {\n    if (this.needsConnecting) {\n      this.needsConnecting = false;\n      return this[kInternalClient].connect(callback);\n    }\n\n    return callback();\n  }\n\n  close(client, force, callback) {\n    this.autoEncrypter.teardown(!!force, e => {\n      if (this[kInternalClient] && client !== this[kInternalClient]) {\n        return this[kInternalClient].close(force, callback);\n      }\n\n      callback(e);\n    });\n  }\n\n  static checkForMongoCrypt() {\n    let mongodbClientEncryption = undefined;\n\n    try {\n      // Ensure you always wrap an optional require in the try block NODE-3199\n      mongodbClientEncryption = require('mongodb-client-encryption');\n    } catch (err) {\n      throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' + 'Please add `mongodb-client-encryption` as a dependency of your project');\n    }\n\n    AutoEncrypterClass = mongodbClientEncryption.extension(require('../lib/index')).AutoEncrypter;\n  }\n\n}\n\nexports.Encrypter = Encrypter;","map":{"version":3,"names":["Object","defineProperty","exports","value","Encrypter","mongo_client_1","require","error_1","bson_1","connect_1","AutoEncrypterClass","kInternalClient","Symbol","constructor","client","uri","options","autoEncryption","MongoInvalidArgumentError","bypassAutoEncryption","needsConnecting","maxPoolSize","keyVaultClient","getInternalClient","metadataClient","undefined","bson","create","serialize","deserialize","autoEncrypter","clonedOptions","key","keys","includes","Reflect","set","get","minPoolSize","MongoClient","eventName","MONGO_CLIENT_EVENTS","listener","listeners","on","connectInternalClient","callback","connect","close","force","teardown","e","checkForMongoCrypt","mongodbClientEncryption","err","MongoMissingDependencyError","extension","AutoEncrypter"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/encrypter.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Encrypter = void 0;\n/* eslint-disable @typescript-eslint/no-var-requires */\nconst mongo_client_1 = require(\"./mongo_client\");\nconst error_1 = require(\"./error\");\nconst bson_1 = require(\"./bson\");\nconst connect_1 = require(\"./operations/connect\");\nlet AutoEncrypterClass;\n/** @internal */\nconst kInternalClient = Symbol('internalClient');\n/** @internal */\nclass Encrypter {\n    constructor(client, uri, options) {\n        if (typeof options.autoEncryption !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n        }\n        this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n        this.needsConnecting = false;\n        if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = client;\n        }\n        else if (options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n        }\n        if (this.bypassAutoEncryption) {\n            options.autoEncryption.metadataClient = undefined;\n        }\n        else if (options.maxPoolSize === 0) {\n            options.autoEncryption.metadataClient = client;\n        }\n        else {\n            options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n        }\n        options.autoEncryption.bson = Object.create(null);\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        options.autoEncryption.bson.serialize = bson_1.serialize;\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        options.autoEncryption.bson.deserialize = bson_1.deserialize;\n        this.autoEncrypter = new AutoEncrypterClass(client, options.autoEncryption);\n    }\n    getInternalClient(client, uri, options) {\n        if (!this[kInternalClient]) {\n            const clonedOptions = {};\n            for (const key of Object.keys(options)) {\n                if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key))\n                    continue;\n                Reflect.set(clonedOptions, key, Reflect.get(options, key));\n            }\n            clonedOptions.minPoolSize = 0;\n            this[kInternalClient] = new mongo_client_1.MongoClient(uri, clonedOptions);\n            for (const eventName of connect_1.MONGO_CLIENT_EVENTS) {\n                for (const listener of client.listeners(eventName)) {\n                    this[kInternalClient].on(eventName, listener);\n                }\n            }\n            client.on('newListener', (eventName, listener) => {\n                this[kInternalClient].on(eventName, listener);\n            });\n            this.needsConnecting = true;\n        }\n        return this[kInternalClient];\n    }\n    connectInternalClient(callback) {\n        if (this.needsConnecting) {\n            this.needsConnecting = false;\n            return this[kInternalClient].connect(callback);\n        }\n        return callback();\n    }\n    close(client, force, callback) {\n        this.autoEncrypter.teardown(!!force, e => {\n            if (this[kInternalClient] && client !== this[kInternalClient]) {\n                return this[kInternalClient].close(force, callback);\n            }\n            callback(e);\n        });\n    }\n    static checkForMongoCrypt() {\n        let mongodbClientEncryption = undefined;\n        try {\n            // Ensure you always wrap an optional require in the try block NODE-3199\n            mongodbClientEncryption = require('mongodb-client-encryption');\n        }\n        catch (err) {\n            throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' +\n                'Please add `mongodb-client-encryption` as a dependency of your project');\n        }\n        AutoEncrypterClass = mongodbClientEncryption.extension(require('../lib/index')).AutoEncrypter;\n    }\n}\nexports.Encrypter = Encrypter;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;AACA;;AACA,MAAMC,cAAc,GAAGC,OAAO,CAAC,gBAAD,CAA9B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,sBAAD,CAAzB;;AACA,IAAII,kBAAJ;AACA;;AACA,MAAMC,eAAe,GAAGC,MAAM,CAAC,gBAAD,CAA9B;AACA;;AACA,MAAMR,SAAN,CAAgB;EACZS,WAAW,CAACC,MAAD,EAASC,GAAT,EAAcC,OAAd,EAAuB;IAC9B,IAAI,OAAOA,OAAO,CAACC,cAAf,KAAkC,QAAtC,EAAgD;MAC5C,MAAM,IAAIV,OAAO,CAACW,yBAAZ,CAAsC,2CAAtC,CAAN;IACH;;IACD,KAAKC,oBAAL,GAA4B,CAAC,CAACH,OAAO,CAACC,cAAR,CAAuBE,oBAArD;IACA,KAAKC,eAAL,GAAuB,KAAvB;;IACA,IAAIJ,OAAO,CAACK,WAAR,KAAwB,CAAxB,IAA6BL,OAAO,CAACC,cAAR,CAAuBK,cAAvB,IAAyC,IAA1E,EAAgF;MAC5EN,OAAO,CAACC,cAAR,CAAuBK,cAAvB,GAAwCR,MAAxC;IACH,CAFD,MAGK,IAAIE,OAAO,CAACC,cAAR,CAAuBK,cAAvB,IAAyC,IAA7C,EAAmD;MACpDN,OAAO,CAACC,cAAR,CAAuBK,cAAvB,GAAwC,KAAKC,iBAAL,CAAuBT,MAAvB,EAA+BC,GAA/B,EAAoCC,OAApC,CAAxC;IACH;;IACD,IAAI,KAAKG,oBAAT,EAA+B;MAC3BH,OAAO,CAACC,cAAR,CAAuBO,cAAvB,GAAwCC,SAAxC;IACH,CAFD,MAGK,IAAIT,OAAO,CAACK,WAAR,KAAwB,CAA5B,EAA+B;MAChCL,OAAO,CAACC,cAAR,CAAuBO,cAAvB,GAAwCV,MAAxC;IACH,CAFI,MAGA;MACDE,OAAO,CAACC,cAAR,CAAuBO,cAAvB,GAAwC,KAAKD,iBAAL,CAAuBT,MAAvB,EAA+BC,GAA/B,EAAoCC,OAApC,CAAxC;IACH;;IACDA,OAAO,CAACC,cAAR,CAAuBS,IAAvB,GAA8B1B,MAAM,CAAC2B,MAAP,CAAc,IAAd,CAA9B,CArB8B,CAsB9B;;IACAX,OAAO,CAACC,cAAR,CAAuBS,IAAvB,CAA4BE,SAA5B,GAAwCpB,MAAM,CAACoB,SAA/C,CAvB8B,CAwB9B;;IACAZ,OAAO,CAACC,cAAR,CAAuBS,IAAvB,CAA4BG,WAA5B,GAA0CrB,MAAM,CAACqB,WAAjD;IACA,KAAKC,aAAL,GAAqB,IAAIpB,kBAAJ,CAAuBI,MAAvB,EAA+BE,OAAO,CAACC,cAAvC,CAArB;EACH;;EACDM,iBAAiB,CAACT,MAAD,EAASC,GAAT,EAAcC,OAAd,EAAuB;IACpC,IAAI,CAAC,KAAKL,eAAL,CAAL,EAA4B;MACxB,MAAMoB,aAAa,GAAG,EAAtB;;MACA,KAAK,MAAMC,GAAX,IAAkBhC,MAAM,CAACiC,IAAP,CAAYjB,OAAZ,CAAlB,EAAwC;QACpC,IAAI,CAAC,gBAAD,EAAmB,aAAnB,EAAkC,SAAlC,EAA6C,eAA7C,EAA8D,QAA9D,EAAwEkB,QAAxE,CAAiFF,GAAjF,CAAJ,EACI;QACJG,OAAO,CAACC,GAAR,CAAYL,aAAZ,EAA2BC,GAA3B,EAAgCG,OAAO,CAACE,GAAR,CAAYrB,OAAZ,EAAqBgB,GAArB,CAAhC;MACH;;MACDD,aAAa,CAACO,WAAd,GAA4B,CAA5B;MACA,KAAK3B,eAAL,IAAwB,IAAIN,cAAc,CAACkC,WAAnB,CAA+BxB,GAA/B,EAAoCgB,aAApC,CAAxB;;MACA,KAAK,MAAMS,SAAX,IAAwB/B,SAAS,CAACgC,mBAAlC,EAAuD;QACnD,KAAK,MAAMC,QAAX,IAAuB5B,MAAM,CAAC6B,SAAP,CAAiBH,SAAjB,CAAvB,EAAoD;UAChD,KAAK7B,eAAL,EAAsBiC,EAAtB,CAAyBJ,SAAzB,EAAoCE,QAApC;QACH;MACJ;;MACD5B,MAAM,CAAC8B,EAAP,CAAU,aAAV,EAAyB,CAACJ,SAAD,EAAYE,QAAZ,KAAyB;QAC9C,KAAK/B,eAAL,EAAsBiC,EAAtB,CAAyBJ,SAAzB,EAAoCE,QAApC;MACH,CAFD;MAGA,KAAKtB,eAAL,GAAuB,IAAvB;IACH;;IACD,OAAO,KAAKT,eAAL,CAAP;EACH;;EACDkC,qBAAqB,CAACC,QAAD,EAAW;IAC5B,IAAI,KAAK1B,eAAT,EAA0B;MACtB,KAAKA,eAAL,GAAuB,KAAvB;MACA,OAAO,KAAKT,eAAL,EAAsBoC,OAAtB,CAA8BD,QAA9B,CAAP;IACH;;IACD,OAAOA,QAAQ,EAAf;EACH;;EACDE,KAAK,CAAClC,MAAD,EAASmC,KAAT,EAAgBH,QAAhB,EAA0B;IAC3B,KAAKhB,aAAL,CAAmBoB,QAAnB,CAA4B,CAAC,CAACD,KAA9B,EAAqCE,CAAC,IAAI;MACtC,IAAI,KAAKxC,eAAL,KAAyBG,MAAM,KAAK,KAAKH,eAAL,CAAxC,EAA+D;QAC3D,OAAO,KAAKA,eAAL,EAAsBqC,KAAtB,CAA4BC,KAA5B,EAAmCH,QAAnC,CAAP;MACH;;MACDA,QAAQ,CAACK,CAAD,CAAR;IACH,CALD;EAMH;;EACwB,OAAlBC,kBAAkB,GAAG;IACxB,IAAIC,uBAAuB,GAAG5B,SAA9B;;IACA,IAAI;MACA;MACA4B,uBAAuB,GAAG/C,OAAO,CAAC,2BAAD,CAAjC;IACH,CAHD,CAIA,OAAOgD,GAAP,EAAY;MACR,MAAM,IAAI/C,OAAO,CAACgD,2BAAZ,CAAwC,iEAC1C,wEADE,CAAN;IAEH;;IACD7C,kBAAkB,GAAG2C,uBAAuB,CAACG,SAAxB,CAAkClD,OAAO,CAAC,cAAD,CAAzC,EAA2DmD,aAAhF;EACH;;AA7EW;;AA+EhBvD,OAAO,CAACE,SAAR,GAAoBA,SAApB"},"metadata":{},"sourceType":"script"}