{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isSharded = exports.applyCommonQueryOptions = exports.getReadPreference = void 0;\n\nconst common_1 = require(\"../../sdam/common\");\n\nconst topology_description_1 = require(\"../../sdam/topology_description\");\n\nconst error_1 = require(\"../../error\");\n\nconst read_preference_1 = require(\"../../read_preference\");\n\nfunction getReadPreference(cmd, options) {\n  // Default to command version of the readPreference\n  let readPreference = cmd.readPreference || read_preference_1.ReadPreference.primary; // If we have an option readPreference override the command one\n\n  if (options === null || options === void 0 ? void 0 : options.readPreference) {\n    readPreference = options.readPreference;\n  }\n\n  if (typeof readPreference === 'string') {\n    readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n  }\n\n  if (!(readPreference instanceof read_preference_1.ReadPreference)) {\n    throw new error_1.MongoInvalidArgumentError('Option \"readPreference\" must be a ReadPreference instance');\n  }\n\n  return readPreference;\n}\n\nexports.getReadPreference = getReadPreference;\n\nfunction applyCommonQueryOptions(queryOptions, options) {\n  Object.assign(queryOptions, {\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    bsonRegExp: typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : false\n  });\n\n  if (options.session) {\n    queryOptions.session = options.session;\n  }\n\n  return queryOptions;\n}\n\nexports.applyCommonQueryOptions = applyCommonQueryOptions;\n\nfunction isSharded(topologyOrServer) {\n  if (topologyOrServer.description && topologyOrServer.description.type === common_1.ServerType.Mongos) {\n    return true;\n  } // NOTE: This is incredibly inefficient, and should be removed once command construction\n  //       happens based on `Server` not `Topology`.\n\n\n  if (topologyOrServer.description && topologyOrServer.description instanceof topology_description_1.TopologyDescription) {\n    const servers = Array.from(topologyOrServer.description.servers.values());\n    return servers.some(server => server.type === common_1.ServerType.Mongos);\n  }\n\n  return false;\n}\n\nexports.isSharded = isSharded;","map":{"version":3,"names":["Object","defineProperty","exports","value","isSharded","applyCommonQueryOptions","getReadPreference","common_1","require","topology_description_1","error_1","read_preference_1","cmd","options","readPreference","ReadPreference","primary","fromString","MongoInvalidArgumentError","queryOptions","assign","raw","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","session","topologyOrServer","description","type","ServerType","Mongos","TopologyDescription","servers","Array","from","values","some","server"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/cmap/wire_protocol/shared.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isSharded = exports.applyCommonQueryOptions = exports.getReadPreference = void 0;\nconst common_1 = require(\"../../sdam/common\");\nconst topology_description_1 = require(\"../../sdam/topology_description\");\nconst error_1 = require(\"../../error\");\nconst read_preference_1 = require(\"../../read_preference\");\nfunction getReadPreference(cmd, options) {\n    // Default to command version of the readPreference\n    let readPreference = cmd.readPreference || read_preference_1.ReadPreference.primary;\n    // If we have an option readPreference override the command one\n    if (options === null || options === void 0 ? void 0 : options.readPreference) {\n        readPreference = options.readPreference;\n    }\n    if (typeof readPreference === 'string') {\n        readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n    }\n    if (!(readPreference instanceof read_preference_1.ReadPreference)) {\n        throw new error_1.MongoInvalidArgumentError('Option \"readPreference\" must be a ReadPreference instance');\n    }\n    return readPreference;\n}\nexports.getReadPreference = getReadPreference;\nfunction applyCommonQueryOptions(queryOptions, options) {\n    Object.assign(queryOptions, {\n        raw: typeof options.raw === 'boolean' ? options.raw : false,\n        promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n        promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n        promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n        bsonRegExp: typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : false\n    });\n    if (options.session) {\n        queryOptions.session = options.session;\n    }\n    return queryOptions;\n}\nexports.applyCommonQueryOptions = applyCommonQueryOptions;\nfunction isSharded(topologyOrServer) {\n    if (topologyOrServer.description && topologyOrServer.description.type === common_1.ServerType.Mongos) {\n        return true;\n    }\n    // NOTE: This is incredibly inefficient, and should be removed once command construction\n    //       happens based on `Server` not `Topology`.\n    if (topologyOrServer.description && topologyOrServer.description instanceof topology_description_1.TopologyDescription) {\n        const servers = Array.from(topologyOrServer.description.servers.values());\n        return servers.some((server) => server.type === common_1.ServerType.Mongos);\n    }\n    return false;\n}\nexports.isSharded = isSharded;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}