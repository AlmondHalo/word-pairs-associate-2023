{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.checkTLSOptions = exports.resolveSRVRecord = void 0;\n\nconst dns = require(\"dns\");\n\nconst fs = require(\"fs\");\n\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\n\nconst url_1 = require(\"url\");\n\nconst defaultAuthProviders_1 = require(\"./cmap/auth/defaultAuthProviders\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst write_concern_1 = require(\"./write_concern\");\n\nconst error_1 = require(\"./error\");\n\nconst utils_1 = require(\"./utils\");\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\n\nconst logger_1 = require(\"./logger\");\n\nconst promise_provider_1 = require(\"./promise_provider\");\n\nconst encrypter_1 = require(\"./encrypter\");\n\nconst compression_1 = require(\"./cmap/wire_protocol/compression\");\n\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\n\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\n\n\nfunction resolveSRVRecord(options, callback) {\n  if (typeof options.srvHost !== 'string') {\n    return callback(new error_1.MongoAPIError('Option \"srvHost\" must not be empty'));\n  }\n\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    return callback(new error_1.MongoAPIError('URI must include hostname, domain name, and tld'));\n  } // Resolve the SRV record and use the result as the list of hosts to connect to.\n\n\n  const lookupAddress = options.srvHost;\n  dns.resolveSrv(`_mongodb._tcp.${lookupAddress}`, (err, addresses) => {\n    if (err) return callback(err);\n\n    if (addresses.length === 0) {\n      return callback(new error_1.MongoAPIError('No addresses found at host'));\n    }\n\n    for (const {\n      name\n    } of addresses) {\n      if (!matchesParentDomain(name, lookupAddress)) {\n        return callback(new error_1.MongoAPIError('Server record does not share hostname with parent URI'));\n      }\n    }\n\n    const hostAddresses = addresses.map(r => {\n      var _a;\n\n      return utils_1.HostAddress.fromString(`${r.name}:${(_a = r.port) !== null && _a !== void 0 ? _a : 27017}`);\n    });\n    const lbError = validateLoadBalancedOptions(hostAddresses, options);\n\n    if (lbError) {\n      return callback(lbError);\n    } // Resolve TXT record and add options from there if they exist.\n\n\n    dns.resolveTxt(lookupAddress, (err, record) => {\n      var _a, _b, _c;\n\n      if (err) {\n        if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n          return callback(err);\n        }\n      } else {\n        if (record.length > 1) {\n          return callback(new error_1.MongoParseError('Multiple text records not allowed'));\n        }\n\n        const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n        const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n\n        if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n          return callback(new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`));\n        }\n\n        const source = (_a = txtRecordOptions.get('authSource')) !== null && _a !== void 0 ? _a : undefined;\n        const replicaSet = (_b = txtRecordOptions.get('replicaSet')) !== null && _b !== void 0 ? _b : undefined;\n        const loadBalanced = (_c = txtRecordOptions.get('loadBalanced')) !== null && _c !== void 0 ? _c : undefined;\n\n        if (source === '' || replicaSet === '') {\n          return callback(new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record'));\n        }\n\n        if (!options.userSpecifiedAuthSource && source) {\n          options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n            source\n          });\n        }\n\n        if (!options.userSpecifiedReplicaSet && replicaSet) {\n          options.replicaSet = replicaSet;\n        }\n\n        if (loadBalanced === 'true') {\n          options.loadBalanced = true;\n        }\n\n        const lbError = validateLoadBalancedOptions(hostAddresses, options);\n\n        if (lbError) {\n          return callback(lbError);\n        }\n      }\n\n      callback(undefined, hostAddresses);\n    });\n  });\n}\n\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param options - The options used for options parsing\n * @throws MongoParseError if TLS options are invalid\n */\n\nfunction checkTLSOptions(options) {\n  if (!options) return;\n\n  const check = (a, b) => {\n    if (Reflect.has(options, a) && Reflect.has(options, b)) {\n      throw new error_1.MongoParseError(`The '${a}' option cannot be used with '${b}'`);\n    }\n  };\n\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\n\nexports.checkTLSOptions = checkTLSOptions;\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\n\nfunction getBoolean(name, value) {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n  if (TRUTHS.has(valueString)) return true;\n  if (FALSEHOODS.has(valueString)) return false;\n  throw new error_1.MongoParseError(`For ${name} Expected stringified boolean value, got: ${value}`);\n}\n\nfunction getInt(name, value) {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n  if (!Number.isNaN(parsedValue)) return parsedValue;\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\n\nfunction getUint(name, value) {\n  const parsedValue = getInt(name, value);\n\n  if (parsedValue < 0) {\n    throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n\n  return parsedValue;\n}\n\nfunction toRecord(value) {\n  const record = Object.create(null);\n  const keyValuePairs = value.split(',');\n\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(':');\n\n    if (value == null) {\n      throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n    }\n\n    try {\n      // try to get a boolean\n      record[key] = getBoolean('', value);\n    } catch {\n      try {\n        // try to get a number\n        record[key] = getInt('', value);\n      } catch {\n        // keep value as a string\n        record[key] = value;\n      }\n    }\n  }\n\n  return record;\n}\n\nclass CaseInsensitiveMap extends Map {\n  constructor(entries = []) {\n    super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n  }\n\n  has(k) {\n    return super.has(k.toLowerCase());\n  }\n\n  get(k) {\n    return super.get(k.toLowerCase());\n  }\n\n  set(k, v) {\n    return super.set(k.toLowerCase(), v);\n  }\n\n  delete(k) {\n    return super.delete(k.toLowerCase());\n  }\n\n}\n\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n  var _a, _b;\n\n  if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n\n  const url = new mongodb_connection_string_url_1.default(uri);\n  const {\n    hosts,\n    isSRV\n  } = url;\n  const mongoOptions = Object.create(null);\n  mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n\n    if (!url.searchParams.has('tls') && !url.searchParams.has('ssl')) {\n      options.tls = true;\n    }\n  }\n\n  const urlOptions = new CaseInsensitiveMap();\n\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n\n  if (url.username !== '') {\n    const auth = {\n      username: decodeURIComponent(url.username)\n    };\n\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n\n    urlOptions.set('auth', [auth]);\n  }\n\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n\n    if (values.includes('')) {\n      throw new error_1.MongoAPIError('URI cannot contain options with no value');\n    }\n\n    if (key.toLowerCase() === 'serverapi') {\n      throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n    }\n\n    if (key.toLowerCase() === 'authsource' && urlOptions.has('authSource')) {\n      // If authSource is an explicit key in the urlOptions we need to remove the implicit dbName\n      urlOptions.delete('authSource');\n    }\n\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n\n  const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v]) => v != null));\n\n  if (objectOptions.has('loadBalanced')) {\n    throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n\n  const allOptions = new CaseInsensitiveMap();\n  const allKeys = new Set([...urlOptions.keys(), ...objectOptions.keys(), ...exports.DEFAULT_OPTIONS.keys()]);\n\n  for (const key of allKeys) {\n    const values = [];\n\n    if (objectOptions.has(key)) {\n      values.push(objectOptions.get(key));\n    }\n\n    if (urlOptions.has(key)) {\n      values.push(...urlOptions.get(key));\n    }\n\n    if (exports.DEFAULT_OPTIONS.has(key)) {\n      values.push(exports.DEFAULT_OPTIONS.get(key));\n    }\n\n    allOptions.set(key, values);\n  }\n\n  const unsupportedOptions = utils_1.setDifference(allKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n  }\n\n  for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n    const values = allOptions.get(key);\n    if (!values || values.length === 0) continue;\n    setOption(mongoOptions, key, descriptor, values);\n  }\n\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_AWS;\n\n    if ((isGssapi || isX509) && allOptions.has('authSource') && mongoOptions.credentials.source !== '$external') {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new error_1.MongoParseError(`${mongoOptions.credentials} can only have authSource set to '$external'`);\n    }\n\n    if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n\n    mongoOptions.credentials.validate();\n  }\n\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n\n  if (allOptions.has('tls')) {\n    if (new Set((_a = allOptions.get('tls')) === null || _a === void 0 ? void 0 : _a.map(getBoolean)).size !== 1) {\n      throw new error_1.MongoParseError('All values of tls must be the same.');\n    }\n  }\n\n  if (allOptions.has('ssl')) {\n    if (new Set((_b = allOptions.get('ssl')) === null || _b === void 0 ? void 0 : _b.map(getBoolean)).size !== 1) {\n      throw new error_1.MongoParseError('All values of ssl must be the same.');\n    }\n  }\n\n  checkTLSOptions(mongoOptions);\n  if (options.promiseLibrary) promise_provider_1.PromiseProvider.set(options.promiseLibrary);\n\n  if (mongoOptions.directConnection && typeof mongoOptions.srvHost === 'string') {\n    throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n  }\n\n  const lbError = validateLoadBalancedOptions(hosts, mongoOptions);\n\n  if (lbError) {\n    throw lbError;\n  } // Potential SRV Overrides\n\n\n  mongoOptions.userSpecifiedAuthSource = objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet = objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n\n  if (mongoClient && mongoOptions.autoEncryption) {\n    encrypter_1.Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n\n  return mongoOptions;\n}\n\nexports.parseOptions = parseOptions;\n\nfunction validateLoadBalancedOptions(hosts, mongoOptions) {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      return new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n\n    if (mongoOptions.replicaSet) {\n      return new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n\n    if (mongoOptions.directConnection) {\n      return new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n  }\n}\n\nfunction setOption(mongoOptions, key, descriptor, values) {\n  const {\n    target,\n    type,\n    transform,\n    deprecated\n  } = descriptor;\n  const name = target !== null && target !== void 0 ? target : key;\n\n  if (deprecated) {\n    const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n    utils_1.emitWarning(`${key} is a deprecated option${deprecatedMsg}`);\n  }\n\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n\n    case 'int':\n      mongoOptions[name] = getInt(name, values[0]);\n      break;\n\n    case 'uint':\n      mongoOptions[name] = getUint(name, values[0]);\n      break;\n\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n\n      mongoOptions[name] = String(values[0]);\n      break;\n\n    case 'record':\n      if (!utils_1.isRecord(values[0])) {\n        throw new error_1.MongoParseError(`${name} must be an object`);\n      }\n\n      mongoOptions[name] = values[0];\n      break;\n\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n\n    default:\n      {\n        if (!transform) {\n          throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n        }\n\n        const transformValue = transform({\n          name,\n          options: mongoOptions,\n          values\n        });\n        mongoOptions[name] = transformValue;\n        break;\n      }\n  }\n}\n\nexports.OPTIONS = {\n  appName: {\n    target: 'metadata',\n\n    transform({\n      options,\n      values: [value]\n    }) {\n      return utils_1.makeClientMetadata({ ...options.driverInfo,\n        appName: String(value)\n      });\n    }\n\n  },\n  auth: {\n    target: 'credentials',\n\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      if (!utils_1.isRecord(value, ['username', 'password'])) {\n        throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n\n  },\n  authMechanism: {\n    target: 'credentials',\n\n    transform({\n      options,\n      values: [value]\n    }) {\n      var _a, _b;\n\n      const mechanisms = Object.values(defaultAuthProviders_1.AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n\n      if (!mechanism) {\n        throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n\n      let source = (_a = options.credentials) === null || _a === void 0 ? void 0 : _a.source;\n\n      if (mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_PLAIN || mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI || mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_AWS || mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n\n      let password = (_b = options.credentials) === null || _b === void 0 ? void 0 : _b.password;\n\n      if (mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n\n    transform({\n      options,\n      values: [value]\n    }) {\n      if (typeof value === 'string') {\n        value = toRecord(value);\n      }\n\n      if (!utils_1.isRecord(value)) {\n        throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n      }\n\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanismProperties: value\n      });\n    }\n\n  },\n  authSource: {\n    target: 'credentials',\n\n    transform({\n      options,\n      values: [value]\n    }) {\n      const source = String(value);\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        source\n      });\n    }\n\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n\n    transform({\n      values: [version]\n    }) {\n      const serverApiToValidate = typeof version === 'string' ? {\n        version\n      } : version;\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n\n      if (!versionToValidate) {\n        throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n\n      if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n\n      return serverApiToValidate;\n    }\n\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n\n    transform({\n      values\n    }) {\n      const compressionList = new Set();\n\n      for (const compVal of values) {\n        for (const c of compVal.split(',')) {\n          if (Object.keys(compression_1.Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n          }\n        }\n      }\n\n      return [...compressionList];\n    }\n\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    target: 'metadata',\n    default: utils_1.makeClientMetadata(),\n\n    transform({\n      options,\n      values: [value]\n    }) {\n      var _a, _b;\n\n      if (!utils_1.isRecord(value)) throw new error_1.MongoParseError('DriverInfo must be an object');\n      return utils_1.makeClientMetadata({\n        driverInfo: value,\n        appName: (_b = (_a = options.metadata) === null || _a === void 0 ? void 0 : _a.application) === null || _b === void 0 ? void 0 : _b.name\n      });\n    }\n\n  },\n  family: {\n    transform({\n      name,\n      values: [value]\n    }) {\n      const transformValue = getInt(name, value);\n\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n\n      throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n\n  },\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n\n  },\n  journal: {\n    target: 'writeConcern',\n\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  logger: {\n    default: new logger_1.Logger('MongoClient'),\n\n    transform({\n      values: [value]\n    }) {\n      if (value instanceof logger_1.Logger) {\n        return value;\n      }\n\n      utils_1.emitWarning('Alternative loggers might not be supported'); // TODO: make Logger an interface that others can implement, make usage consistent in driver\n      // DRIVERS-1204\n    }\n\n  },\n  loggerLevel: {\n    target: 'logger',\n\n    transform({\n      values: [value]\n    }) {\n      return new logger_1.Logger('MongoClient', {\n        loggerLevel: value\n      });\n    }\n\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const maxStalenessSeconds = getUint(name, value);\n\n      if (options.readPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference,\n            maxStalenessSeconds\n          }\n        });\n      } else {\n        return new read_preference_1.ReadPreference('secondary', undefined, {\n          maxStalenessSeconds\n        });\n      }\n    }\n\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n\n    transform({\n      values: [value],\n      options\n    }) {\n      return { ...options.driverInfo,\n        name: String(value)\n      };\n    }\n\n  },\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: utils_1.DEFAULT_PK_FACTORY,\n\n    transform({\n      values: [value]\n    }) {\n      if (utils_1.isRecord(value, ['createPk']) && typeof value.createPk === 'function') {\n        return value;\n      }\n\n      throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n    }\n\n  },\n  promiseLibrary: {\n    deprecated: true,\n    type: 'any'\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform({\n      values: [value],\n      options\n    }) {\n      if (value instanceof read_concern_1.ReadConcern || utils_1.isRecord(value, ['level'])) {\n        return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern,\n          ...value\n        });\n      }\n\n      throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n\n    transform({\n      values: [level],\n      options\n    }) {\n      return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern,\n        level: level\n      });\n    }\n\n  },\n  readPreference: {\n    default: read_preference_1.ReadPreference.primary,\n\n    transform({\n      values: [value],\n      options\n    }) {\n      var _a, _b, _c;\n\n      if (value instanceof read_preference_1.ReadPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n      }\n\n      if (utils_1.isRecord(value, ['mode'])) {\n        const rp = read_preference_1.ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n        if (rp) return rp;else throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: (_a = options.readPreference) === null || _a === void 0 ? void 0 : _a.hedge,\n          maxStalenessSeconds: (_b = options.readPreference) === null || _b === void 0 ? void 0 : _b.maxStalenessSeconds\n        };\n        return new read_preference_1.ReadPreference(value, (_c = options.readPreference) === null || _c === void 0 ? void 0 : _c.tags, rpOpts);\n      }\n    }\n\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n\n    transform({\n      values,\n      options\n    }) {\n      const readPreferenceTags = [];\n\n      for (const tag of values) {\n        const readPreferenceTag = Object.create(null);\n\n        if (typeof tag === 'string') {\n          for (const [k, v] of Object.entries(toRecord(tag))) {\n            readPreferenceTag[k] = v;\n          }\n        }\n\n        if (utils_1.isRecord(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n\n        readPreferenceTags.push(readPreferenceTag);\n      }\n\n      return read_preference_1.ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslCRL: {\n    target: 'crl',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslCert: {\n    target: 'cert',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslKey: {\n    target: 'key',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n\n    transform({\n      name,\n      values: [value]\n    }) {\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n\n    transform({\n      name,\n      values: [value]\n    }) {\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n\n  },\n  tlsCAFile: {\n    target: 'ca',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const tlsInsecure = getBoolean(name, value);\n\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames ? () => undefined : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n\n      return tlsInsecure;\n    }\n\n  },\n  w: {\n    target: 'writeConcern',\n\n    transform({\n      values: [value],\n      options\n    }) {\n      return write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          w: value\n        }\n      });\n    }\n\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n\n    transform({\n      values: [value],\n      options\n    }) {\n      if (utils_1.isRecord(value) || value instanceof write_concern_1.WriteConcern) {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: { ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: { ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n\n      throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n\n    transform({\n      values: [value],\n      options\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          wtimeout: getUint('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n\n  },\n  wtimeoutMS: {\n    target: 'writeConcern',\n\n    transform({\n      values: [value],\n      options\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: { ...options.writeConcern,\n          wtimeoutMS: getUint('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: {\n    type: 'any'\n  },\n  srvPoller: {\n    type: 'any'\n  },\n  // Accepted NodeJS Options\n  minDHSize: {\n    type: 'any'\n  },\n  pskCallback: {\n    type: 'any'\n  },\n  secureContext: {\n    type: 'any'\n  },\n  enableTrace: {\n    type: 'any'\n  },\n  requestCert: {\n    type: 'any'\n  },\n  rejectUnauthorized: {\n    type: 'any'\n  },\n  checkServerIdentity: {\n    type: 'any'\n  },\n  ALPNProtocols: {\n    type: 'any'\n  },\n  SNICallback: {\n    type: 'any'\n  },\n  session: {\n    type: 'any'\n  },\n  requestOCSP: {\n    type: 'any'\n  },\n  localAddress: {\n    type: 'any'\n  },\n  localPort: {\n    type: 'any'\n  },\n  hints: {\n    type: 'any'\n  },\n  lookup: {\n    type: 'any'\n  },\n  ca: {\n    type: 'any'\n  },\n  cert: {\n    type: 'any'\n  },\n  ciphers: {\n    type: 'any'\n  },\n  crl: {\n    type: 'any'\n  },\n  ecdhCurve: {\n    type: 'any'\n  },\n  key: {\n    type: 'any'\n  },\n  passphrase: {\n    type: 'any'\n  },\n  pfx: {\n    type: 'any'\n  },\n  secureProtocol: {\n    type: 'any'\n  },\n  index: {\n    type: 'any'\n  },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: {\n    type: 'boolean'\n  },\n  useUnifiedTopology: {\n    type: 'boolean'\n  }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS).filter(([, descriptor]) => descriptor.default != null).map(([k, d]) => [k, d.default]));","map":{"version":3,"names":["Object","defineProperty","exports","value","DEFAULT_OPTIONS","OPTIONS","parseOptions","checkTLSOptions","resolveSRVRecord","dns","require","fs","mongodb_connection_string_url_1","url_1","defaultAuthProviders_1","read_preference_1","read_concern_1","write_concern_1","error_1","utils_1","mongo_client_1","mongo_credentials_1","logger_1","promise_provider_1","encrypter_1","compression_1","VALID_TXT_RECORDS","LB_SINGLE_HOST_ERROR","LB_REPLICA_SET_ERROR","LB_DIRECT_CONNECTION_ERROR","matchesParentDomain","srvAddress","parentDomain","regex","srv","replace","parent","endsWith","options","callback","srvHost","MongoAPIError","split","length","lookupAddress","resolveSrv","err","addresses","name","hostAddresses","map","r","_a","HostAddress","fromString","port","lbError","validateLoadBalancedOptions","resolveTxt","record","_b","_c","code","MongoParseError","txtRecordOptions","URLSearchParams","join","txtRecordOptionKeys","keys","some","key","includes","source","get","undefined","replicaSet","loadBalanced","userSpecifiedAuthSource","credentials","MongoCredentials","merge","userSpecifiedReplicaSet","check","a","b","Reflect","has","TRUTHS","Set","FALSEHOODS","getBoolean","valueString","String","toLowerCase","getInt","Math","trunc","parsedValue","Number","parseInt","isNaN","getUint","toRecord","create","keyValuePairs","keyValue","CaseInsensitiveMap","Map","constructor","entries","k","v","set","delete","uri","mongoClient","MongoClient","url","default","hosts","isSRV","mongoOptions","searchParams","tls","urlOptions","pathname","dbName","decodeURIComponent","slice","username","auth","password","values","getAll","objectOptions","filter","allOptions","allKeys","push","unsupportedOptions","setDifference","Array","from","s","size","optionWord","isOrAre","descriptor","setOption","isGssapi","mechanism","AuthMechanism","MONGODB_GSSAPI","isX509","MONGODB_X509","isAws","MONGODB_AWS","validate","promiseLibrary","PromiseProvider","directConnection","autoEncryption","Encrypter","checkForMongoCrypt","encrypter","autoEncrypter","target","type","transform","deprecated","deprecatedMsg","emitWarning","isRecord","transformValue","appName","makeClientMetadata","driverInfo","authMechanism","mechanisms","m","match","RegExp","raw","MONGODB_PLAIN","authMechanismProperties","mechanismProperties","authSource","bsonRegExp","serverApi","version","serverApiToValidate","versionToValidate","ServerApiVersion","checkKeys","compressors","compressionList","compVal","c","Compressor","add","MongoInvalidArgumentError","connectTimeoutMS","metadata","application","family","fieldsAsRaw","forceServerObjectId","fsync","wc","WriteConcern","fromOptions","writeConcern","heartbeatFrequencyMS","ignoreUndefined","j","journal","keepAlive","keepAliveInitialDelay","localThresholdMS","logger","Logger","loggerLevel","maxIdleTimeMS","maxPoolSize","maxStalenessSeconds","readPreference","ReadPreference","minInternalBufferSize","minPoolSize","minHeartbeatFrequencyMS","monitorCommands","noDelay","pkFactory","DEFAULT_PK_FACTORY","createPk","promoteBuffers","promoteLongs","promoteValues","readConcern","ReadConcern","JSON","stringify","readConcernLevel","level","primary","rp","rpOpts","hedge","tags","readPreferenceTags","tag","readPreferenceTag","retryReads","retryWrites","serializeFunctions","serverSelectionTimeoutMS","servername","socketTimeoutMS","ssl","sslCA","readFileSync","encoding","sslCRL","sslCert","sslKey","sslPass","sslValidate","tlsAllowInvalidCertificates","tlsAllowInvalidHostnames","tlsCAFile","tlsCertificateFile","tlsCertificateKeyFile","tlsCertificateKeyFilePassword","tlsInsecure","checkServerIdentity","rejectUnauthorized","w","waitQueueTimeoutMS","wtimeout","wtimeoutMS","zlibCompressionLevel","connectionType","srvPoller","minDHSize","pskCallback","secureContext","enableTrace","requestCert","ALPNProtocols","SNICallback","session","requestOCSP","localAddress","localPort","hints","lookup","ca","cert","ciphers","crl","ecdhCurve","passphrase","pfx","secureProtocol","index","useNewUrlParser","useUnifiedTopology","d"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/connection_string.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.checkTLSOptions = exports.resolveSRVRecord = void 0;\nconst dns = require(\"dns\");\nconst fs = require(\"fs\");\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\nconst url_1 = require(\"url\");\nconst defaultAuthProviders_1 = require(\"./cmap/auth/defaultAuthProviders\");\nconst read_preference_1 = require(\"./read_preference\");\nconst read_concern_1 = require(\"./read_concern\");\nconst write_concern_1 = require(\"./write_concern\");\nconst error_1 = require(\"./error\");\nconst utils_1 = require(\"./utils\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nconst logger_1 = require(\"./logger\");\nconst promise_provider_1 = require(\"./promise_provider\");\nconst encrypter_1 = require(\"./encrypter\");\nconst compression_1 = require(\"./cmap/wire_protocol/compression\");\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n    const regex = /^.*?\\./;\n    const srv = `.${srvAddress.replace(regex, '')}`;\n    const parent = `.${parentDomain.replace(regex, '')}`;\n    return srv.endsWith(parent);\n}\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nfunction resolveSRVRecord(options, callback) {\n    if (typeof options.srvHost !== 'string') {\n        return callback(new error_1.MongoAPIError('Option \"srvHost\" must not be empty'));\n    }\n    if (options.srvHost.split('.').length < 3) {\n        // TODO(NODE-3484): Replace with MongoConnectionStringError\n        return callback(new error_1.MongoAPIError('URI must include hostname, domain name, and tld'));\n    }\n    // Resolve the SRV record and use the result as the list of hosts to connect to.\n    const lookupAddress = options.srvHost;\n    dns.resolveSrv(`_mongodb._tcp.${lookupAddress}`, (err, addresses) => {\n        if (err)\n            return callback(err);\n        if (addresses.length === 0) {\n            return callback(new error_1.MongoAPIError('No addresses found at host'));\n        }\n        for (const { name } of addresses) {\n            if (!matchesParentDomain(name, lookupAddress)) {\n                return callback(new error_1.MongoAPIError('Server record does not share hostname with parent URI'));\n            }\n        }\n        const hostAddresses = addresses.map(r => { var _a; return utils_1.HostAddress.fromString(`${r.name}:${(_a = r.port) !== null && _a !== void 0 ? _a : 27017}`); });\n        const lbError = validateLoadBalancedOptions(hostAddresses, options);\n        if (lbError) {\n            return callback(lbError);\n        }\n        // Resolve TXT record and add options from there if they exist.\n        dns.resolveTxt(lookupAddress, (err, record) => {\n            var _a, _b, _c;\n            if (err) {\n                if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n                    return callback(err);\n                }\n            }\n            else {\n                if (record.length > 1) {\n                    return callback(new error_1.MongoParseError('Multiple text records not allowed'));\n                }\n                const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n                const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n                if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n                    return callback(new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`));\n                }\n                const source = (_a = txtRecordOptions.get('authSource')) !== null && _a !== void 0 ? _a : undefined;\n                const replicaSet = (_b = txtRecordOptions.get('replicaSet')) !== null && _b !== void 0 ? _b : undefined;\n                const loadBalanced = (_c = txtRecordOptions.get('loadBalanced')) !== null && _c !== void 0 ? _c : undefined;\n                if (source === '' || replicaSet === '') {\n                    return callback(new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record'));\n                }\n                if (!options.userSpecifiedAuthSource && source) {\n                    options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n                }\n                if (!options.userSpecifiedReplicaSet && replicaSet) {\n                    options.replicaSet = replicaSet;\n                }\n                if (loadBalanced === 'true') {\n                    options.loadBalanced = true;\n                }\n                const lbError = validateLoadBalancedOptions(hostAddresses, options);\n                if (lbError) {\n                    return callback(lbError);\n                }\n            }\n            callback(undefined, hostAddresses);\n        });\n    });\n}\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param options - The options used for options parsing\n * @throws MongoParseError if TLS options are invalid\n */\nfunction checkTLSOptions(options) {\n    if (!options)\n        return;\n    const check = (a, b) => {\n        if (Reflect.has(options, a) && Reflect.has(options, b)) {\n            throw new error_1.MongoParseError(`The '${a}' option cannot be used with '${b}'`);\n        }\n    };\n    check('tlsInsecure', 'tlsAllowInvalidCertificates');\n    check('tlsInsecure', 'tlsAllowInvalidHostnames');\n    check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n    check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n    check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n    check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n    check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nexports.checkTLSOptions = checkTLSOptions;\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\nfunction getBoolean(name, value) {\n    if (typeof value === 'boolean')\n        return value;\n    const valueString = String(value).toLowerCase();\n    if (TRUTHS.has(valueString))\n        return true;\n    if (FALSEHOODS.has(valueString))\n        return false;\n    throw new error_1.MongoParseError(`For ${name} Expected stringified boolean value, got: ${value}`);\n}\nfunction getInt(name, value) {\n    if (typeof value === 'number')\n        return Math.trunc(value);\n    const parsedValue = Number.parseInt(String(value), 10);\n    if (!Number.isNaN(parsedValue))\n        return parsedValue;\n    throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUint(name, value) {\n    const parsedValue = getInt(name, value);\n    if (parsedValue < 0) {\n        throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n    }\n    return parsedValue;\n}\nfunction toRecord(value) {\n    const record = Object.create(null);\n    const keyValuePairs = value.split(',');\n    for (const keyValue of keyValuePairs) {\n        const [key, value] = keyValue.split(':');\n        if (value == null) {\n            throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n        }\n        try {\n            // try to get a boolean\n            record[key] = getBoolean('', value);\n        }\n        catch {\n            try {\n                // try to get a number\n                record[key] = getInt('', value);\n            }\n            catch {\n                // keep value as a string\n                record[key] = value;\n            }\n        }\n    }\n    return record;\n}\nclass CaseInsensitiveMap extends Map {\n    constructor(entries = []) {\n        super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n    }\n    has(k) {\n        return super.has(k.toLowerCase());\n    }\n    get(k) {\n        return super.get(k.toLowerCase());\n    }\n    set(k, v) {\n        return super.set(k.toLowerCase(), v);\n    }\n    delete(k) {\n        return super.delete(k.toLowerCase());\n    }\n}\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n    var _a, _b;\n    if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n        options = mongoClient;\n        mongoClient = undefined;\n    }\n    const url = new mongodb_connection_string_url_1.default(uri);\n    const { hosts, isSRV } = url;\n    const mongoOptions = Object.create(null);\n    mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n    if (isSRV) {\n        // SRV Record is resolved upon connecting\n        mongoOptions.srvHost = hosts[0];\n        if (!url.searchParams.has('tls') && !url.searchParams.has('ssl')) {\n            options.tls = true;\n        }\n    }\n    const urlOptions = new CaseInsensitiveMap();\n    if (url.pathname !== '/' && url.pathname !== '') {\n        const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n        if (dbName) {\n            urlOptions.set('dbName', [dbName]);\n        }\n    }\n    if (url.username !== '') {\n        const auth = {\n            username: decodeURIComponent(url.username)\n        };\n        if (typeof url.password === 'string') {\n            auth.password = decodeURIComponent(url.password);\n        }\n        urlOptions.set('auth', [auth]);\n    }\n    for (const key of url.searchParams.keys()) {\n        const values = [...url.searchParams.getAll(key)];\n        if (values.includes('')) {\n            throw new error_1.MongoAPIError('URI cannot contain options with no value');\n        }\n        if (key.toLowerCase() === 'serverapi') {\n            throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n        }\n        if (key.toLowerCase() === 'authsource' && urlOptions.has('authSource')) {\n            // If authSource is an explicit key in the urlOptions we need to remove the implicit dbName\n            urlOptions.delete('authSource');\n        }\n        if (!urlOptions.has(key)) {\n            urlOptions.set(key, values);\n        }\n    }\n    const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v]) => v != null));\n    if (objectOptions.has('loadBalanced')) {\n        throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n    }\n    const allOptions = new CaseInsensitiveMap();\n    const allKeys = new Set([\n        ...urlOptions.keys(),\n        ...objectOptions.keys(),\n        ...exports.DEFAULT_OPTIONS.keys()\n    ]);\n    for (const key of allKeys) {\n        const values = [];\n        if (objectOptions.has(key)) {\n            values.push(objectOptions.get(key));\n        }\n        if (urlOptions.has(key)) {\n            values.push(...urlOptions.get(key));\n        }\n        if (exports.DEFAULT_OPTIONS.has(key)) {\n            values.push(exports.DEFAULT_OPTIONS.get(key));\n        }\n        allOptions.set(key, values);\n    }\n    const unsupportedOptions = utils_1.setDifference(allKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n    if (unsupportedOptions.size !== 0) {\n        const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n        const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n        throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n    }\n    for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n        const values = allOptions.get(key);\n        if (!values || values.length === 0)\n            continue;\n        setOption(mongoOptions, key, descriptor, values);\n    }\n    if (mongoOptions.credentials) {\n        const isGssapi = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI;\n        const isX509 = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509;\n        const isAws = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_AWS;\n        if ((isGssapi || isX509) &&\n            allOptions.has('authSource') &&\n            mongoOptions.credentials.source !== '$external') {\n            // If authSource was explicitly given and its incorrect, we error\n            throw new error_1.MongoParseError(`${mongoOptions.credentials} can only have authSource set to '$external'`);\n        }\n        if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n            // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n            // and there was no specific authSource given\n            mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n                source: mongoOptions.dbName\n            });\n        }\n        mongoOptions.credentials.validate();\n    }\n    if (!mongoOptions.dbName) {\n        // dbName default is applied here because of the credential validation above\n        mongoOptions.dbName = 'test';\n    }\n    if (allOptions.has('tls')) {\n        if (new Set((_a = allOptions.get('tls')) === null || _a === void 0 ? void 0 : _a.map(getBoolean)).size !== 1) {\n            throw new error_1.MongoParseError('All values of tls must be the same.');\n        }\n    }\n    if (allOptions.has('ssl')) {\n        if (new Set((_b = allOptions.get('ssl')) === null || _b === void 0 ? void 0 : _b.map(getBoolean)).size !== 1) {\n            throw new error_1.MongoParseError('All values of ssl must be the same.');\n        }\n    }\n    checkTLSOptions(mongoOptions);\n    if (options.promiseLibrary)\n        promise_provider_1.PromiseProvider.set(options.promiseLibrary);\n    if (mongoOptions.directConnection && typeof mongoOptions.srvHost === 'string') {\n        throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n    }\n    const lbError = validateLoadBalancedOptions(hosts, mongoOptions);\n    if (lbError) {\n        throw lbError;\n    }\n    // Potential SRV Overrides\n    mongoOptions.userSpecifiedAuthSource =\n        objectOptions.has('authSource') || urlOptions.has('authSource');\n    mongoOptions.userSpecifiedReplicaSet =\n        objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n    if (mongoClient && mongoOptions.autoEncryption) {\n        encrypter_1.Encrypter.checkForMongoCrypt();\n        mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n        mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n    }\n    return mongoOptions;\n}\nexports.parseOptions = parseOptions;\nfunction validateLoadBalancedOptions(hosts, mongoOptions) {\n    if (mongoOptions.loadBalanced) {\n        if (hosts.length > 1) {\n            return new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n        }\n        if (mongoOptions.replicaSet) {\n            return new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n        }\n        if (mongoOptions.directConnection) {\n            return new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n        }\n    }\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n    const { target, type, transform, deprecated } = descriptor;\n    const name = target !== null && target !== void 0 ? target : key;\n    if (deprecated) {\n        const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n        utils_1.emitWarning(`${key} is a deprecated option${deprecatedMsg}`);\n    }\n    switch (type) {\n        case 'boolean':\n            mongoOptions[name] = getBoolean(name, values[0]);\n            break;\n        case 'int':\n            mongoOptions[name] = getInt(name, values[0]);\n            break;\n        case 'uint':\n            mongoOptions[name] = getUint(name, values[0]);\n            break;\n        case 'string':\n            if (values[0] == null) {\n                break;\n            }\n            mongoOptions[name] = String(values[0]);\n            break;\n        case 'record':\n            if (!utils_1.isRecord(values[0])) {\n                throw new error_1.MongoParseError(`${name} must be an object`);\n            }\n            mongoOptions[name] = values[0];\n            break;\n        case 'any':\n            mongoOptions[name] = values[0];\n            break;\n        default: {\n            if (!transform) {\n                throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n            }\n            const transformValue = transform({ name, options: mongoOptions, values });\n            mongoOptions[name] = transformValue;\n            break;\n        }\n    }\n}\nexports.OPTIONS = {\n    appName: {\n        target: 'metadata',\n        transform({ options, values: [value] }) {\n            return utils_1.makeClientMetadata({ ...options.driverInfo, appName: String(value) });\n        }\n    },\n    auth: {\n        target: 'credentials',\n        transform({ name, options, values: [value] }) {\n            if (!utils_1.isRecord(value, ['username', 'password'])) {\n                throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                username: value.username,\n                password: value.password\n            });\n        }\n    },\n    authMechanism: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            var _a, _b;\n            const mechanisms = Object.values(defaultAuthProviders_1.AuthMechanism);\n            const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw `\\b${value}\\b`, 'i')));\n            if (!mechanism) {\n                throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n            }\n            let source = (_a = options.credentials) === null || _a === void 0 ? void 0 : _a.source;\n            if (mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_PLAIN ||\n                mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI ||\n                mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_AWS ||\n                mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509) {\n                // some mechanisms have '$external' as the Auth Source\n                source = '$external';\n            }\n            let password = (_b = options.credentials) === null || _b === void 0 ? void 0 : _b.password;\n            if (mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509 && password === '') {\n                password = undefined;\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanism,\n                source,\n                password\n            });\n        }\n    },\n    authMechanismProperties: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            if (typeof value === 'string') {\n                value = toRecord(value);\n            }\n            if (!utils_1.isRecord(value)) {\n                throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, { mechanismProperties: value });\n        }\n    },\n    authSource: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            const source = String(value);\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n        }\n    },\n    autoEncryption: {\n        type: 'record'\n    },\n    bsonRegExp: {\n        type: 'boolean'\n    },\n    serverApi: {\n        target: 'serverApi',\n        transform({ values: [version] }) {\n            const serverApiToValidate = typeof version === 'string' ? { version } : version;\n            const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n            if (!versionToValidate) {\n                throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n                throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            return serverApiToValidate;\n        }\n    },\n    checkKeys: {\n        type: 'boolean'\n    },\n    compressors: {\n        default: 'none',\n        target: 'compressors',\n        transform({ values }) {\n            const compressionList = new Set();\n            for (const compVal of values) {\n                for (const c of compVal.split(',')) {\n                    if (Object.keys(compression_1.Compressor).includes(String(c))) {\n                        compressionList.add(String(c));\n                    }\n                    else {\n                        throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n                    }\n                }\n            }\n            return [...compressionList];\n        }\n    },\n    connectTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    dbName: {\n        type: 'string'\n    },\n    directConnection: {\n        default: false,\n        type: 'boolean'\n    },\n    driverInfo: {\n        target: 'metadata',\n        default: utils_1.makeClientMetadata(),\n        transform({ options, values: [value] }) {\n            var _a, _b;\n            if (!utils_1.isRecord(value))\n                throw new error_1.MongoParseError('DriverInfo must be an object');\n            return utils_1.makeClientMetadata({\n                driverInfo: value,\n                appName: (_b = (_a = options.metadata) === null || _a === void 0 ? void 0 : _a.application) === null || _b === void 0 ? void 0 : _b.name\n            });\n        }\n    },\n    family: {\n        transform({ name, values: [value] }) {\n            const transformValue = getInt(name, value);\n            if (transformValue === 4 || transformValue === 6) {\n                return transformValue;\n            }\n            throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n        }\n    },\n    fieldsAsRaw: {\n        type: 'record'\n    },\n    forceServerObjectId: {\n        default: false,\n        type: 'boolean'\n    },\n    fsync: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    fsync: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n            return wc;\n        }\n    },\n    heartbeatFrequencyMS: {\n        default: 10000,\n        type: 'uint'\n    },\n    ignoreUndefined: {\n        type: 'boolean'\n    },\n    j: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    journal: {\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    keepAlive: {\n        default: true,\n        type: 'boolean'\n    },\n    keepAliveInitialDelay: {\n        default: 120000,\n        type: 'uint'\n    },\n    loadBalanced: {\n        default: false,\n        type: 'boolean'\n    },\n    localThresholdMS: {\n        default: 15,\n        type: 'uint'\n    },\n    logger: {\n        default: new logger_1.Logger('MongoClient'),\n        transform({ values: [value] }) {\n            if (value instanceof logger_1.Logger) {\n                return value;\n            }\n            utils_1.emitWarning('Alternative loggers might not be supported');\n            // TODO: make Logger an interface that others can implement, make usage consistent in driver\n            // DRIVERS-1204\n        }\n    },\n    loggerLevel: {\n        target: 'logger',\n        transform({ values: [value] }) {\n            return new logger_1.Logger('MongoClient', { loggerLevel: value });\n        }\n    },\n    maxIdleTimeMS: {\n        default: 0,\n        type: 'uint'\n    },\n    maxPoolSize: {\n        default: 100,\n        type: 'uint'\n    },\n    maxStalenessSeconds: {\n        target: 'readPreference',\n        transform({ name, options, values: [value] }) {\n            const maxStalenessSeconds = getUint(name, value);\n            if (options.readPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, maxStalenessSeconds }\n                });\n            }\n            else {\n                return new read_preference_1.ReadPreference('secondary', undefined, { maxStalenessSeconds });\n            }\n        }\n    },\n    minInternalBufferSize: {\n        type: 'uint'\n    },\n    minPoolSize: {\n        default: 0,\n        type: 'uint'\n    },\n    minHeartbeatFrequencyMS: {\n        default: 500,\n        type: 'uint'\n    },\n    monitorCommands: {\n        default: false,\n        type: 'boolean'\n    },\n    name: {\n        target: 'driverInfo',\n        transform({ values: [value], options }) {\n            return { ...options.driverInfo, name: String(value) };\n        }\n    },\n    noDelay: {\n        default: true,\n        type: 'boolean'\n    },\n    pkFactory: {\n        default: utils_1.DEFAULT_PK_FACTORY,\n        transform({ values: [value] }) {\n            if (utils_1.isRecord(value, ['createPk']) && typeof value.createPk === 'function') {\n                return value;\n            }\n            throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n        }\n    },\n    promiseLibrary: {\n        deprecated: true,\n        type: 'any'\n    },\n    promoteBuffers: {\n        type: 'boolean'\n    },\n    promoteLongs: {\n        type: 'boolean'\n    },\n    promoteValues: {\n        type: 'boolean'\n    },\n    raw: {\n        default: false,\n        type: 'boolean'\n    },\n    readConcern: {\n        transform({ values: [value], options }) {\n            if (value instanceof read_concern_1.ReadConcern || utils_1.isRecord(value, ['level'])) {\n                return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern, ...value });\n            }\n            throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n        }\n    },\n    readConcernLevel: {\n        target: 'readConcern',\n        transform({ values: [level], options }) {\n            return read_concern_1.ReadConcern.fromOptions({\n                ...options.readConcern,\n                level: level\n            });\n        }\n    },\n    readPreference: {\n        default: read_preference_1.ReadPreference.primary,\n        transform({ values: [value], options }) {\n            var _a, _b, _c;\n            if (value instanceof read_preference_1.ReadPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n            }\n            if (utils_1.isRecord(value, ['mode'])) {\n                const rp = read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n                if (rp)\n                    return rp;\n                else\n                    throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n            }\n            if (typeof value === 'string') {\n                const rpOpts = {\n                    hedge: (_a = options.readPreference) === null || _a === void 0 ? void 0 : _a.hedge,\n                    maxStalenessSeconds: (_b = options.readPreference) === null || _b === void 0 ? void 0 : _b.maxStalenessSeconds\n                };\n                return new read_preference_1.ReadPreference(value, (_c = options.readPreference) === null || _c === void 0 ? void 0 : _c.tags, rpOpts);\n            }\n        }\n    },\n    readPreferenceTags: {\n        target: 'readPreference',\n        transform({ values, options }) {\n            const readPreferenceTags = [];\n            for (const tag of values) {\n                const readPreferenceTag = Object.create(null);\n                if (typeof tag === 'string') {\n                    for (const [k, v] of Object.entries(toRecord(tag))) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                if (utils_1.isRecord(tag)) {\n                    for (const [k, v] of Object.entries(tag)) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                readPreferenceTags.push(readPreferenceTag);\n            }\n            return read_preference_1.ReadPreference.fromOptions({\n                readPreference: options.readPreference,\n                readPreferenceTags\n            });\n        }\n    },\n    replicaSet: {\n        type: 'string'\n    },\n    retryReads: {\n        default: true,\n        type: 'boolean'\n    },\n    retryWrites: {\n        default: true,\n        type: 'boolean'\n    },\n    serializeFunctions: {\n        type: 'boolean'\n    },\n    serverSelectionTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    servername: {\n        type: 'string'\n    },\n    socketTimeoutMS: {\n        default: 0,\n        type: 'uint'\n    },\n    ssl: {\n        target: 'tls',\n        type: 'boolean'\n    },\n    sslCA: {\n        target: 'ca',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    sslCRL: {\n        target: 'crl',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    sslCert: {\n        target: 'cert',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    sslKey: {\n        target: 'key',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    sslPass: {\n        deprecated: true,\n        target: 'passphrase',\n        type: 'string'\n    },\n    sslValidate: {\n        target: 'rejectUnauthorized',\n        type: 'boolean'\n    },\n    tls: {\n        type: 'boolean'\n    },\n    tlsAllowInvalidCertificates: {\n        target: 'rejectUnauthorized',\n        transform({ name, values: [value] }) {\n            // allowInvalidCertificates is the inverse of rejectUnauthorized\n            return !getBoolean(name, value);\n        }\n    },\n    tlsAllowInvalidHostnames: {\n        target: 'checkServerIdentity',\n        transform({ name, values: [value] }) {\n            // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n            return getBoolean(name, value) ? () => undefined : undefined;\n        }\n    },\n    tlsCAFile: {\n        target: 'ca',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    tlsCertificateFile: {\n        target: 'cert',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    tlsCertificateKeyFile: {\n        target: 'key',\n        transform({ values: [value] }) {\n            return fs.readFileSync(String(value), { encoding: 'ascii' });\n        }\n    },\n    tlsCertificateKeyFilePassword: {\n        target: 'passphrase',\n        type: 'any'\n    },\n    tlsInsecure: {\n        transform({ name, options, values: [value] }) {\n            const tlsInsecure = getBoolean(name, value);\n            if (tlsInsecure) {\n                options.checkServerIdentity = () => undefined;\n                options.rejectUnauthorized = false;\n            }\n            else {\n                options.checkServerIdentity = options.tlsAllowInvalidHostnames\n                    ? () => undefined\n                    : undefined;\n                options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n            }\n            return tlsInsecure;\n        }\n    },\n    w: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            return write_concern_1.WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value } });\n        }\n    },\n    waitQueueTimeoutMS: {\n        default: 0,\n        type: 'uint'\n    },\n    writeConcern: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            if (utils_1.isRecord(value) || value instanceof write_concern_1.WriteConcern) {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        ...value\n                    }\n                });\n            }\n            else if (value === 'majority' || typeof value === 'number') {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        w: value\n                    }\n                });\n            }\n            throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n        }\n    },\n    wtimeout: {\n        deprecated: 'Please use wtimeoutMS instead',\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeout: getUint('wtimeout', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    wtimeoutMS: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeoutMS: getUint('wtimeoutMS', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    zlibCompressionLevel: {\n        default: 0,\n        type: 'int'\n    },\n    // Custom types for modifying core behavior\n    connectionType: { type: 'any' },\n    srvPoller: { type: 'any' },\n    // Accepted NodeJS Options\n    minDHSize: { type: 'any' },\n    pskCallback: { type: 'any' },\n    secureContext: { type: 'any' },\n    enableTrace: { type: 'any' },\n    requestCert: { type: 'any' },\n    rejectUnauthorized: { type: 'any' },\n    checkServerIdentity: { type: 'any' },\n    ALPNProtocols: { type: 'any' },\n    SNICallback: { type: 'any' },\n    session: { type: 'any' },\n    requestOCSP: { type: 'any' },\n    localAddress: { type: 'any' },\n    localPort: { type: 'any' },\n    hints: { type: 'any' },\n    lookup: { type: 'any' },\n    ca: { type: 'any' },\n    cert: { type: 'any' },\n    ciphers: { type: 'any' },\n    crl: { type: 'any' },\n    ecdhCurve: { type: 'any' },\n    key: { type: 'any' },\n    passphrase: { type: 'any' },\n    pfx: { type: 'any' },\n    secureProtocol: { type: 'any' },\n    index: { type: 'any' },\n    // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n    useNewUrlParser: { type: 'boolean' },\n    useUnifiedTopology: { type: 'boolean' }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default]));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}