{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridFSBucketReadStream = void 0;\n\nconst stream_1 = require(\"stream\");\n\nconst error_1 = require(\"../error\");\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\n\n\nclass GridFSBucketReadStream extends stream_1.Readable {\n  /** @internal\n   * @param chunks - Handle for chunks collection\n   * @param files - Handle for files collection\n   * @param readPreference - The read preference to use\n   * @param filter - The filter to use to find the file document\n   */\n  constructor(chunks, files, readPreference, filter, options) {\n    super();\n    this.s = {\n      bytesToTrim: 0,\n      bytesToSkip: 0,\n      bytesRead: 0,\n      chunks,\n      expected: 0,\n      files,\n      filter,\n      init: false,\n      expectedEnd: 0,\n      options: {\n        start: 0,\n        end: 0,\n        ...options\n      },\n      readPreference\n    };\n  }\n  /**\n   * Reads from the cursor and pushes to the stream.\n   * Private Impl, do not call directly\n   * @internal\n   */\n\n\n  _read() {\n    if (this.destroyed) return;\n    waitForFile(this, () => doRead(this));\n  }\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param start - 0-based offset in bytes to start streaming from\n   */\n\n\n  start(start = 0) {\n    throwIfInitialized(this);\n    this.s.options.start = start;\n    return this;\n  }\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param end - Offset in bytes to stop reading at\n   */\n\n\n  end(end = 0) {\n    throwIfInitialized(this);\n    this.s.options.end = end;\n    return this;\n  }\n  /**\n   * Marks this stream as aborted (will never push another `data` event)\n   * and kills the underlying cursor. Will emit the 'end' event, and then\n   * the 'close' event once the cursor is successfully killed.\n   *\n   * @param callback - called when the cursor is successfully closed or an error occurred.\n   */\n\n\n  abort(callback) {\n    this.push(null);\n    this.destroyed = true;\n\n    if (this.s.cursor) {\n      this.s.cursor.close(error => {\n        this.emit(GridFSBucketReadStream.CLOSE);\n        callback && callback(error);\n      });\n    } else {\n      if (!this.s.init) {\n        // If not initialized, fire close event because we will never\n        // get a cursor\n        this.emit(GridFSBucketReadStream.CLOSE);\n      }\n\n      callback && callback();\n    }\n  }\n\n}\n\nexports.GridFSBucketReadStream = GridFSBucketReadStream;\n/**\n * An error occurred\n * @event\n */\n\nGridFSBucketReadStream.ERROR = 'error';\n/**\n * Fires when the stream loaded the file document corresponding to the provided id.\n * @event\n */\n\nGridFSBucketReadStream.FILE = 'file';\n/**\n * Emitted when a chunk of data is available to be consumed.\n * @event\n */\n\nGridFSBucketReadStream.DATA = 'data';\n/**\n * Fired when the stream is exhausted (no more data events).\n * @event\n */\n\nGridFSBucketReadStream.END = 'end';\n/**\n * Fired when the stream is exhausted and the underlying cursor is killed\n * @event\n */\n\nGridFSBucketReadStream.CLOSE = 'close';\n\nfunction throwIfInitialized(stream) {\n  if (stream.s.init) {\n    throw new error_1.MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\n  }\n}\n\nfunction doRead(stream) {\n  if (stream.destroyed) return;\n  if (!stream.s.cursor) return;\n  if (!stream.s.file) return;\n  stream.s.cursor.next((error, doc) => {\n    if (stream.destroyed) {\n      return;\n    }\n\n    if (error) {\n      stream.emit(GridFSBucketReadStream.ERROR, error);\n      return;\n    }\n\n    if (!doc) {\n      stream.push(null);\n      process.nextTick(() => {\n        if (!stream.s.cursor) return;\n        stream.s.cursor.close(error => {\n          if (error) {\n            stream.emit(GridFSBucketReadStream.ERROR, error);\n            return;\n          }\n\n          stream.emit(GridFSBucketReadStream.CLOSE);\n        });\n      });\n      return;\n    }\n\n    if (!stream.s.file) return;\n    const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n    const expectedN = stream.s.expected++;\n    const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n\n    if (doc.n > expectedN) {\n      return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n    }\n\n    if (doc.n < expectedN) {\n      return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n    }\n\n    let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n\n    if (buf.byteLength !== expectedLength) {\n      if (bytesRemaining <= 0) {\n        return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}`));\n      }\n\n      return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`));\n    }\n\n    stream.s.bytesRead += buf.byteLength;\n\n    if (buf.byteLength === 0) {\n      return stream.push(null);\n    }\n\n    let sliceStart = null;\n    let sliceEnd = null;\n\n    if (stream.s.bytesToSkip != null) {\n      sliceStart = stream.s.bytesToSkip;\n      stream.s.bytesToSkip = 0;\n    }\n\n    const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n    const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n\n    if (atEndOfStream && stream.s.bytesToTrim != null) {\n      sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n    } else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n      sliceEnd = bytesLeftToRead;\n    }\n\n    if (sliceStart != null || sliceEnd != null) {\n      buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n    }\n\n    stream.push(buf);\n  });\n}\n\nfunction init(stream) {\n  const findOneOptions = {};\n\n  if (stream.s.readPreference) {\n    findOneOptions.readPreference = stream.s.readPreference;\n  }\n\n  if (stream.s.options && stream.s.options.sort) {\n    findOneOptions.sort = stream.s.options.sort;\n  }\n\n  if (stream.s.options && stream.s.options.skip) {\n    findOneOptions.skip = stream.s.options.skip;\n  }\n\n  stream.s.files.findOne(stream.s.filter, findOneOptions, (error, doc) => {\n    if (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n\n    if (!doc) {\n      const identifier = stream.s.filter._id ? stream.s.filter._id.toString() : stream.s.filter.filename;\n      const errmsg = `FileNotFound: file ${identifier} was not found`; // TODO(NODE-3483)\n\n      const err = new error_1.MongoRuntimeError(errmsg);\n      err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n\n      return stream.emit(GridFSBucketReadStream.ERROR, err);\n    } // If document is empty, kill the stream immediately and don't\n    // execute any reads\n\n\n    if (doc.length <= 0) {\n      stream.push(null);\n      return;\n    }\n\n    if (stream.destroyed) {\n      // If user destroys the stream before we have a cursor, wait\n      // until the query is done to say we're 'closed' because we can't\n      // cancel a query.\n      stream.emit(GridFSBucketReadStream.CLOSE);\n      return;\n    }\n\n    try {\n      stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n    } catch (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n\n    const filter = {\n      files_id: doc._id\n    }; // Currently (MongoDB 3.4.4) skip function does not support the index,\n    // it needs to retrieve all the documents first and then skip them. (CS-25811)\n    // As work around we use $gte on the \"n\" field.\n\n    if (stream.s.options && stream.s.options.start != null) {\n      const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n\n      if (skip > 0) {\n        filter['n'] = {\n          $gte: skip\n        };\n      }\n    }\n\n    stream.s.cursor = stream.s.chunks.find(filter).sort({\n      n: 1\n    });\n\n    if (stream.s.readPreference) {\n      stream.s.cursor.withReadPreference(stream.s.readPreference);\n    }\n\n    stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n    stream.s.file = doc;\n\n    try {\n      stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n    } catch (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n\n    stream.emit(GridFSBucketReadStream.FILE, doc);\n  });\n}\n\nfunction waitForFile(stream, callback) {\n  if (stream.s.file) {\n    return callback();\n  }\n\n  if (!stream.s.init) {\n    init(stream);\n    stream.s.init = true;\n  }\n\n  stream.once('file', () => {\n    callback();\n  });\n}\n\nfunction handleStartOption(stream, doc, options) {\n  if (options && options.start != null) {\n    if (options.start > doc.length) {\n      throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be more than the length of the file (${doc.length})`);\n    }\n\n    if (options.start < 0) {\n      throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n    }\n\n    if (options.end != null && options.end < options.start) {\n      throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be greater than stream end (${options.end})`);\n    }\n\n    stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n    stream.s.expected = Math.floor(options.start / doc.chunkSize);\n    return options.start - stream.s.bytesRead;\n  }\n\n  throw new error_1.MongoInvalidArgumentError('Start option must be defined');\n}\n\nfunction handleEndOption(stream, doc, cursor, options) {\n  if (options && options.end != null) {\n    if (options.end > doc.length) {\n      throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be more than the length of the file (${doc.length})`);\n    }\n\n    if (options.start == null || options.start < 0) {\n      throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n    }\n\n    const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n    cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n    stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n    return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n  }\n\n  throw new error_1.MongoInvalidArgumentError('End option must be defined');\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","GridFSBucketReadStream","stream_1","require","error_1","Readable","constructor","chunks","files","readPreference","filter","options","s","bytesToTrim","bytesToSkip","bytesRead","expected","init","expectedEnd","start","end","_read","destroyed","waitForFile","doRead","throwIfInitialized","abort","callback","push","cursor","close","error","emit","CLOSE","ERROR","FILE","DATA","END","stream","MongoGridFSStreamError","file","next","doc","process","nextTick","bytesRemaining","length","expectedN","expectedLength","Math","min","chunkSize","n","MongoGridFSChunkError","buf","Buffer","isBuffer","data","buffer","byteLength","sliceStart","sliceEnd","atEndOfStream","bytesLeftToRead","slice","findOneOptions","sort","skip","findOne","identifier","_id","toString","filename","errmsg","err","MongoRuntimeError","code","handleStartOption","files_id","floor","$gte","find","withReadPreference","ceil","handleEndOption","once","MongoInvalidArgumentError","limit"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/gridfs/download.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GridFSBucketReadStream = void 0;\nconst stream_1 = require(\"stream\");\nconst error_1 = require(\"../error\");\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\nclass GridFSBucketReadStream extends stream_1.Readable {\n    /** @internal\n     * @param chunks - Handle for chunks collection\n     * @param files - Handle for files collection\n     * @param readPreference - The read preference to use\n     * @param filter - The filter to use to find the file document\n     */\n    constructor(chunks, files, readPreference, filter, options) {\n        super();\n        this.s = {\n            bytesToTrim: 0,\n            bytesToSkip: 0,\n            bytesRead: 0,\n            chunks,\n            expected: 0,\n            files,\n            filter,\n            init: false,\n            expectedEnd: 0,\n            options: {\n                start: 0,\n                end: 0,\n                ...options\n            },\n            readPreference\n        };\n    }\n    /**\n     * Reads from the cursor and pushes to the stream.\n     * Private Impl, do not call directly\n     * @internal\n     */\n    _read() {\n        if (this.destroyed)\n            return;\n        waitForFile(this, () => doRead(this));\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param start - 0-based offset in bytes to start streaming from\n     */\n    start(start = 0) {\n        throwIfInitialized(this);\n        this.s.options.start = start;\n        return this;\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param end - Offset in bytes to stop reading at\n     */\n    end(end = 0) {\n        throwIfInitialized(this);\n        this.s.options.end = end;\n        return this;\n    }\n    /**\n     * Marks this stream as aborted (will never push another `data` event)\n     * and kills the underlying cursor. Will emit the 'end' event, and then\n     * the 'close' event once the cursor is successfully killed.\n     *\n     * @param callback - called when the cursor is successfully closed or an error occurred.\n     */\n    abort(callback) {\n        this.push(null);\n        this.destroyed = true;\n        if (this.s.cursor) {\n            this.s.cursor.close(error => {\n                this.emit(GridFSBucketReadStream.CLOSE);\n                callback && callback(error);\n            });\n        }\n        else {\n            if (!this.s.init) {\n                // If not initialized, fire close event because we will never\n                // get a cursor\n                this.emit(GridFSBucketReadStream.CLOSE);\n            }\n            callback && callback();\n        }\n    }\n}\nexports.GridFSBucketReadStream = GridFSBucketReadStream;\n/**\n * An error occurred\n * @event\n */\nGridFSBucketReadStream.ERROR = 'error';\n/**\n * Fires when the stream loaded the file document corresponding to the provided id.\n * @event\n */\nGridFSBucketReadStream.FILE = 'file';\n/**\n * Emitted when a chunk of data is available to be consumed.\n * @event\n */\nGridFSBucketReadStream.DATA = 'data';\n/**\n * Fired when the stream is exhausted (no more data events).\n * @event\n */\nGridFSBucketReadStream.END = 'end';\n/**\n * Fired when the stream is exhausted and the underlying cursor is killed\n * @event\n */\nGridFSBucketReadStream.CLOSE = 'close';\nfunction throwIfInitialized(stream) {\n    if (stream.s.init) {\n        throw new error_1.MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\n    }\n}\nfunction doRead(stream) {\n    if (stream.destroyed)\n        return;\n    if (!stream.s.cursor)\n        return;\n    if (!stream.s.file)\n        return;\n    stream.s.cursor.next((error, doc) => {\n        if (stream.destroyed) {\n            return;\n        }\n        if (error) {\n            stream.emit(GridFSBucketReadStream.ERROR, error);\n            return;\n        }\n        if (!doc) {\n            stream.push(null);\n            process.nextTick(() => {\n                if (!stream.s.cursor)\n                    return;\n                stream.s.cursor.close(error => {\n                    if (error) {\n                        stream.emit(GridFSBucketReadStream.ERROR, error);\n                        return;\n                    }\n                    stream.emit(GridFSBucketReadStream.CLOSE);\n                });\n            });\n            return;\n        }\n        if (!stream.s.file)\n            return;\n        const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n        const expectedN = stream.s.expected++;\n        const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n        if (doc.n > expectedN) {\n            return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        if (doc.n < expectedN) {\n            return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n        if (buf.byteLength !== expectedLength) {\n            if (bytesRemaining <= 0) {\n                return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}`));\n            }\n            return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`));\n        }\n        stream.s.bytesRead += buf.byteLength;\n        if (buf.byteLength === 0) {\n            return stream.push(null);\n        }\n        let sliceStart = null;\n        let sliceEnd = null;\n        if (stream.s.bytesToSkip != null) {\n            sliceStart = stream.s.bytesToSkip;\n            stream.s.bytesToSkip = 0;\n        }\n        const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n        const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n        if (atEndOfStream && stream.s.bytesToTrim != null) {\n            sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n        }\n        else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n            sliceEnd = bytesLeftToRead;\n        }\n        if (sliceStart != null || sliceEnd != null) {\n            buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n        }\n        stream.push(buf);\n    });\n}\nfunction init(stream) {\n    const findOneOptions = {};\n    if (stream.s.readPreference) {\n        findOneOptions.readPreference = stream.s.readPreference;\n    }\n    if (stream.s.options && stream.s.options.sort) {\n        findOneOptions.sort = stream.s.options.sort;\n    }\n    if (stream.s.options && stream.s.options.skip) {\n        findOneOptions.skip = stream.s.options.skip;\n    }\n    stream.s.files.findOne(stream.s.filter, findOneOptions, (error, doc) => {\n        if (error) {\n            return stream.emit(GridFSBucketReadStream.ERROR, error);\n        }\n        if (!doc) {\n            const identifier = stream.s.filter._id\n                ? stream.s.filter._id.toString()\n                : stream.s.filter.filename;\n            const errmsg = `FileNotFound: file ${identifier} was not found`;\n            // TODO(NODE-3483)\n            const err = new error_1.MongoRuntimeError(errmsg);\n            err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n            return stream.emit(GridFSBucketReadStream.ERROR, err);\n        }\n        // If document is empty, kill the stream immediately and don't\n        // execute any reads\n        if (doc.length <= 0) {\n            stream.push(null);\n            return;\n        }\n        if (stream.destroyed) {\n            // If user destroys the stream before we have a cursor, wait\n            // until the query is done to say we're 'closed' because we can't\n            // cancel a query.\n            stream.emit(GridFSBucketReadStream.CLOSE);\n            return;\n        }\n        try {\n            stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n        }\n        catch (error) {\n            return stream.emit(GridFSBucketReadStream.ERROR, error);\n        }\n        const filter = { files_id: doc._id };\n        // Currently (MongoDB 3.4.4) skip function does not support the index,\n        // it needs to retrieve all the documents first and then skip them. (CS-25811)\n        // As work around we use $gte on the \"n\" field.\n        if (stream.s.options && stream.s.options.start != null) {\n            const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n            if (skip > 0) {\n                filter['n'] = { $gte: skip };\n            }\n        }\n        stream.s.cursor = stream.s.chunks.find(filter).sort({ n: 1 });\n        if (stream.s.readPreference) {\n            stream.s.cursor.withReadPreference(stream.s.readPreference);\n        }\n        stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n        stream.s.file = doc;\n        try {\n            stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n        }\n        catch (error) {\n            return stream.emit(GridFSBucketReadStream.ERROR, error);\n        }\n        stream.emit(GridFSBucketReadStream.FILE, doc);\n    });\n}\nfunction waitForFile(stream, callback) {\n    if (stream.s.file) {\n        return callback();\n    }\n    if (!stream.s.init) {\n        init(stream);\n        stream.s.init = true;\n    }\n    stream.once('file', () => {\n        callback();\n    });\n}\nfunction handleStartOption(stream, doc, options) {\n    if (options && options.start != null) {\n        if (options.start > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n        }\n        if (options.end != null && options.end < options.start) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be greater than stream end (${options.end})`);\n        }\n        stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n        stream.s.expected = Math.floor(options.start / doc.chunkSize);\n        return options.start - stream.s.bytesRead;\n    }\n    throw new error_1.MongoInvalidArgumentError('Start option must be defined');\n}\nfunction handleEndOption(stream, doc, cursor, options) {\n    if (options && options.end != null) {\n        if (options.end > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start == null || options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n        }\n        const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n        cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n        stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n        return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n    }\n    throw new error_1.MongoInvalidArgumentError('End option must be defined');\n}\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,sBAAR,GAAiC,KAAK,CAAtC;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,sBAAN,SAAqCC,QAAQ,CAACG,QAA9C,CAAuD;EACnD;AACJ;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,MAAD,EAASC,KAAT,EAAgBC,cAAhB,EAAgCC,MAAhC,EAAwCC,OAAxC,EAAiD;IACxD;IACA,KAAKC,CAAL,GAAS;MACLC,WAAW,EAAE,CADR;MAELC,WAAW,EAAE,CAFR;MAGLC,SAAS,EAAE,CAHN;MAILR,MAJK;MAKLS,QAAQ,EAAE,CALL;MAMLR,KANK;MAOLE,MAPK;MAQLO,IAAI,EAAE,KARD;MASLC,WAAW,EAAE,CATR;MAULP,OAAO,EAAE;QACLQ,KAAK,EAAE,CADF;QAELC,GAAG,EAAE,CAFA;QAGL,GAAGT;MAHE,CAVJ;MAeLF;IAfK,CAAT;EAiBH;EACD;AACJ;AACA;AACA;AACA;;;EACIY,KAAK,GAAG;IACJ,IAAI,KAAKC,SAAT,EACI;IACJC,WAAW,CAAC,IAAD,EAAO,MAAMC,MAAM,CAAC,IAAD,CAAnB,CAAX;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIL,KAAK,CAACA,KAAK,GAAG,CAAT,EAAY;IACbM,kBAAkB,CAAC,IAAD,CAAlB;IACA,KAAKb,CAAL,CAAOD,OAAP,CAAeQ,KAAf,GAAuBA,KAAvB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIC,GAAG,CAACA,GAAG,GAAG,CAAP,EAAU;IACTK,kBAAkB,CAAC,IAAD,CAAlB;IACA,KAAKb,CAAL,CAAOD,OAAP,CAAeS,GAAf,GAAqBA,GAArB;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIM,KAAK,CAACC,QAAD,EAAW;IACZ,KAAKC,IAAL,CAAU,IAAV;IACA,KAAKN,SAAL,GAAiB,IAAjB;;IACA,IAAI,KAAKV,CAAL,CAAOiB,MAAX,EAAmB;MACf,KAAKjB,CAAL,CAAOiB,MAAP,CAAcC,KAAd,CAAoBC,KAAK,IAAI;QACzB,KAAKC,IAAL,CAAU/B,sBAAsB,CAACgC,KAAjC;QACAN,QAAQ,IAAIA,QAAQ,CAACI,KAAD,CAApB;MACH,CAHD;IAIH,CALD,MAMK;MACD,IAAI,CAAC,KAAKnB,CAAL,CAAOK,IAAZ,EAAkB;QACd;QACA;QACA,KAAKe,IAAL,CAAU/B,sBAAsB,CAACgC,KAAjC;MACH;;MACDN,QAAQ,IAAIA,QAAQ,EAApB;IACH;EACJ;;AArFkD;;AAuFvD5B,OAAO,CAACE,sBAAR,GAAiCA,sBAAjC;AACA;AACA;AACA;AACA;;AACAA,sBAAsB,CAACiC,KAAvB,GAA+B,OAA/B;AACA;AACA;AACA;AACA;;AACAjC,sBAAsB,CAACkC,IAAvB,GAA8B,MAA9B;AACA;AACA;AACA;AACA;;AACAlC,sBAAsB,CAACmC,IAAvB,GAA8B,MAA9B;AACA;AACA;AACA;AACA;;AACAnC,sBAAsB,CAACoC,GAAvB,GAA6B,KAA7B;AACA;AACA;AACA;AACA;;AACApC,sBAAsB,CAACgC,KAAvB,GAA+B,OAA/B;;AACA,SAASR,kBAAT,CAA4Ba,MAA5B,EAAoC;EAChC,IAAIA,MAAM,CAAC1B,CAAP,CAASK,IAAb,EAAmB;IACf,MAAM,IAAIb,OAAO,CAACmC,sBAAZ,CAAmC,2DAAnC,CAAN;EACH;AACJ;;AACD,SAASf,MAAT,CAAgBc,MAAhB,EAAwB;EACpB,IAAIA,MAAM,CAAChB,SAAX,EACI;EACJ,IAAI,CAACgB,MAAM,CAAC1B,CAAP,CAASiB,MAAd,EACI;EACJ,IAAI,CAACS,MAAM,CAAC1B,CAAP,CAAS4B,IAAd,EACI;EACJF,MAAM,CAAC1B,CAAP,CAASiB,MAAT,CAAgBY,IAAhB,CAAqB,CAACV,KAAD,EAAQW,GAAR,KAAgB;IACjC,IAAIJ,MAAM,CAAChB,SAAX,EAAsB;MAClB;IACH;;IACD,IAAIS,KAAJ,EAAW;MACPO,MAAM,CAACN,IAAP,CAAY/B,sBAAsB,CAACiC,KAAnC,EAA0CH,KAA1C;MACA;IACH;;IACD,IAAI,CAACW,GAAL,EAAU;MACNJ,MAAM,CAACV,IAAP,CAAY,IAAZ;MACAe,OAAO,CAACC,QAAR,CAAiB,MAAM;QACnB,IAAI,CAACN,MAAM,CAAC1B,CAAP,CAASiB,MAAd,EACI;QACJS,MAAM,CAAC1B,CAAP,CAASiB,MAAT,CAAgBC,KAAhB,CAAsBC,KAAK,IAAI;UAC3B,IAAIA,KAAJ,EAAW;YACPO,MAAM,CAACN,IAAP,CAAY/B,sBAAsB,CAACiC,KAAnC,EAA0CH,KAA1C;YACA;UACH;;UACDO,MAAM,CAACN,IAAP,CAAY/B,sBAAsB,CAACgC,KAAnC;QACH,CAND;MAOH,CAVD;MAWA;IACH;;IACD,IAAI,CAACK,MAAM,CAAC1B,CAAP,CAAS4B,IAAd,EACI;IACJ,MAAMK,cAAc,GAAGP,MAAM,CAAC1B,CAAP,CAAS4B,IAAT,CAAcM,MAAd,GAAuBR,MAAM,CAAC1B,CAAP,CAASG,SAAvD;IACA,MAAMgC,SAAS,GAAGT,MAAM,CAAC1B,CAAP,CAASI,QAAT,EAAlB;IACA,MAAMgC,cAAc,GAAGC,IAAI,CAACC,GAAL,CAASZ,MAAM,CAAC1B,CAAP,CAAS4B,IAAT,CAAcW,SAAvB,EAAkCN,cAAlC,CAAvB;;IACA,IAAIH,GAAG,CAACU,CAAJ,GAAQL,SAAZ,EAAuB;MACnB,OAAOT,MAAM,CAACN,IAAP,CAAY/B,sBAAsB,CAACiC,KAAnC,EAA0C,IAAI9B,OAAO,CAACiD,qBAAZ,CAAmC,qCAAoCX,GAAG,CAACU,CAAE,eAAcL,SAAU,EAArG,CAA1C,CAAP;IACH;;IACD,IAAIL,GAAG,CAACU,CAAJ,GAAQL,SAAZ,EAAuB;MACnB,OAAOT,MAAM,CAACN,IAAP,CAAY/B,sBAAsB,CAACiC,KAAnC,EAA0C,IAAI9B,OAAO,CAACiD,qBAAZ,CAAmC,iCAAgCX,GAAG,CAACU,CAAE,eAAcL,SAAU,EAAjG,CAA1C,CAAP;IACH;;IACD,IAAIO,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBd,GAAG,CAACe,IAApB,IAA4Bf,GAAG,CAACe,IAAhC,GAAuCf,GAAG,CAACe,IAAJ,CAASC,MAA1D;;IACA,IAAIJ,GAAG,CAACK,UAAJ,KAAmBX,cAAvB,EAAuC;MACnC,IAAIH,cAAc,IAAI,CAAtB,EAAyB;QACrB,OAAOP,MAAM,CAACN,IAAP,CAAY/B,sBAAsB,CAACiC,KAAnC,EAA0C,IAAI9B,OAAO,CAACiD,qBAAZ,CAAmC,iCAAgCX,GAAG,CAACU,CAAE,EAAzE,CAA1C,CAAP;MACH;;MACD,OAAOd,MAAM,CAACN,IAAP,CAAY/B,sBAAsB,CAACiC,KAAnC,EAA0C,IAAI9B,OAAO,CAACiD,qBAAZ,CAAmC,4CAA2CC,GAAG,CAACK,UAAW,eAAcX,cAAe,EAA1H,CAA1C,CAAP;IACH;;IACDV,MAAM,CAAC1B,CAAP,CAASG,SAAT,IAAsBuC,GAAG,CAACK,UAA1B;;IACA,IAAIL,GAAG,CAACK,UAAJ,KAAmB,CAAvB,EAA0B;MACtB,OAAOrB,MAAM,CAACV,IAAP,CAAY,IAAZ,CAAP;IACH;;IACD,IAAIgC,UAAU,GAAG,IAAjB;IACA,IAAIC,QAAQ,GAAG,IAAf;;IACA,IAAIvB,MAAM,CAAC1B,CAAP,CAASE,WAAT,IAAwB,IAA5B,EAAkC;MAC9B8C,UAAU,GAAGtB,MAAM,CAAC1B,CAAP,CAASE,WAAtB;MACAwB,MAAM,CAAC1B,CAAP,CAASE,WAAT,GAAuB,CAAvB;IACH;;IACD,MAAMgD,aAAa,GAAGf,SAAS,KAAKT,MAAM,CAAC1B,CAAP,CAASM,WAAT,GAAuB,CAA3D;IACA,MAAM6C,eAAe,GAAGzB,MAAM,CAAC1B,CAAP,CAASD,OAAT,CAAiBS,GAAjB,GAAuBkB,MAAM,CAAC1B,CAAP,CAASE,WAAxD;;IACA,IAAIgD,aAAa,IAAIxB,MAAM,CAAC1B,CAAP,CAASC,WAAT,IAAwB,IAA7C,EAAmD;MAC/CgD,QAAQ,GAAGvB,MAAM,CAAC1B,CAAP,CAAS4B,IAAT,CAAcW,SAAd,GAA0Bb,MAAM,CAAC1B,CAAP,CAASC,WAA9C;IACH,CAFD,MAGK,IAAIyB,MAAM,CAAC1B,CAAP,CAASD,OAAT,CAAiBS,GAAjB,IAAwB2C,eAAe,GAAGrB,GAAG,CAACe,IAAJ,CAASE,UAAvD,EAAmE;MACpEE,QAAQ,GAAGE,eAAX;IACH;;IACD,IAAIH,UAAU,IAAI,IAAd,IAAsBC,QAAQ,IAAI,IAAtC,EAA4C;MACxCP,GAAG,GAAGA,GAAG,CAACU,KAAJ,CAAUJ,UAAU,IAAI,CAAxB,EAA2BC,QAAQ,IAAIP,GAAG,CAACK,UAA3C,CAAN;IACH;;IACDrB,MAAM,CAACV,IAAP,CAAY0B,GAAZ;EACH,CA/DD;AAgEH;;AACD,SAASrC,IAAT,CAAcqB,MAAd,EAAsB;EAClB,MAAM2B,cAAc,GAAG,EAAvB;;EACA,IAAI3B,MAAM,CAAC1B,CAAP,CAASH,cAAb,EAA6B;IACzBwD,cAAc,CAACxD,cAAf,GAAgC6B,MAAM,CAAC1B,CAAP,CAASH,cAAzC;EACH;;EACD,IAAI6B,MAAM,CAAC1B,CAAP,CAASD,OAAT,IAAoB2B,MAAM,CAAC1B,CAAP,CAASD,OAAT,CAAiBuD,IAAzC,EAA+C;IAC3CD,cAAc,CAACC,IAAf,GAAsB5B,MAAM,CAAC1B,CAAP,CAASD,OAAT,CAAiBuD,IAAvC;EACH;;EACD,IAAI5B,MAAM,CAAC1B,CAAP,CAASD,OAAT,IAAoB2B,MAAM,CAAC1B,CAAP,CAASD,OAAT,CAAiBwD,IAAzC,EAA+C;IAC3CF,cAAc,CAACE,IAAf,GAAsB7B,MAAM,CAAC1B,CAAP,CAASD,OAAT,CAAiBwD,IAAvC;EACH;;EACD7B,MAAM,CAAC1B,CAAP,CAASJ,KAAT,CAAe4D,OAAf,CAAuB9B,MAAM,CAAC1B,CAAP,CAASF,MAAhC,EAAwCuD,cAAxC,EAAwD,CAAClC,KAAD,EAAQW,GAAR,KAAgB;IACpE,IAAIX,KAAJ,EAAW;MACP,OAAOO,MAAM,CAACN,IAAP,CAAY/B,sBAAsB,CAACiC,KAAnC,EAA0CH,KAA1C,CAAP;IACH;;IACD,IAAI,CAACW,GAAL,EAAU;MACN,MAAM2B,UAAU,GAAG/B,MAAM,CAAC1B,CAAP,CAASF,MAAT,CAAgB4D,GAAhB,GACbhC,MAAM,CAAC1B,CAAP,CAASF,MAAT,CAAgB4D,GAAhB,CAAoBC,QAApB,EADa,GAEbjC,MAAM,CAAC1B,CAAP,CAASF,MAAT,CAAgB8D,QAFtB;MAGA,MAAMC,MAAM,GAAI,sBAAqBJ,UAAW,gBAAhD,CAJM,CAKN;;MACA,MAAMK,GAAG,GAAG,IAAItE,OAAO,CAACuE,iBAAZ,CAA8BF,MAA9B,CAAZ;MACAC,GAAG,CAACE,IAAJ,GAAW,QAAX,CAPM,CAOe;;MACrB,OAAOtC,MAAM,CAACN,IAAP,CAAY/B,sBAAsB,CAACiC,KAAnC,EAA0CwC,GAA1C,CAAP;IACH,CAbmE,CAcpE;IACA;;;IACA,IAAIhC,GAAG,CAACI,MAAJ,IAAc,CAAlB,EAAqB;MACjBR,MAAM,CAACV,IAAP,CAAY,IAAZ;MACA;IACH;;IACD,IAAIU,MAAM,CAAChB,SAAX,EAAsB;MAClB;MACA;MACA;MACAgB,MAAM,CAACN,IAAP,CAAY/B,sBAAsB,CAACgC,KAAnC;MACA;IACH;;IACD,IAAI;MACAK,MAAM,CAAC1B,CAAP,CAASE,WAAT,GAAuB+D,iBAAiB,CAACvC,MAAD,EAASI,GAAT,EAAcJ,MAAM,CAAC1B,CAAP,CAASD,OAAvB,CAAxC;IACH,CAFD,CAGA,OAAOoB,KAAP,EAAc;MACV,OAAOO,MAAM,CAACN,IAAP,CAAY/B,sBAAsB,CAACiC,KAAnC,EAA0CH,KAA1C,CAAP;IACH;;IACD,MAAMrB,MAAM,GAAG;MAAEoE,QAAQ,EAAEpC,GAAG,CAAC4B;IAAhB,CAAf,CAjCoE,CAkCpE;IACA;IACA;;IACA,IAAIhC,MAAM,CAAC1B,CAAP,CAASD,OAAT,IAAoB2B,MAAM,CAAC1B,CAAP,CAASD,OAAT,CAAiBQ,KAAjB,IAA0B,IAAlD,EAAwD;MACpD,MAAMgD,IAAI,GAAGlB,IAAI,CAAC8B,KAAL,CAAWzC,MAAM,CAAC1B,CAAP,CAASD,OAAT,CAAiBQ,KAAjB,GAAyBuB,GAAG,CAACS,SAAxC,CAAb;;MACA,IAAIgB,IAAI,GAAG,CAAX,EAAc;QACVzD,MAAM,CAAC,GAAD,CAAN,GAAc;UAAEsE,IAAI,EAAEb;QAAR,CAAd;MACH;IACJ;;IACD7B,MAAM,CAAC1B,CAAP,CAASiB,MAAT,GAAkBS,MAAM,CAAC1B,CAAP,CAASL,MAAT,CAAgB0E,IAAhB,CAAqBvE,MAArB,EAA6BwD,IAA7B,CAAkC;MAAEd,CAAC,EAAE;IAAL,CAAlC,CAAlB;;IACA,IAAId,MAAM,CAAC1B,CAAP,CAASH,cAAb,EAA6B;MACzB6B,MAAM,CAAC1B,CAAP,CAASiB,MAAT,CAAgBqD,kBAAhB,CAAmC5C,MAAM,CAAC1B,CAAP,CAASH,cAA5C;IACH;;IACD6B,MAAM,CAAC1B,CAAP,CAASM,WAAT,GAAuB+B,IAAI,CAACkC,IAAL,CAAUzC,GAAG,CAACI,MAAJ,GAAaJ,GAAG,CAACS,SAA3B,CAAvB;IACAb,MAAM,CAAC1B,CAAP,CAAS4B,IAAT,GAAgBE,GAAhB;;IACA,IAAI;MACAJ,MAAM,CAAC1B,CAAP,CAASC,WAAT,GAAuBuE,eAAe,CAAC9C,MAAD,EAASI,GAAT,EAAcJ,MAAM,CAAC1B,CAAP,CAASiB,MAAvB,EAA+BS,MAAM,CAAC1B,CAAP,CAASD,OAAxC,CAAtC;IACH,CAFD,CAGA,OAAOoB,KAAP,EAAc;MACV,OAAOO,MAAM,CAACN,IAAP,CAAY/B,sBAAsB,CAACiC,KAAnC,EAA0CH,KAA1C,CAAP;IACH;;IACDO,MAAM,CAACN,IAAP,CAAY/B,sBAAsB,CAACkC,IAAnC,EAAyCO,GAAzC;EACH,CAxDD;AAyDH;;AACD,SAASnB,WAAT,CAAqBe,MAArB,EAA6BX,QAA7B,EAAuC;EACnC,IAAIW,MAAM,CAAC1B,CAAP,CAAS4B,IAAb,EAAmB;IACf,OAAOb,QAAQ,EAAf;EACH;;EACD,IAAI,CAACW,MAAM,CAAC1B,CAAP,CAASK,IAAd,EAAoB;IAChBA,IAAI,CAACqB,MAAD,CAAJ;IACAA,MAAM,CAAC1B,CAAP,CAASK,IAAT,GAAgB,IAAhB;EACH;;EACDqB,MAAM,CAAC+C,IAAP,CAAY,MAAZ,EAAoB,MAAM;IACtB1D,QAAQ;EACX,CAFD;AAGH;;AACD,SAASkD,iBAAT,CAA2BvC,MAA3B,EAAmCI,GAAnC,EAAwC/B,OAAxC,EAAiD;EAC7C,IAAIA,OAAO,IAAIA,OAAO,CAACQ,KAAR,IAAiB,IAAhC,EAAsC;IAClC,IAAIR,OAAO,CAACQ,KAAR,GAAgBuB,GAAG,CAACI,MAAxB,EAAgC;MAC5B,MAAM,IAAI1C,OAAO,CAACkF,yBAAZ,CAAuC,iBAAgB3E,OAAO,CAACQ,KAAM,mDAAkDuB,GAAG,CAACI,MAAO,GAAlI,CAAN;IACH;;IACD,IAAInC,OAAO,CAACQ,KAAR,GAAgB,CAApB,EAAuB;MACnB,MAAM,IAAIf,OAAO,CAACkF,yBAAZ,CAAuC,iBAAgB3E,OAAO,CAACQ,KAAM,wBAArE,CAAN;IACH;;IACD,IAAIR,OAAO,CAACS,GAAR,IAAe,IAAf,IAAuBT,OAAO,CAACS,GAAR,GAAcT,OAAO,CAACQ,KAAjD,EAAwD;MACpD,MAAM,IAAIf,OAAO,CAACkF,yBAAZ,CAAuC,iBAAgB3E,OAAO,CAACQ,KAAM,0CAAyCR,OAAO,CAACS,GAAI,GAA1H,CAAN;IACH;;IACDkB,MAAM,CAAC1B,CAAP,CAASG,SAAT,GAAqBkC,IAAI,CAAC8B,KAAL,CAAWpE,OAAO,CAACQ,KAAR,GAAgBuB,GAAG,CAACS,SAA/B,IAA4CT,GAAG,CAACS,SAArE;IACAb,MAAM,CAAC1B,CAAP,CAASI,QAAT,GAAoBiC,IAAI,CAAC8B,KAAL,CAAWpE,OAAO,CAACQ,KAAR,GAAgBuB,GAAG,CAACS,SAA/B,CAApB;IACA,OAAOxC,OAAO,CAACQ,KAAR,GAAgBmB,MAAM,CAAC1B,CAAP,CAASG,SAAhC;EACH;;EACD,MAAM,IAAIX,OAAO,CAACkF,yBAAZ,CAAsC,8BAAtC,CAAN;AACH;;AACD,SAASF,eAAT,CAAyB9C,MAAzB,EAAiCI,GAAjC,EAAsCb,MAAtC,EAA8ClB,OAA9C,EAAuD;EACnD,IAAIA,OAAO,IAAIA,OAAO,CAACS,GAAR,IAAe,IAA9B,EAAoC;IAChC,IAAIT,OAAO,CAACS,GAAR,GAAcsB,GAAG,CAACI,MAAtB,EAA8B;MAC1B,MAAM,IAAI1C,OAAO,CAACkF,yBAAZ,CAAuC,eAAc3E,OAAO,CAACS,GAAI,mDAAkDsB,GAAG,CAACI,MAAO,GAA9H,CAAN;IACH;;IACD,IAAInC,OAAO,CAACQ,KAAR,IAAiB,IAAjB,IAAyBR,OAAO,CAACQ,KAAR,GAAgB,CAA7C,EAAgD;MAC5C,MAAM,IAAIf,OAAO,CAACkF,yBAAZ,CAAuC,eAAc3E,OAAO,CAACS,GAAI,wBAAjE,CAAN;IACH;;IACD,MAAMD,KAAK,GAAGR,OAAO,CAACQ,KAAR,IAAiB,IAAjB,GAAwB8B,IAAI,CAAC8B,KAAL,CAAWpE,OAAO,CAACQ,KAAR,GAAgBuB,GAAG,CAACS,SAA/B,CAAxB,GAAoE,CAAlF;IACAtB,MAAM,CAAC0D,KAAP,CAAatC,IAAI,CAACkC,IAAL,CAAUxE,OAAO,CAACS,GAAR,GAAcsB,GAAG,CAACS,SAA5B,IAAyChC,KAAtD;IACAmB,MAAM,CAAC1B,CAAP,CAASM,WAAT,GAAuB+B,IAAI,CAACkC,IAAL,CAAUxE,OAAO,CAACS,GAAR,GAAcsB,GAAG,CAACS,SAA5B,CAAvB;IACA,OAAOF,IAAI,CAACkC,IAAL,CAAUxE,OAAO,CAACS,GAAR,GAAcsB,GAAG,CAACS,SAA5B,IAAyCT,GAAG,CAACS,SAA7C,GAAyDxC,OAAO,CAACS,GAAxE;EACH;;EACD,MAAM,IAAIhB,OAAO,CAACkF,yBAAZ,CAAsC,4BAAtC,CAAN;AACH"},"metadata":{},"sourceType":"script"}