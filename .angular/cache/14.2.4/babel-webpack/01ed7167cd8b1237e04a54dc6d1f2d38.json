{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._advanceClusterTime = exports.clearAndRemoveTimerFrom = exports.drainTimerQueue = exports.ServerType = exports.TopologyType = exports.STATE_CONNECTED = exports.STATE_CONNECTING = exports.STATE_CLOSED = exports.STATE_CLOSING = void 0; // shared state names\n\nexports.STATE_CLOSING = 'closing';\nexports.STATE_CLOSED = 'closed';\nexports.STATE_CONNECTING = 'connecting';\nexports.STATE_CONNECTED = 'connected';\n/**\n * An enumeration of topology types we know about\n * @public\n */\n\nexports.TopologyType = Object.freeze({\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown',\n  LoadBalanced: 'LoadBalanced'\n});\n/**\n * An enumeration of server types we know about\n * @public\n */\n\nexports.ServerType = Object.freeze({\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown',\n  LoadBalancer: 'LoadBalancer'\n});\n/** @internal */\n\nfunction drainTimerQueue(queue) {\n  queue.forEach(clearTimeout);\n  queue.clear();\n}\n\nexports.drainTimerQueue = drainTimerQueue;\n/** @internal */\n\nfunction clearAndRemoveTimerFrom(timer, timers) {\n  clearTimeout(timer);\n  return timers.delete(timer);\n}\n\nexports.clearAndRemoveTimerFrom = clearAndRemoveTimerFrom;\n/** Shared function to determine clusterTime for a given topology or session */\n\nfunction _advanceClusterTime(entity, $clusterTime) {\n  if (entity.clusterTime == null) {\n    entity.clusterTime = $clusterTime;\n  } else {\n    if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\n      entity.clusterTime = $clusterTime;\n    }\n  }\n}\n\nexports._advanceClusterTime = _advanceClusterTime;","map":{"version":3,"names":["Object","defineProperty","exports","value","_advanceClusterTime","clearAndRemoveTimerFrom","drainTimerQueue","ServerType","TopologyType","STATE_CONNECTED","STATE_CONNECTING","STATE_CLOSED","STATE_CLOSING","freeze","Single","ReplicaSetNoPrimary","ReplicaSetWithPrimary","Sharded","Unknown","LoadBalanced","Standalone","Mongos","PossiblePrimary","RSPrimary","RSSecondary","RSArbiter","RSOther","RSGhost","LoadBalancer","queue","forEach","clearTimeout","clear","timer","timers","delete","entity","$clusterTime","clusterTime","greaterThan"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/sdam/common.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._advanceClusterTime = exports.clearAndRemoveTimerFrom = exports.drainTimerQueue = exports.ServerType = exports.TopologyType = exports.STATE_CONNECTED = exports.STATE_CONNECTING = exports.STATE_CLOSED = exports.STATE_CLOSING = void 0;\n// shared state names\nexports.STATE_CLOSING = 'closing';\nexports.STATE_CLOSED = 'closed';\nexports.STATE_CONNECTING = 'connecting';\nexports.STATE_CONNECTED = 'connected';\n/**\n * An enumeration of topology types we know about\n * @public\n */\nexports.TopologyType = Object.freeze({\n    Single: 'Single',\n    ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n    ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n    Sharded: 'Sharded',\n    Unknown: 'Unknown',\n    LoadBalanced: 'LoadBalanced'\n});\n/**\n * An enumeration of server types we know about\n * @public\n */\nexports.ServerType = Object.freeze({\n    Standalone: 'Standalone',\n    Mongos: 'Mongos',\n    PossiblePrimary: 'PossiblePrimary',\n    RSPrimary: 'RSPrimary',\n    RSSecondary: 'RSSecondary',\n    RSArbiter: 'RSArbiter',\n    RSOther: 'RSOther',\n    RSGhost: 'RSGhost',\n    Unknown: 'Unknown',\n    LoadBalancer: 'LoadBalancer'\n});\n/** @internal */\nfunction drainTimerQueue(queue) {\n    queue.forEach(clearTimeout);\n    queue.clear();\n}\nexports.drainTimerQueue = drainTimerQueue;\n/** @internal */\nfunction clearAndRemoveTimerFrom(timer, timers) {\n    clearTimeout(timer);\n    return timers.delete(timer);\n}\nexports.clearAndRemoveTimerFrom = clearAndRemoveTimerFrom;\n/** Shared function to determine clusterTime for a given topology or session */\nfunction _advanceClusterTime(entity, $clusterTime) {\n    if (entity.clusterTime == null) {\n        entity.clusterTime = $clusterTime;\n    }\n    else {\n        if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\n            entity.clusterTime = $clusterTime;\n        }\n    }\n}\nexports._advanceClusterTime = _advanceClusterTime;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8BF,OAAO,CAACG,uBAAR,GAAkCH,OAAO,CAACI,eAAR,GAA0BJ,OAAO,CAACK,UAAR,GAAqBL,OAAO,CAACM,YAAR,GAAuBN,OAAO,CAACO,eAAR,GAA0BP,OAAO,CAACQ,gBAAR,GAA2BR,OAAO,CAACS,YAAR,GAAuBT,OAAO,CAACU,aAAR,GAAwB,KAAK,CAA/O,C,CACA;;AACAV,OAAO,CAACU,aAAR,GAAwB,SAAxB;AACAV,OAAO,CAACS,YAAR,GAAuB,QAAvB;AACAT,OAAO,CAACQ,gBAAR,GAA2B,YAA3B;AACAR,OAAO,CAACO,eAAR,GAA0B,WAA1B;AACA;AACA;AACA;AACA;;AACAP,OAAO,CAACM,YAAR,GAAuBR,MAAM,CAACa,MAAP,CAAc;EACjCC,MAAM,EAAE,QADyB;EAEjCC,mBAAmB,EAAE,qBAFY;EAGjCC,qBAAqB,EAAE,uBAHU;EAIjCC,OAAO,EAAE,SAJwB;EAKjCC,OAAO,EAAE,SALwB;EAMjCC,YAAY,EAAE;AANmB,CAAd,CAAvB;AAQA;AACA;AACA;AACA;;AACAjB,OAAO,CAACK,UAAR,GAAqBP,MAAM,CAACa,MAAP,CAAc;EAC/BO,UAAU,EAAE,YADmB;EAE/BC,MAAM,EAAE,QAFuB;EAG/BC,eAAe,EAAE,iBAHc;EAI/BC,SAAS,EAAE,WAJoB;EAK/BC,WAAW,EAAE,aALkB;EAM/BC,SAAS,EAAE,WANoB;EAO/BC,OAAO,EAAE,SAPsB;EAQ/BC,OAAO,EAAE,SARsB;EAS/BT,OAAO,EAAE,SATsB;EAU/BU,YAAY,EAAE;AAViB,CAAd,CAArB;AAYA;;AACA,SAAStB,eAAT,CAAyBuB,KAAzB,EAAgC;EAC5BA,KAAK,CAACC,OAAN,CAAcC,YAAd;EACAF,KAAK,CAACG,KAAN;AACH;;AACD9B,OAAO,CAACI,eAAR,GAA0BA,eAA1B;AACA;;AACA,SAASD,uBAAT,CAAiC4B,KAAjC,EAAwCC,MAAxC,EAAgD;EAC5CH,YAAY,CAACE,KAAD,CAAZ;EACA,OAAOC,MAAM,CAACC,MAAP,CAAcF,KAAd,CAAP;AACH;;AACD/B,OAAO,CAACG,uBAAR,GAAkCA,uBAAlC;AACA;;AACA,SAASD,mBAAT,CAA6BgC,MAA7B,EAAqCC,YAArC,EAAmD;EAC/C,IAAID,MAAM,CAACE,WAAP,IAAsB,IAA1B,EAAgC;IAC5BF,MAAM,CAACE,WAAP,GAAqBD,YAArB;EACH,CAFD,MAGK;IACD,IAAIA,YAAY,CAACC,WAAb,CAAyBC,WAAzB,CAAqCH,MAAM,CAACE,WAAP,CAAmBA,WAAxD,CAAJ,EAA0E;MACtEF,MAAM,CAACE,WAAP,GAAqBD,YAArB;IACH;EACJ;AACJ;;AACDnC,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B"},"metadata":{},"sourceType":"script"}