{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListCollectionsCursor = exports.ListCollectionsOperation = void 0;\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n\nconst utils_1 = require(\"../utils\");\n\nconst CONSTANTS = require(\"../constants\");\n\nconst abstract_cursor_1 = require(\"../cursor/abstract_cursor\");\n\nconst execute_operation_1 = require(\"./execute_operation\");\n\nconst LIST_COLLECTIONS_WIRE_VERSION = 3;\n/** @internal */\n\nclass ListCollectionsOperation extends command_1.CommandOperation {\n  constructor(db, filter, options) {\n    super(db, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.db = db;\n    this.filter = filter;\n    this.nameOnly = !!this.options.nameOnly;\n\n    if (typeof this.options.batchSize === 'number') {\n      this.batchSize = this.options.batchSize;\n    }\n  }\n\n  execute(server, session, callback) {\n    if (utils_1.maxWireVersion(server) < LIST_COLLECTIONS_WIRE_VERSION) {\n      let filter = this.filter;\n      const databaseName = this.db.s.namespace.db; // If we have legacy mode and have not provided a full db name filter it\n\n      if (typeof filter.name === 'string' && !new RegExp(`^${databaseName}\\\\.`).test(filter.name)) {\n        filter = Object.assign({}, filter);\n        filter.name = this.db.s.namespace.withCollection(filter.name).toString();\n      } // No filter, filter by current database\n\n\n      if (filter == null) {\n        filter = {\n          name: `/${databaseName}/`\n        };\n      } // Rewrite the filter to use $and to filter out indexes\n\n\n      if (filter.name) {\n        filter = {\n          $and: [{\n            name: filter.name\n          }, {\n            name: /^((?!\\$).)*$/\n          }]\n        };\n      } else {\n        filter = {\n          name: /^((?!\\$).)*$/\n        };\n      }\n\n      const documentTransform = doc => {\n        const matching = `${databaseName}.`;\n        const index = doc.name.indexOf(matching); // Remove database name if available\n\n        if (doc.name && index === 0) {\n          doc.name = doc.name.substr(index + matching.length);\n        }\n\n        return doc;\n      };\n\n      server.query(new utils_1.MongoDBNamespace(databaseName, CONSTANTS.SYSTEM_NAMESPACE_COLLECTION), {\n        query: filter\n      }, {\n        batchSize: this.batchSize || 1000,\n        readPreference: this.readPreference\n      }, (err, result) => {\n        if (result && result.documents && Array.isArray(result.documents)) {\n          result.documents = result.documents.map(documentTransform);\n        }\n\n        callback(err, result);\n      });\n      return;\n    }\n\n    const command = {\n      listCollections: 1,\n      filter: this.filter,\n      cursor: this.batchSize ? {\n        batchSize: this.batchSize\n      } : {},\n      nameOnly: this.nameOnly\n    };\n    return super.executeCommand(server, session, command, callback);\n  }\n\n}\n\nexports.ListCollectionsOperation = ListCollectionsOperation;\n/** @public */\n\nclass ListCollectionsCursor extends abstract_cursor_1.AbstractCursor {\n  constructor(db, filter, options) {\n    super(utils_1.getTopology(db), db.s.namespace, options);\n    this.parent = db;\n    this.filter = filter;\n    this.options = options;\n  }\n\n  clone() {\n    return new ListCollectionsCursor(this.parent, this.filter, { ...this.options,\n      ...this.cursorOptions\n    });\n  }\n  /** @internal */\n\n\n  _initialize(session, callback) {\n    const operation = new ListCollectionsOperation(this.parent, this.filter, { ...this.cursorOptions,\n      ...this.options,\n      session\n    });\n    execute_operation_1.executeOperation(utils_1.getTopology(this.parent), operation, (err, response) => {\n      if (err || response == null) return callback(err); // TODO: NODE-2882\n\n      callback(undefined, {\n        server: operation.server,\n        session,\n        response\n      });\n    });\n  }\n\n}\n\nexports.ListCollectionsCursor = ListCollectionsCursor;\noperation_1.defineAspects(ListCollectionsOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.CURSOR_CREATING]);","map":{"version":3,"names":["Object","defineProperty","exports","value","ListCollectionsCursor","ListCollectionsOperation","command_1","require","operation_1","utils_1","CONSTANTS","abstract_cursor_1","execute_operation_1","LIST_COLLECTIONS_WIRE_VERSION","CommandOperation","constructor","db","filter","options","nameOnly","batchSize","execute","server","session","callback","maxWireVersion","databaseName","s","namespace","name","RegExp","test","assign","withCollection","toString","$and","documentTransform","doc","matching","index","indexOf","substr","length","query","MongoDBNamespace","SYSTEM_NAMESPACE_COLLECTION","readPreference","err","result","documents","Array","isArray","map","command","listCollections","cursor","executeCommand","AbstractCursor","getTopology","parent","clone","cursorOptions","_initialize","operation","executeOperation","response","undefined","defineAspects","Aspect","READ_OPERATION","RETRYABLE","CURSOR_CREATING"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/operations/list_collections.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListCollectionsCursor = exports.ListCollectionsOperation = void 0;\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\nconst utils_1 = require(\"../utils\");\nconst CONSTANTS = require(\"../constants\");\nconst abstract_cursor_1 = require(\"../cursor/abstract_cursor\");\nconst execute_operation_1 = require(\"./execute_operation\");\nconst LIST_COLLECTIONS_WIRE_VERSION = 3;\n/** @internal */\nclass ListCollectionsOperation extends command_1.CommandOperation {\n    constructor(db, filter, options) {\n        super(db, options);\n        this.options = options !== null && options !== void 0 ? options : {};\n        this.db = db;\n        this.filter = filter;\n        this.nameOnly = !!this.options.nameOnly;\n        if (typeof this.options.batchSize === 'number') {\n            this.batchSize = this.options.batchSize;\n        }\n    }\n    execute(server, session, callback) {\n        if (utils_1.maxWireVersion(server) < LIST_COLLECTIONS_WIRE_VERSION) {\n            let filter = this.filter;\n            const databaseName = this.db.s.namespace.db;\n            // If we have legacy mode and have not provided a full db name filter it\n            if (typeof filter.name === 'string' && !new RegExp(`^${databaseName}\\\\.`).test(filter.name)) {\n                filter = Object.assign({}, filter);\n                filter.name = this.db.s.namespace.withCollection(filter.name).toString();\n            }\n            // No filter, filter by current database\n            if (filter == null) {\n                filter = { name: `/${databaseName}/` };\n            }\n            // Rewrite the filter to use $and to filter out indexes\n            if (filter.name) {\n                filter = { $and: [{ name: filter.name }, { name: /^((?!\\$).)*$/ }] };\n            }\n            else {\n                filter = { name: /^((?!\\$).)*$/ };\n            }\n            const documentTransform = (doc) => {\n                const matching = `${databaseName}.`;\n                const index = doc.name.indexOf(matching);\n                // Remove database name if available\n                if (doc.name && index === 0) {\n                    doc.name = doc.name.substr(index + matching.length);\n                }\n                return doc;\n            };\n            server.query(new utils_1.MongoDBNamespace(databaseName, CONSTANTS.SYSTEM_NAMESPACE_COLLECTION), { query: filter }, { batchSize: this.batchSize || 1000, readPreference: this.readPreference }, (err, result) => {\n                if (result && result.documents && Array.isArray(result.documents)) {\n                    result.documents = result.documents.map(documentTransform);\n                }\n                callback(err, result);\n            });\n            return;\n        }\n        const command = {\n            listCollections: 1,\n            filter: this.filter,\n            cursor: this.batchSize ? { batchSize: this.batchSize } : {},\n            nameOnly: this.nameOnly\n        };\n        return super.executeCommand(server, session, command, callback);\n    }\n}\nexports.ListCollectionsOperation = ListCollectionsOperation;\n/** @public */\nclass ListCollectionsCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(db, filter, options) {\n        super(utils_1.getTopology(db), db.s.namespace, options);\n        this.parent = db;\n        this.filter = filter;\n        this.options = options;\n    }\n    clone() {\n        return new ListCollectionsCursor(this.parent, this.filter, {\n            ...this.options,\n            ...this.cursorOptions\n        });\n    }\n    /** @internal */\n    _initialize(session, callback) {\n        const operation = new ListCollectionsOperation(this.parent, this.filter, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        execute_operation_1.executeOperation(utils_1.getTopology(this.parent), operation, (err, response) => {\n            if (err || response == null)\n                return callback(err);\n            // TODO: NODE-2882\n            callback(undefined, { server: operation.server, session, response });\n        });\n    }\n}\nexports.ListCollectionsCursor = ListCollectionsCursor;\noperation_1.defineAspects(ListCollectionsOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}