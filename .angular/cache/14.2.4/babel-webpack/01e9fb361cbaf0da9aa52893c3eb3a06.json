{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isResumableError = exports.isNetworkTimeoutError = exports.isSDAMUnrecoverableError = exports.isNodeShuttingDownError = exports.isRetryableError = exports.isRetryableWriteError = exports.MongoWriteConcernError = exports.MongoServerSelectionError = exports.MongoSystemError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoCompatibilityError = exports.MongoInvalidArgumentError = exports.MongoParseError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.isNetworkErrorBeforeHandshake = exports.MongoTopologyClosedError = exports.MongoCursorExhaustedError = exports.MongoServerClosedError = exports.MongoCursorInUseError = exports.MongoGridFSChunkError = exports.MongoGridFSStreamError = exports.MongoTailableCursorError = exports.MongoChangeStreamError = exports.MongoKerberosError = exports.MongoExpiredSessionError = exports.MongoTransactionError = exports.MongoNotConnectedError = exports.MongoDecompressionError = exports.MongoBatchReExecutionError = exports.MongoRuntimeError = exports.MongoAPIError = exports.MongoDriverError = exports.MongoServerError = exports.MongoError = exports.GET_MORE_RESUMABLE_CODES = exports.MONGODB_ERROR_CODES = void 0;\n/** @internal */\n\nconst kErrorLabels = Symbol('errorLabels');\n/** @internal MongoDB Error Codes */\n\nexports.MONGODB_ERROR_CODES = Object.freeze({\n  HostUnreachable: 6,\n  HostNotFound: 7,\n  NetworkTimeout: 89,\n  ShutdownInProgress: 91,\n  PrimarySteppedDown: 189,\n  ExceededTimeLimit: 262,\n  SocketException: 9001,\n  NotMaster: 10107,\n  InterruptedAtShutdown: 11600,\n  InterruptedDueToReplStateChange: 11602,\n  NotMasterNoSlaveOk: 13435,\n  NotMasterOrSecondary: 13436,\n  StaleShardVersion: 63,\n  StaleEpoch: 150,\n  StaleConfig: 13388,\n  RetryChangeStream: 234,\n  FailedToSatisfyReadPreference: 133,\n  CursorNotFound: 43,\n  LegacyNotPrimary: 10058,\n  WriteConcernFailed: 64,\n  NamespaceNotFound: 26,\n  IllegalOperation: 20,\n  MaxTimeMSExpired: 50,\n  UnknownReplWriteConcern: 79,\n  UnsatisfiableWriteConcern: 100\n}); // From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\n\nexports.GET_MORE_RESUMABLE_CODES = new Set([exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.ExceededTimeLimit, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.NotMaster, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotMasterNoSlaveOk, exports.MONGODB_ERROR_CODES.NotMasterOrSecondary, exports.MONGODB_ERROR_CODES.StaleShardVersion, exports.MONGODB_ERROR_CODES.StaleEpoch, exports.MONGODB_ERROR_CODES.StaleConfig, exports.MONGODB_ERROR_CODES.RetryChangeStream, exports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference, exports.MONGODB_ERROR_CODES.CursorNotFound]);\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error, it uses the constructor with a string argument\n */\n\nclass MongoError extends Error {\n  constructor(message) {\n    if (message instanceof Error) {\n      super(message.message);\n    } else {\n      super(message);\n    }\n  }\n\n  get name() {\n    return 'MongoError';\n  }\n  /** Legacy name for server error responses */\n\n\n  get errmsg() {\n    return this.message;\n  }\n  /**\n   * Checks the error to see if it has an error label\n   *\n   * @param label - The error label to check for\n   * @returns returns true if the error has the provided error label\n   */\n\n\n  hasErrorLabel(label) {\n    if (this[kErrorLabels] == null) {\n      return false;\n    }\n\n    return this[kErrorLabels].has(label);\n  }\n\n  addErrorLabel(label) {\n    if (this[kErrorLabels] == null) {\n      this[kErrorLabels] = new Set();\n    }\n\n    this[kErrorLabels].add(label);\n  }\n\n  get errorLabels() {\n    return this[kErrorLabels] ? Array.from(this[kErrorLabels]) : [];\n  }\n\n}\n\nexports.MongoError = MongoError;\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\n\nclass MongoServerError extends MongoError {\n  constructor(message) {\n    super(message.message || message.errmsg || message.$err || 'n/a');\n\n    if (message.errorLabels) {\n      this[kErrorLabels] = new Set(message.errorLabels);\n    }\n\n    for (const name in message) {\n      if (name !== 'errorLabels' && name !== 'errmsg' && name !== 'message') this[name] = message[name];\n    }\n  }\n\n  get name() {\n    return 'MongoServerError';\n  }\n\n}\n\nexports.MongoServerError = MongoServerError;\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\n\nclass MongoDriverError extends MongoError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoDriverError';\n  }\n\n}\n\nexports.MongoDriverError = MongoDriverError;\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\n\nclass MongoAPIError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoAPIError';\n  }\n\n}\n\nexports.MongoAPIError = MongoAPIError;\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\n\nclass MongoRuntimeError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoRuntimeError';\n  }\n\n}\n\nexports.MongoRuntimeError = MongoRuntimeError;\n/**\n * An error generated when a batch command is reexecuted after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\n\nclass MongoBatchReExecutionError extends MongoAPIError {\n  constructor(message = 'This batch has already been executed, create new batch to execute') {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoBatchReExecutionError';\n  }\n\n}\n\nexports.MongoBatchReExecutionError = MongoBatchReExecutionError;\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\n\nclass MongoDecompressionError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoDecompressionError';\n  }\n\n}\n\nexports.MongoDecompressionError = MongoDecompressionError;\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\n\nclass MongoNotConnectedError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoNotConnectedError';\n  }\n\n}\n\nexports.MongoNotConnectedError = MongoNotConnectedError;\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\n\nclass MongoTransactionError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoTransactionError';\n  }\n\n}\n\nexports.MongoTransactionError = MongoTransactionError;\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\n\nclass MongoExpiredSessionError extends MongoAPIError {\n  constructor(message = 'Cannot use a session that has ended') {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoExpiredSessionError';\n  }\n\n}\n\nexports.MongoExpiredSessionError = MongoExpiredSessionError;\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\n\nclass MongoKerberosError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoKerberosError';\n  }\n\n}\n\nexports.MongoKerberosError = MongoKerberosError;\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\n\nclass MongoChangeStreamError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoChangeStreamError';\n  }\n\n}\n\nexports.MongoChangeStreamError = MongoChangeStreamError;\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\n\nclass MongoTailableCursorError extends MongoAPIError {\n  constructor(message = 'Tailable cursor does not support this operation') {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoTailableCursorError';\n  }\n\n}\n\nexports.MongoTailableCursorError = MongoTailableCursorError;\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\n\nclass MongoGridFSStreamError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoGridFSStreamError';\n  }\n\n}\n\nexports.MongoGridFSStreamError = MongoGridFSStreamError;\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\n\nclass MongoGridFSChunkError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoGridFSChunkError';\n  }\n\n}\n\nexports.MongoGridFSChunkError = MongoGridFSChunkError;\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\n\nclass MongoCursorInUseError extends MongoAPIError {\n  constructor(message = 'Cursor is already initialized') {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoCursorInUseError';\n  }\n\n}\n\nexports.MongoCursorInUseError = MongoCursorInUseError;\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\n\nclass MongoServerClosedError extends MongoAPIError {\n  constructor(message = 'Server is closed') {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoServerClosedError';\n  }\n\n}\n\nexports.MongoServerClosedError = MongoServerClosedError;\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\n\nclass MongoCursorExhaustedError extends MongoAPIError {\n  constructor(message) {\n    super(message || 'Cursor is exhausted');\n  }\n\n  get name() {\n    return 'MongoCursorExhaustedError';\n  }\n\n}\n\nexports.MongoCursorExhaustedError = MongoCursorExhaustedError;\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\n\nclass MongoTopologyClosedError extends MongoAPIError {\n  constructor(message = 'Topology is closed') {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoTopologyClosedError';\n  }\n\n}\n\nexports.MongoTopologyClosedError = MongoTopologyClosedError;\n/** @internal */\n\nconst kBeforeHandshake = Symbol('beforeHandshake');\n\nfunction isNetworkErrorBeforeHandshake(err) {\n  return err[kBeforeHandshake] === true;\n}\n\nexports.isNetworkErrorBeforeHandshake = isNetworkErrorBeforeHandshake;\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\n\nclass MongoNetworkError extends MongoError {\n  constructor(message, options) {\n    super(message);\n\n    if (options && typeof options.beforeHandshake === 'boolean') {\n      this[kBeforeHandshake] = options.beforeHandshake;\n    }\n  }\n\n  get name() {\n    return 'MongoNetworkError';\n  }\n\n}\n\nexports.MongoNetworkError = MongoNetworkError;\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error with an instanceof check\n */\n\nclass MongoNetworkTimeoutError extends MongoNetworkError {\n  constructor(message, options) {\n    super(message, options);\n  }\n\n  get name() {\n    return 'MongoNetworkTimeoutError';\n  }\n\n}\n\nexports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\n\nclass MongoParseError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoParseError';\n  }\n\n}\n\nexports.MongoParseError = MongoParseError;\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\n\nclass MongoInvalidArgumentError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoInvalidArgumentError';\n  }\n\n}\n\nexports.MongoInvalidArgumentError = MongoInvalidArgumentError;\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\n\nclass MongoCompatibilityError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoCompatibilityError';\n  }\n\n}\n\nexports.MongoCompatibilityError = MongoCompatibilityError;\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\n\nclass MongoMissingCredentialsError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoMissingCredentialsError';\n  }\n\n}\n\nexports.MongoMissingCredentialsError = MongoMissingCredentialsError;\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\n\nclass MongoMissingDependencyError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoMissingDependencyError';\n  }\n\n}\n\nexports.MongoMissingDependencyError = MongoMissingDependencyError;\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\n\nclass MongoSystemError extends MongoError {\n  constructor(message, reason) {\n    if (reason && reason.error) {\n      super(reason.error.message || reason.error);\n    } else {\n      super(message);\n    }\n\n    if (reason) {\n      this.reason = reason;\n    }\n  }\n\n  get name() {\n    return 'MongoSystemError';\n  }\n\n}\n\nexports.MongoSystemError = MongoSystemError;\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\n\nclass MongoServerSelectionError extends MongoSystemError {\n  constructor(message, reason) {\n    super(message, reason);\n  }\n\n  get name() {\n    return 'MongoServerSelectionError';\n  }\n\n}\n\nexports.MongoServerSelectionError = MongoServerSelectionError;\n\nfunction makeWriteConcernResultObject(input) {\n  const output = Object.assign({}, input);\n\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n\n  return output;\n}\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\n\n\nclass MongoWriteConcernError extends MongoServerError {\n  constructor(message, result) {\n    if (result && Array.isArray(result.errorLabels)) {\n      message.errorLabels = result.errorLabels;\n    }\n\n    super(message);\n    this.errInfo = message.errInfo;\n\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n\n  get name() {\n    return 'MongoWriteConcernError';\n  }\n\n}\n\nexports.MongoWriteConcernError = MongoWriteConcernError; // see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\n\nconst RETRYABLE_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.NotMaster, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotMasterNoSlaveOk, exports.MONGODB_ERROR_CODES.NotMasterOrSecondary]);\nconst RETRYABLE_WRITE_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotMaster, exports.MONGODB_ERROR_CODES.NotMasterNoSlaveOk, exports.MONGODB_ERROR_CODES.NotMasterOrSecondary, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.ExceededTimeLimit]);\n\nfunction isRetryableWriteError(error) {\n  var _a, _b, _c;\n\n  if (error instanceof MongoWriteConcernError) {\n    return RETRYABLE_WRITE_ERROR_CODES.has((_c = (_b = (_a = error.result) === null || _a === void 0 ? void 0 : _a.code) !== null && _b !== void 0 ? _b : error.code) !== null && _c !== void 0 ? _c : 0);\n  }\n\n  return typeof error.code === 'number' && RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n}\n\nexports.isRetryableWriteError = isRetryableWriteError;\n/** Determines whether an error is something the driver should attempt to retry */\n\nfunction isRetryableError(error) {\n  return (// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    typeof error.code === 'number' && RETRYABLE_ERROR_CODES.has(error.code) || error instanceof MongoNetworkError || !!error.message.match(/not master/) || !!error.message.match(/node is recovering/)\n  );\n}\n\nexports.isRetryableError = isRetryableError;\nconst SDAM_RECOVERING_CODES = new Set([exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotMasterOrSecondary]);\nconst SDAM_NOTMASTER_CODES = new Set([exports.MONGODB_ERROR_CODES.NotMaster, exports.MONGODB_ERROR_CODES.NotMasterNoSlaveOk, exports.MONGODB_ERROR_CODES.LegacyNotPrimary]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.ShutdownInProgress]);\n\nfunction isRecoveringError(err) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_RECOVERING_CODES.has(err.code);\n  }\n\n  return /not master or secondary/.test(err.message) || /node is recovering/.test(err.message);\n}\n\nfunction isNotMasterError(err) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_NOTMASTER_CODES.has(err.code);\n  }\n\n  if (isRecoveringError(err)) {\n    return false;\n  }\n\n  return /not master/.test(err.message);\n}\n\nfunction isNodeShuttingDownError(err) {\n  return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\n\nexports.isNodeShuttingDownError = isNodeShuttingDownError;\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */\n\nfunction isSDAMUnrecoverableError(error) {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n\n  return isRecoveringError(error) || isNotMasterError(error);\n}\n\nexports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;\n\nfunction isNetworkTimeoutError(err) {\n  return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\n\nexports.isNetworkTimeoutError = isNetworkTimeoutError; // From spec@https://github.com/mongodb/specifications/blob/7a2e93d85935ee4b1046a8d2ad3514c657dc74fa/source/change-streams/change-streams.rst#resumable-error:\n//\n// An error is considered resumable if it meets any of the following criteria:\n// - any error encountered which is not a server error (e.g. a timeout error or network error)\n// - any server error response from a getMore command excluding those containing the error label\n//   NonRetryableChangeStreamError and those containing the following error codes:\n//   - Interrupted: 11601\n//   - CappedPositionLost: 136\n//   - CursorKilled: 237\n//\n// An error on an aggregate command is not a resumable error. Only errors on a getMore command may be considered resumable errors.\n\nfunction isResumableError(error, wireVersion) {\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  if (wireVersion != null && wireVersion >= 9) {\n    // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n    if (error && error instanceof MongoError && error.code === 43) {\n      return true;\n    }\n\n    return error instanceof MongoError && error.hasErrorLabel('ResumableChangeStreamError');\n  }\n\n  if (error && typeof error.code === 'number') {\n    return exports.GET_MORE_RESUMABLE_CODES.has(error.code);\n  }\n\n  return false;\n}\n\nexports.isResumableError = isResumableError;","map":{"version":3,"names":["Object","defineProperty","exports","value","isResumableError","isNetworkTimeoutError","isSDAMUnrecoverableError","isNodeShuttingDownError","isRetryableError","isRetryableWriteError","MongoWriteConcernError","MongoServerSelectionError","MongoSystemError","MongoMissingDependencyError","MongoMissingCredentialsError","MongoCompatibilityError","MongoInvalidArgumentError","MongoParseError","MongoNetworkTimeoutError","MongoNetworkError","isNetworkErrorBeforeHandshake","MongoTopologyClosedError","MongoCursorExhaustedError","MongoServerClosedError","MongoCursorInUseError","MongoGridFSChunkError","MongoGridFSStreamError","MongoTailableCursorError","MongoChangeStreamError","MongoKerberosError","MongoExpiredSessionError","MongoTransactionError","MongoNotConnectedError","MongoDecompressionError","MongoBatchReExecutionError","MongoRuntimeError","MongoAPIError","MongoDriverError","MongoServerError","MongoError","GET_MORE_RESUMABLE_CODES","MONGODB_ERROR_CODES","kErrorLabels","Symbol","freeze","HostUnreachable","HostNotFound","NetworkTimeout","ShutdownInProgress","PrimarySteppedDown","ExceededTimeLimit","SocketException","NotMaster","InterruptedAtShutdown","InterruptedDueToReplStateChange","NotMasterNoSlaveOk","NotMasterOrSecondary","StaleShardVersion","StaleEpoch","StaleConfig","RetryChangeStream","FailedToSatisfyReadPreference","CursorNotFound","LegacyNotPrimary","WriteConcernFailed","NamespaceNotFound","IllegalOperation","MaxTimeMSExpired","UnknownReplWriteConcern","UnsatisfiableWriteConcern","Set","Error","constructor","message","name","errmsg","hasErrorLabel","label","has","addErrorLabel","add","errorLabels","Array","from","$err","kBeforeHandshake","err","options","beforeHandshake","reason","error","makeWriteConcernResultObject","input","output","assign","ok","code","codeName","result","isArray","errInfo","RETRYABLE_ERROR_CODES","RETRYABLE_WRITE_ERROR_CODES","_a","_b","_c","match","SDAM_RECOVERING_CODES","SDAM_NOTMASTER_CODES","SDAM_NODE_SHUTTING_DOWN_ERROR_CODES","isRecoveringError","test","isNotMasterError","wireVersion"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/error.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isResumableError = exports.isNetworkTimeoutError = exports.isSDAMUnrecoverableError = exports.isNodeShuttingDownError = exports.isRetryableError = exports.isRetryableWriteError = exports.MongoWriteConcernError = exports.MongoServerSelectionError = exports.MongoSystemError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoCompatibilityError = exports.MongoInvalidArgumentError = exports.MongoParseError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.isNetworkErrorBeforeHandshake = exports.MongoTopologyClosedError = exports.MongoCursorExhaustedError = exports.MongoServerClosedError = exports.MongoCursorInUseError = exports.MongoGridFSChunkError = exports.MongoGridFSStreamError = exports.MongoTailableCursorError = exports.MongoChangeStreamError = exports.MongoKerberosError = exports.MongoExpiredSessionError = exports.MongoTransactionError = exports.MongoNotConnectedError = exports.MongoDecompressionError = exports.MongoBatchReExecutionError = exports.MongoRuntimeError = exports.MongoAPIError = exports.MongoDriverError = exports.MongoServerError = exports.MongoError = exports.GET_MORE_RESUMABLE_CODES = exports.MONGODB_ERROR_CODES = void 0;\n/** @internal */\nconst kErrorLabels = Symbol('errorLabels');\n/** @internal MongoDB Error Codes */\nexports.MONGODB_ERROR_CODES = Object.freeze({\n    HostUnreachable: 6,\n    HostNotFound: 7,\n    NetworkTimeout: 89,\n    ShutdownInProgress: 91,\n    PrimarySteppedDown: 189,\n    ExceededTimeLimit: 262,\n    SocketException: 9001,\n    NotMaster: 10107,\n    InterruptedAtShutdown: 11600,\n    InterruptedDueToReplStateChange: 11602,\n    NotMasterNoSlaveOk: 13435,\n    NotMasterOrSecondary: 13436,\n    StaleShardVersion: 63,\n    StaleEpoch: 150,\n    StaleConfig: 13388,\n    RetryChangeStream: 234,\n    FailedToSatisfyReadPreference: 133,\n    CursorNotFound: 43,\n    LegacyNotPrimary: 10058,\n    WriteConcernFailed: 64,\n    NamespaceNotFound: 26,\n    IllegalOperation: 20,\n    MaxTimeMSExpired: 50,\n    UnknownReplWriteConcern: 79,\n    UnsatisfiableWriteConcern: 100\n});\n// From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\nexports.GET_MORE_RESUMABLE_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.ExceededTimeLimit,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.NotMaster,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotMasterNoSlaveOk,\n    exports.MONGODB_ERROR_CODES.NotMasterOrSecondary,\n    exports.MONGODB_ERROR_CODES.StaleShardVersion,\n    exports.MONGODB_ERROR_CODES.StaleEpoch,\n    exports.MONGODB_ERROR_CODES.StaleConfig,\n    exports.MONGODB_ERROR_CODES.RetryChangeStream,\n    exports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference,\n    exports.MONGODB_ERROR_CODES.CursorNotFound\n]);\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error, it uses the constructor with a string argument\n */\nclass MongoError extends Error {\n    constructor(message) {\n        if (message instanceof Error) {\n            super(message.message);\n        }\n        else {\n            super(message);\n        }\n    }\n    get name() {\n        return 'MongoError';\n    }\n    /** Legacy name for server error responses */\n    get errmsg() {\n        return this.message;\n    }\n    /**\n     * Checks the error to see if it has an error label\n     *\n     * @param label - The error label to check for\n     * @returns returns true if the error has the provided error label\n     */\n    hasErrorLabel(label) {\n        if (this[kErrorLabels] == null) {\n            return false;\n        }\n        return this[kErrorLabels].has(label);\n    }\n    addErrorLabel(label) {\n        if (this[kErrorLabels] == null) {\n            this[kErrorLabels] = new Set();\n        }\n        this[kErrorLabels].add(label);\n    }\n    get errorLabels() {\n        return this[kErrorLabels] ? Array.from(this[kErrorLabels]) : [];\n    }\n}\nexports.MongoError = MongoError;\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\nclass MongoServerError extends MongoError {\n    constructor(message) {\n        super(message.message || message.errmsg || message.$err || 'n/a');\n        if (message.errorLabels) {\n            this[kErrorLabels] = new Set(message.errorLabels);\n        }\n        for (const name in message) {\n            if (name !== 'errorLabels' && name !== 'errmsg' && name !== 'message')\n                this[name] = message[name];\n        }\n    }\n    get name() {\n        return 'MongoServerError';\n    }\n}\nexports.MongoServerError = MongoServerError;\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\nclass MongoDriverError extends MongoError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoDriverError';\n    }\n}\nexports.MongoDriverError = MongoDriverError;\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\nclass MongoAPIError extends MongoDriverError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoAPIError';\n    }\n}\nexports.MongoAPIError = MongoAPIError;\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\nclass MongoRuntimeError extends MongoDriverError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoRuntimeError';\n    }\n}\nexports.MongoRuntimeError = MongoRuntimeError;\n/**\n * An error generated when a batch command is reexecuted after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\nclass MongoBatchReExecutionError extends MongoAPIError {\n    constructor(message = 'This batch has already been executed, create new batch to execute') {\n        super(message);\n    }\n    get name() {\n        return 'MongoBatchReExecutionError';\n    }\n}\nexports.MongoBatchReExecutionError = MongoBatchReExecutionError;\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\nclass MongoDecompressionError extends MongoRuntimeError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoDecompressionError';\n    }\n}\nexports.MongoDecompressionError = MongoDecompressionError;\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\nclass MongoNotConnectedError extends MongoAPIError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoNotConnectedError';\n    }\n}\nexports.MongoNotConnectedError = MongoNotConnectedError;\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\nclass MongoTransactionError extends MongoAPIError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoTransactionError';\n    }\n}\nexports.MongoTransactionError = MongoTransactionError;\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\nclass MongoExpiredSessionError extends MongoAPIError {\n    constructor(message = 'Cannot use a session that has ended') {\n        super(message);\n    }\n    get name() {\n        return 'MongoExpiredSessionError';\n    }\n}\nexports.MongoExpiredSessionError = MongoExpiredSessionError;\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\nclass MongoKerberosError extends MongoRuntimeError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoKerberosError';\n    }\n}\nexports.MongoKerberosError = MongoKerberosError;\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoChangeStreamError extends MongoRuntimeError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoChangeStreamError';\n    }\n}\nexports.MongoChangeStreamError = MongoChangeStreamError;\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\nclass MongoTailableCursorError extends MongoAPIError {\n    constructor(message = 'Tailable cursor does not support this operation') {\n        super(message);\n    }\n    get name() {\n        return 'MongoTailableCursorError';\n    }\n}\nexports.MongoTailableCursorError = MongoTailableCursorError;\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSStreamError extends MongoRuntimeError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoGridFSStreamError';\n    }\n}\nexports.MongoGridFSStreamError = MongoGridFSStreamError;\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSChunkError extends MongoRuntimeError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoGridFSChunkError';\n    }\n}\nexports.MongoGridFSChunkError = MongoGridFSChunkError;\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\nclass MongoCursorInUseError extends MongoAPIError {\n    constructor(message = 'Cursor is already initialized') {\n        super(message);\n    }\n    get name() {\n        return 'MongoCursorInUseError';\n    }\n}\nexports.MongoCursorInUseError = MongoCursorInUseError;\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\nclass MongoServerClosedError extends MongoAPIError {\n    constructor(message = 'Server is closed') {\n        super(message);\n    }\n    get name() {\n        return 'MongoServerClosedError';\n    }\n}\nexports.MongoServerClosedError = MongoServerClosedError;\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\nclass MongoCursorExhaustedError extends MongoAPIError {\n    constructor(message) {\n        super(message || 'Cursor is exhausted');\n    }\n    get name() {\n        return 'MongoCursorExhaustedError';\n    }\n}\nexports.MongoCursorExhaustedError = MongoCursorExhaustedError;\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\nclass MongoTopologyClosedError extends MongoAPIError {\n    constructor(message = 'Topology is closed') {\n        super(message);\n    }\n    get name() {\n        return 'MongoTopologyClosedError';\n    }\n}\nexports.MongoTopologyClosedError = MongoTopologyClosedError;\n/** @internal */\nconst kBeforeHandshake = Symbol('beforeHandshake');\nfunction isNetworkErrorBeforeHandshake(err) {\n    return err[kBeforeHandshake] === true;\n}\nexports.isNetworkErrorBeforeHandshake = isNetworkErrorBeforeHandshake;\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\nclass MongoNetworkError extends MongoError {\n    constructor(message, options) {\n        super(message);\n        if (options && typeof options.beforeHandshake === 'boolean') {\n            this[kBeforeHandshake] = options.beforeHandshake;\n        }\n    }\n    get name() {\n        return 'MongoNetworkError';\n    }\n}\nexports.MongoNetworkError = MongoNetworkError;\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error with an instanceof check\n */\nclass MongoNetworkTimeoutError extends MongoNetworkError {\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoNetworkTimeoutError';\n    }\n}\nexports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\nclass MongoParseError extends MongoDriverError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoParseError';\n    }\n}\nexports.MongoParseError = MongoParseError;\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\nclass MongoInvalidArgumentError extends MongoAPIError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoInvalidArgumentError';\n    }\n}\nexports.MongoInvalidArgumentError = MongoInvalidArgumentError;\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\nclass MongoCompatibilityError extends MongoAPIError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoCompatibilityError';\n    }\n}\nexports.MongoCompatibilityError = MongoCompatibilityError;\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\nclass MongoMissingCredentialsError extends MongoAPIError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoMissingCredentialsError';\n    }\n}\nexports.MongoMissingCredentialsError = MongoMissingCredentialsError;\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\nclass MongoMissingDependencyError extends MongoAPIError {\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoMissingDependencyError';\n    }\n}\nexports.MongoMissingDependencyError = MongoMissingDependencyError;\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\nclass MongoSystemError extends MongoError {\n    constructor(message, reason) {\n        if (reason && reason.error) {\n            super(reason.error.message || reason.error);\n        }\n        else {\n            super(message);\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n    }\n    get name() {\n        return 'MongoSystemError';\n    }\n}\nexports.MongoSystemError = MongoSystemError;\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\nclass MongoServerSelectionError extends MongoSystemError {\n    constructor(message, reason) {\n        super(message, reason);\n    }\n    get name() {\n        return 'MongoServerSelectionError';\n    }\n}\nexports.MongoServerSelectionError = MongoServerSelectionError;\nfunction makeWriteConcernResultObject(input) {\n    const output = Object.assign({}, input);\n    if (output.ok === 0) {\n        output.ok = 1;\n        delete output.errmsg;\n        delete output.code;\n        delete output.codeName;\n    }\n    return output;\n}\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\nclass MongoWriteConcernError extends MongoServerError {\n    constructor(message, result) {\n        if (result && Array.isArray(result.errorLabels)) {\n            message.errorLabels = result.errorLabels;\n        }\n        super(message);\n        this.errInfo = message.errInfo;\n        if (result != null) {\n            this.result = makeWriteConcernResultObject(result);\n        }\n    }\n    get name() {\n        return 'MongoWriteConcernError';\n    }\n}\nexports.MongoWriteConcernError = MongoWriteConcernError;\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.NotMaster,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotMasterNoSlaveOk,\n    exports.MONGODB_ERROR_CODES.NotMasterOrSecondary\n]);\nconst RETRYABLE_WRITE_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotMaster,\n    exports.MONGODB_ERROR_CODES.NotMasterNoSlaveOk,\n    exports.MONGODB_ERROR_CODES.NotMasterOrSecondary,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.ExceededTimeLimit\n]);\nfunction isRetryableWriteError(error) {\n    var _a, _b, _c;\n    if (error instanceof MongoWriteConcernError) {\n        return RETRYABLE_WRITE_ERROR_CODES.has((_c = (_b = (_a = error.result) === null || _a === void 0 ? void 0 : _a.code) !== null && _b !== void 0 ? _b : error.code) !== null && _c !== void 0 ? _c : 0);\n    }\n    return typeof error.code === 'number' && RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n}\nexports.isRetryableWriteError = isRetryableWriteError;\n/** Determines whether an error is something the driver should attempt to retry */\nfunction isRetryableError(error) {\n    return (\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    (typeof error.code === 'number' && RETRYABLE_ERROR_CODES.has(error.code)) ||\n        error instanceof MongoNetworkError ||\n        !!error.message.match(/not master/) ||\n        !!error.message.match(/node is recovering/));\n}\nexports.isRetryableError = isRetryableError;\nconst SDAM_RECOVERING_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotMasterOrSecondary\n]);\nconst SDAM_NOTMASTER_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.NotMaster,\n    exports.MONGODB_ERROR_CODES.NotMasterNoSlaveOk,\n    exports.MONGODB_ERROR_CODES.LegacyNotPrimary\n]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress\n]);\nfunction isRecoveringError(err) {\n    if (typeof err.code === 'number') {\n        // If any error code exists, we ignore the error.message\n        return SDAM_RECOVERING_CODES.has(err.code);\n    }\n    return /not master or secondary/.test(err.message) || /node is recovering/.test(err.message);\n}\nfunction isNotMasterError(err) {\n    if (typeof err.code === 'number') {\n        // If any error code exists, we ignore the error.message\n        return SDAM_NOTMASTER_CODES.has(err.code);\n    }\n    if (isRecoveringError(err)) {\n        return false;\n    }\n    return /not master/.test(err.message);\n}\nfunction isNodeShuttingDownError(err) {\n    return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\nexports.isNodeShuttingDownError = isNodeShuttingDownError;\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */\nfunction isSDAMUnrecoverableError(error) {\n    // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n    //       close event are considered unrecoverable\n    if (error instanceof MongoParseError || error == null) {\n        return true;\n    }\n    return isRecoveringError(error) || isNotMasterError(error);\n}\nexports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;\nfunction isNetworkTimeoutError(err) {\n    return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\nexports.isNetworkTimeoutError = isNetworkTimeoutError;\n// From spec@https://github.com/mongodb/specifications/blob/7a2e93d85935ee4b1046a8d2ad3514c657dc74fa/source/change-streams/change-streams.rst#resumable-error:\n//\n// An error is considered resumable if it meets any of the following criteria:\n// - any error encountered which is not a server error (e.g. a timeout error or network error)\n// - any server error response from a getMore command excluding those containing the error label\n//   NonRetryableChangeStreamError and those containing the following error codes:\n//   - Interrupted: 11601\n//   - CappedPositionLost: 136\n//   - CursorKilled: 237\n//\n// An error on an aggregate command is not a resumable error. Only errors on a getMore command may be considered resumable errors.\nfunction isResumableError(error, wireVersion) {\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    if (wireVersion != null && wireVersion >= 9) {\n        // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n        if (error && error instanceof MongoError && error.code === 43) {\n            return true;\n        }\n        return error instanceof MongoError && error.hasErrorLabel('ResumableChangeStreamError');\n    }\n    if (error && typeof error.code === 'number') {\n        return exports.GET_MORE_RESUMABLE_CODES.has(error.code);\n    }\n    return false;\n}\nexports.isResumableError = isResumableError;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}