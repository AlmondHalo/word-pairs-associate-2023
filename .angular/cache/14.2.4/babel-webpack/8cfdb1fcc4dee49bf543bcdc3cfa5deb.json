{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChangeStreamCursor = exports.ChangeStream = void 0;\n\nconst Denque = require(\"denque\");\n\nconst error_1 = require(\"./error\");\n\nconst aggregate_1 = require(\"./operations/aggregate\");\n\nconst utils_1 = require(\"./utils\");\n\nconst mongo_client_1 = require(\"./mongo_client\");\n\nconst db_1 = require(\"./db\");\n\nconst collection_1 = require(\"./collection\");\n\nconst abstract_cursor_1 = require(\"./cursor/abstract_cursor\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst mongo_types_1 = require(\"./mongo_types\");\n/** @internal */\n\n\nconst kResumeQueue = Symbol('resumeQueue');\n/** @internal */\n\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\n\nconst kClosed = Symbol('closed');\n/** @internal */\n\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument'];\nconst CURSOR_OPTIONS = ['batchSize', 'maxAwaitTimeMS', 'collation', 'readPreference'].concat(CHANGE_STREAM_OPTIONS);\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst NO_CURSOR_ERROR = 'ChangeStream has no cursor';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\n\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  constructor(parent, pipeline = [], options = {}) {\n    super();\n    this.pipeline = pipeline;\n    this.options = options;\n\n    if (parent instanceof collection_1.Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof db_1.Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof mongo_client_1.MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n    }\n\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    }\n\n    this[kResumeQueue] = new Denque(); // Create contained Change Stream cursor\n\n    this.cursor = createChangeStreamCursor(this, options);\n    this[kClosed] = false;\n    this[kMode] = false; // Listen for any `change` listeners being added to ChangeStream\n\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        streamEvents(this, this.cursor);\n      }\n    });\n    this.on('removeListener', eventName => {\n      var _a;\n\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        (_a = this[kCursorStream]) === null || _a === void 0 ? void 0 : _a.removeAllListeners('data');\n      }\n    });\n  }\n  /** @internal */\n\n\n  get cursorStream() {\n    return this[kCursorStream];\n  }\n  /** The cached resume token that is used to resume after the most recently returned change. */\n\n\n  get resumeToken() {\n    var _a;\n\n    return (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.resumeToken;\n  }\n  /** Check if there is any document still available in the Change Stream */\n\n\n  hasNext(callback) {\n    setIsIterator(this);\n    return utils_1.maybePromise(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n        cursor.hasNext(cb);\n      });\n    });\n  }\n\n  next(callback) {\n    setIsIterator(this);\n    return utils_1.maybePromise(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n        cursor.next((error, change) => {\n          if (error) {\n            this[kResumeQueue].push(() => this.next(cb));\n            processError(this, error, cb);\n            return;\n          }\n\n          processNewChange(this, change, cb);\n        });\n      });\n    });\n  }\n  /** Is the cursor closed */\n\n\n  get closed() {\n    var _a, _b;\n\n    return this[kClosed] || ((_b = (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.closed) !== null && _b !== void 0 ? _b : false);\n  }\n  /** Close the Change Stream */\n\n\n  close(callback) {\n    this[kClosed] = true;\n    return utils_1.maybePromise(callback, cb => {\n      if (!this.cursor) {\n        return cb();\n      }\n\n      const cursor = this.cursor;\n      return cursor.close(err => {\n        endStream(this);\n        this.cursor = undefined;\n        return cb(err);\n      });\n    });\n  }\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   * @throws MongoDriverError if this.cursor is undefined\n   */\n\n\n  stream(options) {\n    this.streamOptions = options;\n    if (!this.cursor) throw new error_1.MongoChangeStreamError(NO_CURSOR_ERROR);\n    return this.cursor.stream(options);\n  }\n\n  tryNext(callback) {\n    setIsIterator(this);\n    return utils_1.maybePromise(callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n\n        return cursor.tryNext(cb);\n      });\n    });\n  }\n\n}\n\nexports.ChangeStream = ChangeStream;\n/** @event */\n\nChangeStream.RESPONSE = 'response';\n/** @event */\n\nChangeStream.MORE = 'more';\n/** @event */\n\nChangeStream.INIT = 'init';\n/** @event */\n\nChangeStream.CLOSE = 'close';\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\n\nChangeStream.CHANGE = 'change';\n/** @event */\n\nChangeStream.END = 'end';\n/** @event */\n\nChangeStream.ERROR = 'error';\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\n\nChangeStream.RESUME_TOKEN_CHANGED = 'resumeTokenChanged';\n/** @internal */\n\nclass ChangeStreamCursor extends abstract_cursor_1.AbstractCursor {\n  constructor(topology, namespace, pipeline = [], options = {}) {\n    super(topology, namespace, options);\n    this.pipeline = pipeline;\n    this.options = options;\n    this._resumeToken = null;\n    this.startAtOperationTime = options.startAtOperationTime;\n\n    if (options.startAfter) {\n      this.resumeToken = options.startAfter;\n    } else if (options.resumeAfter) {\n      this.resumeToken = options.resumeAfter;\n    }\n  }\n\n  set resumeToken(token) {\n    this._resumeToken = token;\n    this.emit(ChangeStream.RESUME_TOKEN_CHANGED, token);\n  }\n\n  get resumeToken() {\n    return this._resumeToken;\n  }\n\n  get resumeOptions() {\n    const result = {};\n\n    for (const optionName of CURSOR_OPTIONS) {\n      if (Reflect.has(this.options, optionName)) {\n        Reflect.set(result, optionName, Reflect.get(this.options, optionName));\n      }\n    }\n\n    if (this.resumeToken || this.startAtOperationTime) {\n      ['resumeAfter', 'startAfter', 'startAtOperationTime'].forEach(key => Reflect.deleteProperty(result, key));\n\n      if (this.resumeToken) {\n        const resumeKey = this.options.startAfter && !this.hasReceived ? 'startAfter' : 'resumeAfter';\n        Reflect.set(result, resumeKey, this.resumeToken);\n      } else if (this.startAtOperationTime && utils_1.maxWireVersion(this.server) >= 7) {\n        result.startAtOperationTime = this.startAtOperationTime;\n      }\n    }\n\n    return result;\n  }\n\n  cacheResumeToken(resumeToken) {\n    if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n      this.resumeToken = this.postBatchResumeToken;\n    } else {\n      this.resumeToken = resumeToken;\n    }\n\n    this.hasReceived = true;\n  }\n\n  _processBatch(batchName, response) {\n    const cursor = (response === null || response === void 0 ? void 0 : response.cursor) || {};\n\n    if (cursor.postBatchResumeToken) {\n      this.postBatchResumeToken = cursor.postBatchResumeToken;\n\n      if (cursor[batchName].length === 0) {\n        this.resumeToken = cursor.postBatchResumeToken;\n      }\n    }\n  }\n\n  clone() {\n    return new ChangeStreamCursor(this.topology, this.namespace, this.pipeline, { ...this.cursorOptions\n    });\n  }\n\n  _initialize(session, callback) {\n    const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, { ...this.cursorOptions,\n      ...this.options,\n      session\n    });\n    execute_operation_1.executeOperation(this.topology, aggregateOperation, (err, response) => {\n      if (err || response == null) {\n        return callback(err);\n      }\n\n      const server = aggregateOperation.server;\n\n      if (this.startAtOperationTime == null && this.resumeAfter == null && this.startAfter == null && utils_1.maxWireVersion(server) >= 7) {\n        this.startAtOperationTime = response.operationTime;\n      }\n\n      this._processBatch('firstBatch', response);\n\n      this.emit(ChangeStream.INIT, response);\n      this.emit(ChangeStream.RESPONSE); // TODO: NODE-2882\n\n      callback(undefined, {\n        server,\n        session,\n        response\n      });\n    });\n  }\n\n  _getMore(batchSize, callback) {\n    super._getMore(batchSize, (err, response) => {\n      if (err) {\n        return callback(err);\n      }\n\n      this._processBatch('nextBatch', response);\n\n      this.emit(ChangeStream.MORE, response);\n      this.emit(ChangeStream.RESPONSE);\n      callback(err, response);\n    });\n  }\n\n}\n\nexports.ChangeStreamCursor = ChangeStreamCursor;\nconst CHANGE_STREAM_EVENTS = [ChangeStream.RESUME_TOKEN_CHANGED, ChangeStream.END, ChangeStream.CLOSE];\n\nfunction setIsEmitter(changeStream) {\n  if (changeStream[kMode] === 'iterator') {\n    // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n    throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n  }\n\n  changeStream[kMode] = 'emitter';\n}\n\nfunction setIsIterator(changeStream) {\n  if (changeStream[kMode] === 'emitter') {\n    // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n    throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n  }\n\n  changeStream[kMode] = 'iterator';\n}\n/**\n * Create a new change stream cursor based on self's configuration\n * @internal\n */\n\n\nfunction createChangeStreamCursor(changeStream, options) {\n  const changeStreamStageOptions = {\n    fullDocument: options.fullDocument || 'default'\n  };\n  applyKnownOptions(changeStreamStageOptions, options, CHANGE_STREAM_OPTIONS);\n\n  if (changeStream.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n    changeStreamStageOptions.allChangesForCluster = true;\n  }\n\n  const pipeline = [{\n    $changeStream: changeStreamStageOptions\n  }].concat(changeStream.pipeline);\n  const cursorOptions = applyKnownOptions({}, options, CURSOR_OPTIONS);\n  const changeStreamCursor = new ChangeStreamCursor(utils_1.getTopology(changeStream.parent), changeStream.namespace, pipeline, cursorOptions);\n\n  for (const event of CHANGE_STREAM_EVENTS) {\n    changeStreamCursor.on(event, e => changeStream.emit(event, e));\n  }\n\n  if (changeStream.listenerCount(ChangeStream.CHANGE) > 0) {\n    streamEvents(changeStream, changeStreamCursor);\n  }\n\n  return changeStreamCursor;\n}\n\nfunction applyKnownOptions(target, source, optionNames) {\n  optionNames.forEach(name => {\n    if (source[name]) {\n      target[name] = source[name];\n    }\n  });\n  return target;\n} // This method performs a basic server selection loop, satisfying the requirements of\n// ChangeStream resumability until the new SDAM layer can be used.\n\n\nconst SELECTION_TIMEOUT = 30000;\n\nfunction waitForTopologyConnected(topology, options, callback) {\n  setTimeout(() => {\n    if (options && options.start == null) {\n      options.start = utils_1.now();\n    }\n\n    const start = options.start || utils_1.now();\n    const timeout = options.timeout || SELECTION_TIMEOUT;\n\n    if (topology.isConnected()) {\n      return callback();\n    }\n\n    if (utils_1.calculateDurationInMs(start) > timeout) {\n      // TODO(NODE-3497): Replace with MongoNetworkTimeoutError\n      return callback(new error_1.MongoRuntimeError('Timed out waiting for connection'));\n    }\n\n    waitForTopologyConnected(topology, options, callback);\n  }, 500); // this is an arbitrary wait time to allow SDAM to transition\n}\n\nfunction closeWithError(changeStream, error, callback) {\n  if (!callback) {\n    changeStream.emit(ChangeStream.ERROR, error);\n  }\n\n  changeStream.close(() => callback && callback(error));\n}\n\nfunction streamEvents(changeStream, cursor) {\n  setIsEmitter(changeStream);\n  const stream = changeStream[kCursorStream] || cursor.stream();\n  changeStream[kCursorStream] = stream;\n  stream.on('data', change => processNewChange(changeStream, change));\n  stream.on('error', error => processError(changeStream, error));\n}\n\nfunction endStream(changeStream) {\n  const cursorStream = changeStream[kCursorStream];\n\n  if (cursorStream) {\n    ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n    cursorStream.destroy();\n  }\n\n  changeStream[kCursorStream] = undefined;\n}\n\nfunction processNewChange(changeStream, change, callback) {\n  var _a;\n\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    if (callback) callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  } // a null change means the cursor has been notified, implicitly closing the change stream\n\n\n  if (change == null) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    return closeWithError(changeStream, new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR), callback);\n  }\n\n  if (change && !change._id) {\n    return closeWithError(changeStream, new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR), callback);\n  } // cache the resume token\n\n\n  (_a = changeStream.cursor) === null || _a === void 0 ? void 0 : _a.cacheResumeToken(change._id); // wipe the startAtOperationTime if there was one so that there won't be a conflict\n  // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n\n  changeStream.options.startAtOperationTime = undefined; // Return the change\n\n  if (!callback) return changeStream.emit(ChangeStream.CHANGE, change);\n  return callback(undefined, change);\n}\n\nfunction processError(changeStream, error, callback) {\n  const cursor = changeStream.cursor; // If the change stream has been closed explicitly, do not process error.\n\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    if (callback) callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  } // if the resume succeeds, continue with the new cursor\n\n\n  function resumeWithCursor(newCursor) {\n    changeStream.cursor = newCursor;\n    processResumeQueue(changeStream);\n  } // otherwise, raise an error and close the change stream\n\n\n  function unresumableError(err) {\n    if (!callback) {\n      changeStream.emit(ChangeStream.ERROR, err);\n    }\n\n    changeStream.close(() => processResumeQueue(changeStream, err));\n  }\n\n  if (cursor && error_1.isResumableError(error, utils_1.maxWireVersion(cursor.server))) {\n    changeStream.cursor = undefined; // stop listening to all events from old cursor\n\n    endStream(changeStream); // close internal cursor, ignore errors\n\n    cursor.close();\n    const topology = utils_1.getTopology(changeStream.parent);\n    waitForTopologyConnected(topology, {\n      readPreference: cursor.readPreference\n    }, err => {\n      // if the topology can't reconnect, close the stream\n      if (err) return unresumableError(err); // create a new cursor, preserving the old cursor's options\n\n      const newCursor = createChangeStreamCursor(changeStream, cursor.resumeOptions); // attempt to continue in emitter mode\n\n      if (!callback) return resumeWithCursor(newCursor); // attempt to continue in iterator mode\n\n      newCursor.hasNext(err => {\n        // if there's an error immediately after resuming, close the stream\n        if (err) return unresumableError(err);\n        resumeWithCursor(newCursor);\n      });\n    });\n    return;\n  } // if initial error wasn't resumable, raise an error and close the change stream\n\n\n  return closeWithError(changeStream, error, callback);\n}\n/**\n * Safely provides a cursor across resume attempts\n *\n * @param changeStream - the parent ChangeStream\n */\n\n\nfunction getCursor(changeStream, callback) {\n  if (changeStream[kClosed]) {\n    // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n    callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n    return;\n  } // if a cursor exists and it is open, return it\n\n\n  if (changeStream.cursor) {\n    callback(undefined, changeStream.cursor);\n    return;\n  } // no cursor, queue callback until topology reconnects\n\n\n  changeStream[kResumeQueue].push(callback);\n}\n/**\n * Drain the resume queue when a new has become available\n *\n * @param changeStream - the parent ChangeStream\n * @param err - error getting a new cursor\n */\n\n\nfunction processResumeQueue(changeStream, err) {\n  while (changeStream[kResumeQueue].length) {\n    const request = changeStream[kResumeQueue].pop();\n\n    if (!err) {\n      if (changeStream[kClosed]) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        request(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n        return;\n      }\n\n      if (!changeStream.cursor) {\n        request(new error_1.MongoChangeStreamError(NO_CURSOR_ERROR));\n        return;\n      }\n    }\n\n    request(err, changeStream.cursor);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","ChangeStreamCursor","ChangeStream","Denque","require","error_1","aggregate_1","utils_1","mongo_client_1","db_1","collection_1","abstract_cursor_1","execute_operation_1","mongo_types_1","kResumeQueue","Symbol","kCursorStream","kClosed","kMode","CHANGE_STREAM_OPTIONS","CURSOR_OPTIONS","concat","CHANGE_DOMAIN_TYPES","COLLECTION","DATABASE","CLUSTER","NO_RESUME_TOKEN_ERROR","NO_CURSOR_ERROR","CHANGESTREAM_CLOSED_ERROR","TypedEventEmitter","constructor","parent","pipeline","options","Collection","type","Db","MongoClient","MongoChangeStreamError","namespace","s","readPreference","cursor","createChangeStreamCursor","on","eventName","listenerCount","streamEvents","_a","removeAllListeners","cursorStream","resumeToken","hasNext","callback","setIsIterator","maybePromise","cb","getCursor","err","next","error","change","push","processError","processNewChange","closed","_b","close","endStream","undefined","stream","streamOptions","tryNext","RESPONSE","MORE","INIT","CLOSE","CHANGE","END","ERROR","RESUME_TOKEN_CHANGED","AbstractCursor","topology","_resumeToken","startAtOperationTime","startAfter","resumeAfter","token","emit","resumeOptions","result","optionName","Reflect","has","set","get","forEach","key","deleteProperty","resumeKey","hasReceived","maxWireVersion","server","cacheResumeToken","bufferedCount","postBatchResumeToken","_processBatch","batchName","response","length","clone","cursorOptions","_initialize","session","aggregateOperation","AggregateOperation","executeOperation","operationTime","_getMore","batchSize","CHANGE_STREAM_EVENTS","setIsEmitter","changeStream","MongoAPIError","changeStreamStageOptions","fullDocument","applyKnownOptions","allChangesForCluster","$changeStream","changeStreamCursor","getTopology","event","e","target","source","optionNames","name","SELECTION_TIMEOUT","waitForTopologyConnected","setTimeout","start","now","timeout","isConnected","calculateDurationInMs","MongoRuntimeError","closeWithError","destroy","_id","resumeWithCursor","newCursor","processResumeQueue","unresumableError","isResumableError","request","pop"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/change_stream.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChangeStreamCursor = exports.ChangeStream = void 0;\nconst Denque = require(\"denque\");\nconst error_1 = require(\"./error\");\nconst aggregate_1 = require(\"./operations/aggregate\");\nconst utils_1 = require(\"./utils\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst db_1 = require(\"./db\");\nconst collection_1 = require(\"./collection\");\nconst abstract_cursor_1 = require(\"./cursor/abstract_cursor\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst mongo_types_1 = require(\"./mongo_types\");\n/** @internal */\nconst kResumeQueue = Symbol('resumeQueue');\n/** @internal */\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument'];\nconst CURSOR_OPTIONS = ['batchSize', 'maxAwaitTimeMS', 'collation', 'readPreference'].concat(CHANGE_STREAM_OPTIONS);\nconst CHANGE_DOMAIN_TYPES = {\n    COLLECTION: Symbol('Collection'),\n    DATABASE: Symbol('Database'),\n    CLUSTER: Symbol('Cluster')\n};\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst NO_CURSOR_ERROR = 'ChangeStream has no cursor';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @internal\n     *\n     * @param parent - The parent object that created this change stream\n     * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n     */\n    constructor(parent, pipeline = [], options = {}) {\n        super();\n        this.pipeline = pipeline;\n        this.options = options;\n        if (parent instanceof collection_1.Collection) {\n            this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n        }\n        else if (parent instanceof db_1.Db) {\n            this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n        }\n        else if (parent instanceof mongo_client_1.MongoClient) {\n            this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n        }\n        else {\n            throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n        }\n        this.parent = parent;\n        this.namespace = parent.s.namespace;\n        if (!this.options.readPreference && parent.readPreference) {\n            this.options.readPreference = parent.readPreference;\n        }\n        this[kResumeQueue] = new Denque();\n        // Create contained Change Stream cursor\n        this.cursor = createChangeStreamCursor(this, options);\n        this[kClosed] = false;\n        this[kMode] = false;\n        // Listen for any `change` listeners being added to ChangeStream\n        this.on('newListener', eventName => {\n            if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n                streamEvents(this, this.cursor);\n            }\n        });\n        this.on('removeListener', eventName => {\n            var _a;\n            if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n                (_a = this[kCursorStream]) === null || _a === void 0 ? void 0 : _a.removeAllListeners('data');\n            }\n        });\n    }\n    /** @internal */\n    get cursorStream() {\n        return this[kCursorStream];\n    }\n    /** The cached resume token that is used to resume after the most recently returned change. */\n    get resumeToken() {\n        var _a;\n        return (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.resumeToken;\n    }\n    /** Check if there is any document still available in the Change Stream */\n    hasNext(callback) {\n        setIsIterator(this);\n        return utils_1.maybePromise(callback, cb => {\n            getCursor(this, (err, cursor) => {\n                if (err || !cursor)\n                    return cb(err); // failed to resume, raise an error\n                cursor.hasNext(cb);\n            });\n        });\n    }\n    next(callback) {\n        setIsIterator(this);\n        return utils_1.maybePromise(callback, cb => {\n            getCursor(this, (err, cursor) => {\n                if (err || !cursor)\n                    return cb(err); // failed to resume, raise an error\n                cursor.next((error, change) => {\n                    if (error) {\n                        this[kResumeQueue].push(() => this.next(cb));\n                        processError(this, error, cb);\n                        return;\n                    }\n                    processNewChange(this, change, cb);\n                });\n            });\n        });\n    }\n    /** Is the cursor closed */\n    get closed() {\n        var _a, _b;\n        return this[kClosed] || ((_b = (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.closed) !== null && _b !== void 0 ? _b : false);\n    }\n    /** Close the Change Stream */\n    close(callback) {\n        this[kClosed] = true;\n        return utils_1.maybePromise(callback, cb => {\n            if (!this.cursor) {\n                return cb();\n            }\n            const cursor = this.cursor;\n            return cursor.close(err => {\n                endStream(this);\n                this.cursor = undefined;\n                return cb(err);\n            });\n        });\n    }\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     * @throws MongoDriverError if this.cursor is undefined\n     */\n    stream(options) {\n        this.streamOptions = options;\n        if (!this.cursor)\n            throw new error_1.MongoChangeStreamError(NO_CURSOR_ERROR);\n        return this.cursor.stream(options);\n    }\n    tryNext(callback) {\n        setIsIterator(this);\n        return utils_1.maybePromise(callback, cb => {\n            getCursor(this, (err, cursor) => {\n                if (err || !cursor)\n                    return cb(err); // failed to resume, raise an error\n                return cursor.tryNext(cb);\n            });\n        });\n    }\n}\nexports.ChangeStream = ChangeStream;\n/** @event */\nChangeStream.RESPONSE = 'response';\n/** @event */\nChangeStream.MORE = 'more';\n/** @event */\nChangeStream.INIT = 'init';\n/** @event */\nChangeStream.CLOSE = 'close';\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\nChangeStream.CHANGE = 'change';\n/** @event */\nChangeStream.END = 'end';\n/** @event */\nChangeStream.ERROR = 'error';\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\nChangeStream.RESUME_TOKEN_CHANGED = 'resumeTokenChanged';\n/** @internal */\nclass ChangeStreamCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(topology, namespace, pipeline = [], options = {}) {\n        super(topology, namespace, options);\n        this.pipeline = pipeline;\n        this.options = options;\n        this._resumeToken = null;\n        this.startAtOperationTime = options.startAtOperationTime;\n        if (options.startAfter) {\n            this.resumeToken = options.startAfter;\n        }\n        else if (options.resumeAfter) {\n            this.resumeToken = options.resumeAfter;\n        }\n    }\n    set resumeToken(token) {\n        this._resumeToken = token;\n        this.emit(ChangeStream.RESUME_TOKEN_CHANGED, token);\n    }\n    get resumeToken() {\n        return this._resumeToken;\n    }\n    get resumeOptions() {\n        const result = {};\n        for (const optionName of CURSOR_OPTIONS) {\n            if (Reflect.has(this.options, optionName)) {\n                Reflect.set(result, optionName, Reflect.get(this.options, optionName));\n            }\n        }\n        if (this.resumeToken || this.startAtOperationTime) {\n            ['resumeAfter', 'startAfter', 'startAtOperationTime'].forEach(key => Reflect.deleteProperty(result, key));\n            if (this.resumeToken) {\n                const resumeKey = this.options.startAfter && !this.hasReceived ? 'startAfter' : 'resumeAfter';\n                Reflect.set(result, resumeKey, this.resumeToken);\n            }\n            else if (this.startAtOperationTime && utils_1.maxWireVersion(this.server) >= 7) {\n                result.startAtOperationTime = this.startAtOperationTime;\n            }\n        }\n        return result;\n    }\n    cacheResumeToken(resumeToken) {\n        if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n            this.resumeToken = this.postBatchResumeToken;\n        }\n        else {\n            this.resumeToken = resumeToken;\n        }\n        this.hasReceived = true;\n    }\n    _processBatch(batchName, response) {\n        const cursor = (response === null || response === void 0 ? void 0 : response.cursor) || {};\n        if (cursor.postBatchResumeToken) {\n            this.postBatchResumeToken = cursor.postBatchResumeToken;\n            if (cursor[batchName].length === 0) {\n                this.resumeToken = cursor.postBatchResumeToken;\n            }\n        }\n    }\n    clone() {\n        return new ChangeStreamCursor(this.topology, this.namespace, this.pipeline, {\n            ...this.cursorOptions\n        });\n    }\n    _initialize(session, callback) {\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        execute_operation_1.executeOperation(this.topology, aggregateOperation, (err, response) => {\n            if (err || response == null) {\n                return callback(err);\n            }\n            const server = aggregateOperation.server;\n            if (this.startAtOperationTime == null &&\n                this.resumeAfter == null &&\n                this.startAfter == null &&\n                utils_1.maxWireVersion(server) >= 7) {\n                this.startAtOperationTime = response.operationTime;\n            }\n            this._processBatch('firstBatch', response);\n            this.emit(ChangeStream.INIT, response);\n            this.emit(ChangeStream.RESPONSE);\n            // TODO: NODE-2882\n            callback(undefined, { server, session, response });\n        });\n    }\n    _getMore(batchSize, callback) {\n        super._getMore(batchSize, (err, response) => {\n            if (err) {\n                return callback(err);\n            }\n            this._processBatch('nextBatch', response);\n            this.emit(ChangeStream.MORE, response);\n            this.emit(ChangeStream.RESPONSE);\n            callback(err, response);\n        });\n    }\n}\nexports.ChangeStreamCursor = ChangeStreamCursor;\nconst CHANGE_STREAM_EVENTS = [\n    ChangeStream.RESUME_TOKEN_CHANGED,\n    ChangeStream.END,\n    ChangeStream.CLOSE\n];\nfunction setIsEmitter(changeStream) {\n    if (changeStream[kMode] === 'iterator') {\n        // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n        throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n    }\n    changeStream[kMode] = 'emitter';\n}\nfunction setIsIterator(changeStream) {\n    if (changeStream[kMode] === 'emitter') {\n        // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n        throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n    }\n    changeStream[kMode] = 'iterator';\n}\n/**\n * Create a new change stream cursor based on self's configuration\n * @internal\n */\nfunction createChangeStreamCursor(changeStream, options) {\n    const changeStreamStageOptions = { fullDocument: options.fullDocument || 'default' };\n    applyKnownOptions(changeStreamStageOptions, options, CHANGE_STREAM_OPTIONS);\n    if (changeStream.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n        changeStreamStageOptions.allChangesForCluster = true;\n    }\n    const pipeline = [{ $changeStream: changeStreamStageOptions }].concat(changeStream.pipeline);\n    const cursorOptions = applyKnownOptions({}, options, CURSOR_OPTIONS);\n    const changeStreamCursor = new ChangeStreamCursor(utils_1.getTopology(changeStream.parent), changeStream.namespace, pipeline, cursorOptions);\n    for (const event of CHANGE_STREAM_EVENTS) {\n        changeStreamCursor.on(event, e => changeStream.emit(event, e));\n    }\n    if (changeStream.listenerCount(ChangeStream.CHANGE) > 0) {\n        streamEvents(changeStream, changeStreamCursor);\n    }\n    return changeStreamCursor;\n}\nfunction applyKnownOptions(target, source, optionNames) {\n    optionNames.forEach(name => {\n        if (source[name]) {\n            target[name] = source[name];\n        }\n    });\n    return target;\n}\n// This method performs a basic server selection loop, satisfying the requirements of\n// ChangeStream resumability until the new SDAM layer can be used.\nconst SELECTION_TIMEOUT = 30000;\nfunction waitForTopologyConnected(topology, options, callback) {\n    setTimeout(() => {\n        if (options && options.start == null) {\n            options.start = utils_1.now();\n        }\n        const start = options.start || utils_1.now();\n        const timeout = options.timeout || SELECTION_TIMEOUT;\n        if (topology.isConnected()) {\n            return callback();\n        }\n        if (utils_1.calculateDurationInMs(start) > timeout) {\n            // TODO(NODE-3497): Replace with MongoNetworkTimeoutError\n            return callback(new error_1.MongoRuntimeError('Timed out waiting for connection'));\n        }\n        waitForTopologyConnected(topology, options, callback);\n    }, 500); // this is an arbitrary wait time to allow SDAM to transition\n}\nfunction closeWithError(changeStream, error, callback) {\n    if (!callback) {\n        changeStream.emit(ChangeStream.ERROR, error);\n    }\n    changeStream.close(() => callback && callback(error));\n}\nfunction streamEvents(changeStream, cursor) {\n    setIsEmitter(changeStream);\n    const stream = changeStream[kCursorStream] || cursor.stream();\n    changeStream[kCursorStream] = stream;\n    stream.on('data', change => processNewChange(changeStream, change));\n    stream.on('error', error => processError(changeStream, error));\n}\nfunction endStream(changeStream) {\n    const cursorStream = changeStream[kCursorStream];\n    if (cursorStream) {\n        ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n        cursorStream.destroy();\n    }\n    changeStream[kCursorStream] = undefined;\n}\nfunction processNewChange(changeStream, change, callback) {\n    var _a;\n    if (changeStream[kClosed]) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        if (callback)\n            callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n        return;\n    }\n    // a null change means the cursor has been notified, implicitly closing the change stream\n    if (change == null) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        return closeWithError(changeStream, new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR), callback);\n    }\n    if (change && !change._id) {\n        return closeWithError(changeStream, new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR), callback);\n    }\n    // cache the resume token\n    (_a = changeStream.cursor) === null || _a === void 0 ? void 0 : _a.cacheResumeToken(change._id);\n    // wipe the startAtOperationTime if there was one so that there won't be a conflict\n    // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n    changeStream.options.startAtOperationTime = undefined;\n    // Return the change\n    if (!callback)\n        return changeStream.emit(ChangeStream.CHANGE, change);\n    return callback(undefined, change);\n}\nfunction processError(changeStream, error, callback) {\n    const cursor = changeStream.cursor;\n    // If the change stream has been closed explicitly, do not process error.\n    if (changeStream[kClosed]) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        if (callback)\n            callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n        return;\n    }\n    // if the resume succeeds, continue with the new cursor\n    function resumeWithCursor(newCursor) {\n        changeStream.cursor = newCursor;\n        processResumeQueue(changeStream);\n    }\n    // otherwise, raise an error and close the change stream\n    function unresumableError(err) {\n        if (!callback) {\n            changeStream.emit(ChangeStream.ERROR, err);\n        }\n        changeStream.close(() => processResumeQueue(changeStream, err));\n    }\n    if (cursor && error_1.isResumableError(error, utils_1.maxWireVersion(cursor.server))) {\n        changeStream.cursor = undefined;\n        // stop listening to all events from old cursor\n        endStream(changeStream);\n        // close internal cursor, ignore errors\n        cursor.close();\n        const topology = utils_1.getTopology(changeStream.parent);\n        waitForTopologyConnected(topology, { readPreference: cursor.readPreference }, err => {\n            // if the topology can't reconnect, close the stream\n            if (err)\n                return unresumableError(err);\n            // create a new cursor, preserving the old cursor's options\n            const newCursor = createChangeStreamCursor(changeStream, cursor.resumeOptions);\n            // attempt to continue in emitter mode\n            if (!callback)\n                return resumeWithCursor(newCursor);\n            // attempt to continue in iterator mode\n            newCursor.hasNext(err => {\n                // if there's an error immediately after resuming, close the stream\n                if (err)\n                    return unresumableError(err);\n                resumeWithCursor(newCursor);\n            });\n        });\n        return;\n    }\n    // if initial error wasn't resumable, raise an error and close the change stream\n    return closeWithError(changeStream, error, callback);\n}\n/**\n * Safely provides a cursor across resume attempts\n *\n * @param changeStream - the parent ChangeStream\n */\nfunction getCursor(changeStream, callback) {\n    if (changeStream[kClosed]) {\n        // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n        callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n        return;\n    }\n    // if a cursor exists and it is open, return it\n    if (changeStream.cursor) {\n        callback(undefined, changeStream.cursor);\n        return;\n    }\n    // no cursor, queue callback until topology reconnects\n    changeStream[kResumeQueue].push(callback);\n}\n/**\n * Drain the resume queue when a new has become available\n *\n * @param changeStream - the parent ChangeStream\n * @param err - error getting a new cursor\n */\nfunction processResumeQueue(changeStream, err) {\n    while (changeStream[kResumeQueue].length) {\n        const request = changeStream[kResumeQueue].pop();\n        if (!err) {\n            if (changeStream[kClosed]) {\n                // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n                request(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n                return;\n            }\n            if (!changeStream.cursor) {\n                request(new error_1.MongoChangeStreamError(NO_CURSOR_ERROR));\n                return;\n            }\n        }\n        request(err, changeStream.cursor);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}