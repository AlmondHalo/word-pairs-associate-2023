{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnorderedBulkOperation = void 0;\n\nconst BSON = require(\"../bson\");\n\nconst common_1 = require(\"./common\");\n\nconst error_1 = require(\"../error\");\n/** @public */\n\n\nclass UnorderedBulkOperation extends common_1.BulkOperationBase {\n  constructor(collection, options) {\n    super(collection, options, false);\n  }\n\n  handleWriteError(callback, writeResult) {\n    if (this.s.batches.length) {\n      return false;\n    }\n\n    return super.handleWriteError(callback, writeResult);\n  }\n\n  addToOperationsList(batchType, document) {\n    // Get the bsonSize\n    const bsonSize = BSON.calculateObjectSize(document, {\n      checkKeys: false,\n      // Since we don't know what the user selected for BSON options here,\n      // err on the safe side, and check the size with ignoreUndefined: false.\n      ignoreUndefined: false\n    }); // Throw error if the doc is bigger than the max BSON size\n\n    if (bsonSize >= this.s.maxBsonObjectSize) {\n      // TODO(NODE-3483): Change this to MongoBSONError\n      throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n    } // Holds the current batch\n\n\n    this.s.currentBatch = undefined; // Get the right type of batch\n\n    if (batchType === common_1.BatchType.INSERT) {\n      this.s.currentBatch = this.s.currentInsertBatch;\n    } else if (batchType === common_1.BatchType.UPDATE) {\n      this.s.currentBatch = this.s.currentUpdateBatch;\n    } else if (batchType === common_1.BatchType.DELETE) {\n      this.s.currentBatch = this.s.currentRemoveBatch;\n    }\n\n    const maxKeySize = this.s.maxKeySize; // Create a new batch object if we don't have a current one\n\n    if (this.s.currentBatch == null) {\n      this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n    } // Check if we need to create a new batch\n\n\n    if ( // New batch if we exceed the max batch op size\n    this.s.currentBatch.size + 1 >= this.s.maxWriteBatchSize || // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n    // since we can't sent an empty batch\n    this.s.currentBatch.size > 0 && this.s.currentBatch.sizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes || // New batch if the new op does not have the same op type as the current batch\n    this.s.currentBatch.batchType !== batchType) {\n      // Save the batch to the execution stack\n      this.s.batches.push(this.s.currentBatch); // Create a new batch\n\n      this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n    } // We have an array of documents\n\n\n    if (Array.isArray(document)) {\n      throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n    }\n\n    this.s.currentBatch.operations.push(document);\n    this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n    this.s.currentIndex = this.s.currentIndex + 1; // Save back the current Batch to the right type\n\n    if (batchType === common_1.BatchType.INSERT) {\n      this.s.currentInsertBatch = this.s.currentBatch;\n      this.s.bulkResult.insertedIds.push({\n        index: this.s.bulkResult.insertedIds.length,\n        _id: document._id\n      });\n    } else if (batchType === common_1.BatchType.UPDATE) {\n      this.s.currentUpdateBatch = this.s.currentBatch;\n    } else if (batchType === common_1.BatchType.DELETE) {\n      this.s.currentRemoveBatch = this.s.currentBatch;\n    } // Update current batch size\n\n\n    this.s.currentBatch.size += 1;\n    this.s.currentBatch.sizeBytes += maxKeySize + bsonSize;\n    return this;\n  }\n\n}\n\nexports.UnorderedBulkOperation = UnorderedBulkOperation;","map":{"version":3,"names":["Object","defineProperty","exports","value","UnorderedBulkOperation","BSON","require","common_1","error_1","BulkOperationBase","constructor","collection","options","handleWriteError","callback","writeResult","s","batches","length","addToOperationsList","batchType","document","bsonSize","calculateObjectSize","checkKeys","ignoreUndefined","maxBsonObjectSize","MongoInvalidArgumentError","currentBatch","undefined","BatchType","INSERT","currentInsertBatch","UPDATE","currentUpdateBatch","DELETE","currentRemoveBatch","maxKeySize","Batch","currentIndex","size","maxWriteBatchSize","sizeBytes","maxBatchSizeBytes","push","Array","isArray","operations","originalIndexes","bulkResult","insertedIds","index","_id"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/bulk/unordered.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UnorderedBulkOperation = void 0;\nconst BSON = require(\"../bson\");\nconst common_1 = require(\"./common\");\nconst error_1 = require(\"../error\");\n/** @public */\nclass UnorderedBulkOperation extends common_1.BulkOperationBase {\n    constructor(collection, options) {\n        super(collection, options, false);\n    }\n    handleWriteError(callback, writeResult) {\n        if (this.s.batches.length) {\n            return false;\n        }\n        return super.handleWriteError(callback, writeResult);\n    }\n    addToOperationsList(batchType, document) {\n        // Get the bsonSize\n        const bsonSize = BSON.calculateObjectSize(document, {\n            checkKeys: false,\n            // Since we don't know what the user selected for BSON options here,\n            // err on the safe side, and check the size with ignoreUndefined: false.\n            ignoreUndefined: false\n        });\n        // Throw error if the doc is bigger than the max BSON size\n        if (bsonSize >= this.s.maxBsonObjectSize) {\n            // TODO(NODE-3483): Change this to MongoBSONError\n            throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n        }\n        // Holds the current batch\n        this.s.currentBatch = undefined;\n        // Get the right type of batch\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.currentBatch = this.s.currentInsertBatch;\n        }\n        else if (batchType === common_1.BatchType.UPDATE) {\n            this.s.currentBatch = this.s.currentUpdateBatch;\n        }\n        else if (batchType === common_1.BatchType.DELETE) {\n            this.s.currentBatch = this.s.currentRemoveBatch;\n        }\n        const maxKeySize = this.s.maxKeySize;\n        // Create a new batch object if we don't have a current one\n        if (this.s.currentBatch == null) {\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        // Check if we need to create a new batch\n        if (\n        // New batch if we exceed the max batch op size\n        this.s.currentBatch.size + 1 >= this.s.maxWriteBatchSize ||\n            // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n            // since we can't sent an empty batch\n            (this.s.currentBatch.size > 0 &&\n                this.s.currentBatch.sizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes) ||\n            // New batch if the new op does not have the same op type as the current batch\n            this.s.currentBatch.batchType !== batchType) {\n            // Save the batch to the execution stack\n            this.s.batches.push(this.s.currentBatch);\n            // Create a new batch\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        // We have an array of documents\n        if (Array.isArray(document)) {\n            throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n        }\n        this.s.currentBatch.operations.push(document);\n        this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n        this.s.currentIndex = this.s.currentIndex + 1;\n        // Save back the current Batch to the right type\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.currentInsertBatch = this.s.currentBatch;\n            this.s.bulkResult.insertedIds.push({\n                index: this.s.bulkResult.insertedIds.length,\n                _id: document._id\n            });\n        }\n        else if (batchType === common_1.BatchType.UPDATE) {\n            this.s.currentUpdateBatch = this.s.currentBatch;\n        }\n        else if (batchType === common_1.BatchType.DELETE) {\n            this.s.currentRemoveBatch = this.s.currentBatch;\n        }\n        // Update current batch size\n        this.s.currentBatch.size += 1;\n        this.s.currentBatch.sizeBytes += maxKeySize + bsonSize;\n        return this;\n    }\n}\nexports.UnorderedBulkOperation = UnorderedBulkOperation;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}