{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compareTopologyVersion = exports.parseServerType = exports.ServerDescription = void 0;\n\nconst utils_1 = require(\"../utils\");\n\nconst common_1 = require(\"./common\");\n\nconst bson_1 = require(\"../bson\");\n\nconst WRITABLE_SERVER_TYPES = new Set([common_1.ServerType.RSPrimary, common_1.ServerType.Standalone, common_1.ServerType.Mongos, common_1.ServerType.LoadBalancer]);\nconst DATA_BEARING_SERVER_TYPES = new Set([common_1.ServerType.RSPrimary, common_1.ServerType.RSSecondary, common_1.ServerType.Mongos, common_1.ServerType.Standalone, common_1.ServerType.LoadBalancer]);\n/**\n * The client's view of a single server, based on the most recent ismaster outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */\n\nclass ServerDescription {\n  /**\n   * Create a ServerDescription\n   * @internal\n   *\n   * @param address - The address of the server\n   * @param ismaster - An optional ismaster response for this server\n   */\n  constructor(address, ismaster, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n\n    if (typeof address === 'string') {\n      this._hostAddress = new utils_1.HostAddress(address);\n      this.address = this._hostAddress.toString();\n    } else {\n      this._hostAddress = address;\n      this.address = this._hostAddress.toString();\n    }\n\n    this.type = parseServerType(ismaster, options);\n    this.hosts = (_b = (_a = ismaster === null || ismaster === void 0 ? void 0 : ismaster.hosts) === null || _a === void 0 ? void 0 : _a.map(host => host.toLowerCase())) !== null && _b !== void 0 ? _b : [];\n    this.passives = (_d = (_c = ismaster === null || ismaster === void 0 ? void 0 : ismaster.passives) === null || _c === void 0 ? void 0 : _c.map(host => host.toLowerCase())) !== null && _d !== void 0 ? _d : [];\n    this.arbiters = (_f = (_e = ismaster === null || ismaster === void 0 ? void 0 : ismaster.arbiters) === null || _e === void 0 ? void 0 : _e.map(host => host.toLowerCase())) !== null && _f !== void 0 ? _f : [];\n    this.tags = (_g = ismaster === null || ismaster === void 0 ? void 0 : ismaster.tags) !== null && _g !== void 0 ? _g : {};\n    this.minWireVersion = (_h = ismaster === null || ismaster === void 0 ? void 0 : ismaster.minWireVersion) !== null && _h !== void 0 ? _h : 0;\n    this.maxWireVersion = (_j = ismaster === null || ismaster === void 0 ? void 0 : ismaster.maxWireVersion) !== null && _j !== void 0 ? _j : 0;\n    this.roundTripTime = (_k = options === null || options === void 0 ? void 0 : options.roundTripTime) !== null && _k !== void 0 ? _k : -1;\n    this.lastUpdateTime = utils_1.now();\n    this.lastWriteDate = (_m = (_l = ismaster === null || ismaster === void 0 ? void 0 : ismaster.lastWrite) === null || _l === void 0 ? void 0 : _l.lastWriteDate) !== null && _m !== void 0 ? _m : 0;\n\n    if (options === null || options === void 0 ? void 0 : options.topologyVersion) {\n      this.topologyVersion = options.topologyVersion;\n    } else if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.topologyVersion) {\n      this.topologyVersion = ismaster.topologyVersion;\n    }\n\n    if (options === null || options === void 0 ? void 0 : options.error) {\n      this.error = options.error;\n    }\n\n    if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.primary) {\n      this.primary = ismaster.primary;\n    }\n\n    if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.me) {\n      this.me = ismaster.me.toLowerCase();\n    }\n\n    if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.setName) {\n      this.setName = ismaster.setName;\n    }\n\n    if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.setVersion) {\n      this.setVersion = ismaster.setVersion;\n    }\n\n    if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.electionId) {\n      this.electionId = ismaster.electionId;\n    }\n\n    if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.logicalSessionTimeoutMinutes) {\n      this.logicalSessionTimeoutMinutes = ismaster.logicalSessionTimeoutMinutes;\n    }\n\n    if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.$clusterTime) {\n      this.$clusterTime = ismaster.$clusterTime;\n    }\n  }\n\n  get hostAddress() {\n    if (this._hostAddress) return this._hostAddress;else return new utils_1.HostAddress(this.address);\n  }\n\n  get allHosts() {\n    return this.hosts.concat(this.arbiters).concat(this.passives);\n  }\n  /** Is this server available for reads*/\n\n\n  get isReadable() {\n    return this.type === common_1.ServerType.RSSecondary || this.isWritable;\n  }\n  /** Is this server data bearing */\n\n\n  get isDataBearing() {\n    return DATA_BEARING_SERVER_TYPES.has(this.type);\n  }\n  /** Is this server available for writes */\n\n\n  get isWritable() {\n    return WRITABLE_SERVER_TYPES.has(this.type);\n  }\n\n  get host() {\n    const chopLength = `:${this.port}`.length;\n    return this.address.slice(0, -chopLength);\n  }\n\n  get port() {\n    const port = this.address.split(':').pop();\n    return port ? Number.parseInt(port, 10) : 27017;\n  }\n  /**\n   * Determines if another `ServerDescription` is equal to this one per the rules defined\n   * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n   */\n\n\n  equals(other) {\n    const topologyVersionsEqual = this.topologyVersion === other.topologyVersion || compareTopologyVersion(this.topologyVersion, other.topologyVersion) === 0;\n    const electionIdsEqual = this.electionId && other.electionId ? other.electionId && this.electionId.equals(other.electionId) : this.electionId === other.electionId;\n    return other != null && utils_1.errorStrictEqual(this.error, other.error) && this.type === other.type && this.minWireVersion === other.minWireVersion && utils_1.arrayStrictEqual(this.hosts, other.hosts) && tagsStrictEqual(this.tags, other.tags) && this.setName === other.setName && this.setVersion === other.setVersion && electionIdsEqual && this.primary === other.primary && this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes && topologyVersionsEqual;\n  }\n\n}\n\nexports.ServerDescription = ServerDescription; // Parses an `ismaster` message and determines the server type\n\nfunction parseServerType(ismaster, options) {\n  if (options === null || options === void 0 ? void 0 : options.loadBalanced) {\n    return common_1.ServerType.LoadBalancer;\n  }\n\n  if (!ismaster || !ismaster.ok) {\n    return common_1.ServerType.Unknown;\n  }\n\n  if (ismaster.isreplicaset) {\n    return common_1.ServerType.RSGhost;\n  }\n\n  if (ismaster.msg && ismaster.msg === 'isdbgrid') {\n    return common_1.ServerType.Mongos;\n  }\n\n  if (ismaster.setName) {\n    if (ismaster.hidden) {\n      return common_1.ServerType.RSOther;\n    } else if (ismaster.ismaster || ismaster.isWritablePrimary) {\n      return common_1.ServerType.RSPrimary;\n    } else if (ismaster.secondary) {\n      return common_1.ServerType.RSSecondary;\n    } else if (ismaster.arbiterOnly) {\n      return common_1.ServerType.RSArbiter;\n    } else {\n      return common_1.ServerType.RSOther;\n    }\n  }\n\n  return common_1.ServerType.Standalone;\n}\n\nexports.parseServerType = parseServerType;\n\nfunction tagsStrictEqual(tags, tags2) {\n  const tagsKeys = Object.keys(tags);\n  const tags2Keys = Object.keys(tags2);\n  return tagsKeys.length === tags2Keys.length && tagsKeys.every(key => tags2[key] === tags[key]);\n}\n/**\n * Compares two topology versions.\n *\n * @returns A negative number if `lhs` is older than `rhs`; positive if `lhs` is newer than `rhs`; 0 if they are equivalent.\n */\n\n\nfunction compareTopologyVersion(lhs, rhs) {\n  if (lhs == null || rhs == null) {\n    return -1;\n  }\n\n  if (lhs.processId.equals(rhs.processId)) {\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    const lhsCounter = bson_1.Long.isLong(lhs.counter) ? lhs.counter : bson_1.Long.fromNumber(lhs.counter);\n    const rhsCounter = bson_1.Long.isLong(rhs.counter) ? lhs.counter : bson_1.Long.fromNumber(rhs.counter);\n    return lhsCounter.compare(rhsCounter);\n  }\n\n  return -1;\n}\n\nexports.compareTopologyVersion = compareTopologyVersion;","map":{"version":3,"names":["Object","defineProperty","exports","value","compareTopologyVersion","parseServerType","ServerDescription","utils_1","require","common_1","bson_1","WRITABLE_SERVER_TYPES","Set","ServerType","RSPrimary","Standalone","Mongos","LoadBalancer","DATA_BEARING_SERVER_TYPES","RSSecondary","constructor","address","ismaster","options","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_hostAddress","HostAddress","toString","type","hosts","map","host","toLowerCase","passives","arbiters","tags","minWireVersion","maxWireVersion","roundTripTime","lastUpdateTime","now","lastWriteDate","lastWrite","topologyVersion","error","primary","me","setName","setVersion","electionId","logicalSessionTimeoutMinutes","$clusterTime","hostAddress","allHosts","concat","isReadable","isWritable","isDataBearing","has","chopLength","port","length","slice","split","pop","Number","parseInt","equals","other","topologyVersionsEqual","electionIdsEqual","errorStrictEqual","arrayStrictEqual","tagsStrictEqual","loadBalanced","ok","Unknown","isreplicaset","RSGhost","msg","hidden","RSOther","isWritablePrimary","secondary","arbiterOnly","RSArbiter","tags2","tagsKeys","keys","tags2Keys","every","key","lhs","rhs","processId","lhsCounter","Long","isLong","counter","fromNumber","rhsCounter","compare"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/sdam/server_description.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compareTopologyVersion = exports.parseServerType = exports.ServerDescription = void 0;\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst bson_1 = require(\"../bson\");\nconst WRITABLE_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.LoadBalancer\n]);\nconst DATA_BEARING_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.RSSecondary,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.LoadBalancer\n]);\n/**\n * The client's view of a single server, based on the most recent ismaster outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */\nclass ServerDescription {\n    /**\n     * Create a ServerDescription\n     * @internal\n     *\n     * @param address - The address of the server\n     * @param ismaster - An optional ismaster response for this server\n     */\n    constructor(address, ismaster, options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        if (typeof address === 'string') {\n            this._hostAddress = new utils_1.HostAddress(address);\n            this.address = this._hostAddress.toString();\n        }\n        else {\n            this._hostAddress = address;\n            this.address = this._hostAddress.toString();\n        }\n        this.type = parseServerType(ismaster, options);\n        this.hosts = (_b = (_a = ismaster === null || ismaster === void 0 ? void 0 : ismaster.hosts) === null || _a === void 0 ? void 0 : _a.map((host) => host.toLowerCase())) !== null && _b !== void 0 ? _b : [];\n        this.passives = (_d = (_c = ismaster === null || ismaster === void 0 ? void 0 : ismaster.passives) === null || _c === void 0 ? void 0 : _c.map((host) => host.toLowerCase())) !== null && _d !== void 0 ? _d : [];\n        this.arbiters = (_f = (_e = ismaster === null || ismaster === void 0 ? void 0 : ismaster.arbiters) === null || _e === void 0 ? void 0 : _e.map((host) => host.toLowerCase())) !== null && _f !== void 0 ? _f : [];\n        this.tags = (_g = ismaster === null || ismaster === void 0 ? void 0 : ismaster.tags) !== null && _g !== void 0 ? _g : {};\n        this.minWireVersion = (_h = ismaster === null || ismaster === void 0 ? void 0 : ismaster.minWireVersion) !== null && _h !== void 0 ? _h : 0;\n        this.maxWireVersion = (_j = ismaster === null || ismaster === void 0 ? void 0 : ismaster.maxWireVersion) !== null && _j !== void 0 ? _j : 0;\n        this.roundTripTime = (_k = options === null || options === void 0 ? void 0 : options.roundTripTime) !== null && _k !== void 0 ? _k : -1;\n        this.lastUpdateTime = utils_1.now();\n        this.lastWriteDate = (_m = (_l = ismaster === null || ismaster === void 0 ? void 0 : ismaster.lastWrite) === null || _l === void 0 ? void 0 : _l.lastWriteDate) !== null && _m !== void 0 ? _m : 0;\n        if (options === null || options === void 0 ? void 0 : options.topologyVersion) {\n            this.topologyVersion = options.topologyVersion;\n        }\n        else if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.topologyVersion) {\n            this.topologyVersion = ismaster.topologyVersion;\n        }\n        if (options === null || options === void 0 ? void 0 : options.error) {\n            this.error = options.error;\n        }\n        if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.primary) {\n            this.primary = ismaster.primary;\n        }\n        if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.me) {\n            this.me = ismaster.me.toLowerCase();\n        }\n        if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.setName) {\n            this.setName = ismaster.setName;\n        }\n        if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.setVersion) {\n            this.setVersion = ismaster.setVersion;\n        }\n        if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.electionId) {\n            this.electionId = ismaster.electionId;\n        }\n        if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.logicalSessionTimeoutMinutes) {\n            this.logicalSessionTimeoutMinutes = ismaster.logicalSessionTimeoutMinutes;\n        }\n        if (ismaster === null || ismaster === void 0 ? void 0 : ismaster.$clusterTime) {\n            this.$clusterTime = ismaster.$clusterTime;\n        }\n    }\n    get hostAddress() {\n        if (this._hostAddress)\n            return this._hostAddress;\n        else\n            return new utils_1.HostAddress(this.address);\n    }\n    get allHosts() {\n        return this.hosts.concat(this.arbiters).concat(this.passives);\n    }\n    /** Is this server available for reads*/\n    get isReadable() {\n        return this.type === common_1.ServerType.RSSecondary || this.isWritable;\n    }\n    /** Is this server data bearing */\n    get isDataBearing() {\n        return DATA_BEARING_SERVER_TYPES.has(this.type);\n    }\n    /** Is this server available for writes */\n    get isWritable() {\n        return WRITABLE_SERVER_TYPES.has(this.type);\n    }\n    get host() {\n        const chopLength = `:${this.port}`.length;\n        return this.address.slice(0, -chopLength);\n    }\n    get port() {\n        const port = this.address.split(':').pop();\n        return port ? Number.parseInt(port, 10) : 27017;\n    }\n    /**\n     * Determines if another `ServerDescription` is equal to this one per the rules defined\n     * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n     */\n    equals(other) {\n        const topologyVersionsEqual = this.topologyVersion === other.topologyVersion ||\n            compareTopologyVersion(this.topologyVersion, other.topologyVersion) === 0;\n        const electionIdsEqual = this.electionId && other.electionId\n            ? other.electionId && this.electionId.equals(other.electionId)\n            : this.electionId === other.electionId;\n        return (other != null &&\n            utils_1.errorStrictEqual(this.error, other.error) &&\n            this.type === other.type &&\n            this.minWireVersion === other.minWireVersion &&\n            utils_1.arrayStrictEqual(this.hosts, other.hosts) &&\n            tagsStrictEqual(this.tags, other.tags) &&\n            this.setName === other.setName &&\n            this.setVersion === other.setVersion &&\n            electionIdsEqual &&\n            this.primary === other.primary &&\n            this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes &&\n            topologyVersionsEqual);\n    }\n}\nexports.ServerDescription = ServerDescription;\n// Parses an `ismaster` message and determines the server type\nfunction parseServerType(ismaster, options) {\n    if (options === null || options === void 0 ? void 0 : options.loadBalanced) {\n        return common_1.ServerType.LoadBalancer;\n    }\n    if (!ismaster || !ismaster.ok) {\n        return common_1.ServerType.Unknown;\n    }\n    if (ismaster.isreplicaset) {\n        return common_1.ServerType.RSGhost;\n    }\n    if (ismaster.msg && ismaster.msg === 'isdbgrid') {\n        return common_1.ServerType.Mongos;\n    }\n    if (ismaster.setName) {\n        if (ismaster.hidden) {\n            return common_1.ServerType.RSOther;\n        }\n        else if (ismaster.ismaster || ismaster.isWritablePrimary) {\n            return common_1.ServerType.RSPrimary;\n        }\n        else if (ismaster.secondary) {\n            return common_1.ServerType.RSSecondary;\n        }\n        else if (ismaster.arbiterOnly) {\n            return common_1.ServerType.RSArbiter;\n        }\n        else {\n            return common_1.ServerType.RSOther;\n        }\n    }\n    return common_1.ServerType.Standalone;\n}\nexports.parseServerType = parseServerType;\nfunction tagsStrictEqual(tags, tags2) {\n    const tagsKeys = Object.keys(tags);\n    const tags2Keys = Object.keys(tags2);\n    return (tagsKeys.length === tags2Keys.length &&\n        tagsKeys.every((key) => tags2[key] === tags[key]));\n}\n/**\n * Compares two topology versions.\n *\n * @returns A negative number if `lhs` is older than `rhs`; positive if `lhs` is newer than `rhs`; 0 if they are equivalent.\n */\nfunction compareTopologyVersion(lhs, rhs) {\n    if (lhs == null || rhs == null) {\n        return -1;\n    }\n    if (lhs.processId.equals(rhs.processId)) {\n        // tests mock counter as just number, but in a real situation counter should always be a Long\n        const lhsCounter = bson_1.Long.isLong(lhs.counter) ? lhs.counter : bson_1.Long.fromNumber(lhs.counter);\n        const rhsCounter = bson_1.Long.isLong(rhs.counter) ? lhs.counter : bson_1.Long.fromNumber(rhs.counter);\n        return lhsCounter.compare(rhsCounter);\n    }\n    return -1;\n}\nexports.compareTopologyVersion = compareTopologyVersion;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}