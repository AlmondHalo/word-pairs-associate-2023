{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTransactionCommand = exports.Transaction = exports.TxnState = void 0;\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst error_1 = require(\"./error\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst write_concern_1 = require(\"./write_concern\");\n/** @internal */\n\n\nexports.TxnState = Object.freeze({\n  NO_TRANSACTION: 'NO_TRANSACTION',\n  STARTING_TRANSACTION: 'STARTING_TRANSACTION',\n  TRANSACTION_IN_PROGRESS: 'TRANSACTION_IN_PROGRESS',\n  TRANSACTION_COMMITTED: 'TRANSACTION_COMMITTED',\n  TRANSACTION_COMMITTED_EMPTY: 'TRANSACTION_COMMITTED_EMPTY',\n  TRANSACTION_ABORTED: 'TRANSACTION_ABORTED'\n});\nconst stateMachine = {\n  [exports.TxnState.NO_TRANSACTION]: [exports.TxnState.NO_TRANSACTION, exports.TxnState.STARTING_TRANSACTION],\n  [exports.TxnState.STARTING_TRANSACTION]: [exports.TxnState.TRANSACTION_IN_PROGRESS, exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.TRANSACTION_ABORTED],\n  [exports.TxnState.TRANSACTION_IN_PROGRESS]: [exports.TxnState.TRANSACTION_IN_PROGRESS, exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_ABORTED],\n  [exports.TxnState.TRANSACTION_COMMITTED]: [exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION],\n  [exports.TxnState.TRANSACTION_ABORTED]: [exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION],\n  [exports.TxnState.TRANSACTION_COMMITTED_EMPTY]: [exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.NO_TRANSACTION]\n};\nconst ACTIVE_STATES = new Set([exports.TxnState.STARTING_TRANSACTION, exports.TxnState.TRANSACTION_IN_PROGRESS]);\nconst COMMITTED_STATES = new Set([exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.TRANSACTION_ABORTED]);\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */\n\nclass Transaction {\n  /** Create a transaction @internal */\n  constructor(options) {\n    options = options !== null && options !== void 0 ? options : {};\n    this.state = exports.TxnState.NO_TRANSACTION;\n    this.options = {};\n    const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n\n    if (writeConcern) {\n      if (writeConcern.w === 0) {\n        throw new error_1.MongoTransactionError('Transactions do not support unacknowledged write concern');\n      }\n\n      this.options.writeConcern = writeConcern;\n    }\n\n    if (options.readConcern) {\n      this.options.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    }\n\n    if (options.readPreference) {\n      this.options.readPreference = read_preference_1.ReadPreference.fromOptions(options);\n    }\n\n    if (options.maxCommitTimeMS) {\n      this.options.maxTimeMS = options.maxCommitTimeMS;\n    } // TODO: This isn't technically necessary\n\n\n    this._pinnedServer = undefined;\n    this._recoveryToken = undefined;\n  }\n  /** @internal */\n\n\n  get server() {\n    return this._pinnedServer;\n  }\n\n  get recoveryToken() {\n    return this._recoveryToken;\n  }\n\n  get isPinned() {\n    return !!this.server;\n  }\n  /** @returns Whether the transaction has started */\n\n\n  get isStarting() {\n    return this.state === exports.TxnState.STARTING_TRANSACTION;\n  }\n  /**\n   * @returns Whether this session is presently in a transaction\n   */\n\n\n  get isActive() {\n    return ACTIVE_STATES.has(this.state);\n  }\n\n  get isCommitted() {\n    return COMMITTED_STATES.has(this.state);\n  }\n  /**\n   * Transition the transaction in the state machine\n   * @internal\n   * @param nextState - The new state to transition to\n   */\n\n\n  transition(nextState) {\n    const nextStates = stateMachine[this.state];\n\n    if (nextStates && nextStates.includes(nextState)) {\n      this.state = nextState;\n\n      if (this.state === exports.TxnState.NO_TRANSACTION || this.state === exports.TxnState.STARTING_TRANSACTION || this.state === exports.TxnState.TRANSACTION_ABORTED) {\n        this.unpinServer();\n      }\n\n      return;\n    }\n\n    throw new error_1.MongoRuntimeError(`Attempted illegal state transition from [${this.state}] to [${nextState}]`);\n  }\n  /** @internal */\n\n\n  pinServer(server) {\n    if (this.isActive) {\n      this._pinnedServer = server;\n    }\n  }\n  /** @internal */\n\n\n  unpinServer() {\n    this._pinnedServer = undefined;\n  }\n\n}\n\nexports.Transaction = Transaction;\n\nfunction isTransactionCommand(command) {\n  return !!(command.commitTransaction || command.abortTransaction);\n}\n\nexports.isTransactionCommand = isTransactionCommand;","map":{"version":3,"names":["Object","defineProperty","exports","value","isTransactionCommand","Transaction","TxnState","read_preference_1","require","error_1","read_concern_1","write_concern_1","freeze","NO_TRANSACTION","STARTING_TRANSACTION","TRANSACTION_IN_PROGRESS","TRANSACTION_COMMITTED","TRANSACTION_COMMITTED_EMPTY","TRANSACTION_ABORTED","stateMachine","ACTIVE_STATES","Set","COMMITTED_STATES","constructor","options","state","writeConcern","WriteConcern","fromOptions","w","MongoTransactionError","readConcern","ReadConcern","readPreference","ReadPreference","maxCommitTimeMS","maxTimeMS","_pinnedServer","undefined","_recoveryToken","server","recoveryToken","isPinned","isStarting","isActive","has","isCommitted","transition","nextState","nextStates","includes","unpinServer","MongoRuntimeError","pinServer","command","commitTransaction","abortTransaction"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/transactions.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isTransactionCommand = exports.Transaction = exports.TxnState = void 0;\nconst read_preference_1 = require(\"./read_preference\");\nconst error_1 = require(\"./error\");\nconst read_concern_1 = require(\"./read_concern\");\nconst write_concern_1 = require(\"./write_concern\");\n/** @internal */\nexports.TxnState = Object.freeze({\n    NO_TRANSACTION: 'NO_TRANSACTION',\n    STARTING_TRANSACTION: 'STARTING_TRANSACTION',\n    TRANSACTION_IN_PROGRESS: 'TRANSACTION_IN_PROGRESS',\n    TRANSACTION_COMMITTED: 'TRANSACTION_COMMITTED',\n    TRANSACTION_COMMITTED_EMPTY: 'TRANSACTION_COMMITTED_EMPTY',\n    TRANSACTION_ABORTED: 'TRANSACTION_ABORTED'\n});\nconst stateMachine = {\n    [exports.TxnState.NO_TRANSACTION]: [exports.TxnState.NO_TRANSACTION, exports.TxnState.STARTING_TRANSACTION],\n    [exports.TxnState.STARTING_TRANSACTION]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_IN_PROGRESS]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_COMMITTED]: [\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.STARTING_TRANSACTION,\n        exports.TxnState.NO_TRANSACTION\n    ],\n    [exports.TxnState.TRANSACTION_ABORTED]: [exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION],\n    [exports.TxnState.TRANSACTION_COMMITTED_EMPTY]: [\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.NO_TRANSACTION\n    ]\n};\nconst ACTIVE_STATES = new Set([\n    exports.TxnState.STARTING_TRANSACTION,\n    exports.TxnState.TRANSACTION_IN_PROGRESS\n]);\nconst COMMITTED_STATES = new Set([\n    exports.TxnState.TRANSACTION_COMMITTED,\n    exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n    exports.TxnState.TRANSACTION_ABORTED\n]);\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */\nclass Transaction {\n    /** Create a transaction @internal */\n    constructor(options) {\n        options = options !== null && options !== void 0 ? options : {};\n        this.state = exports.TxnState.NO_TRANSACTION;\n        this.options = {};\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            if (writeConcern.w === 0) {\n                throw new error_1.MongoTransactionError('Transactions do not support unacknowledged write concern');\n            }\n            this.options.writeConcern = writeConcern;\n        }\n        if (options.readConcern) {\n            this.options.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        }\n        if (options.readPreference) {\n            this.options.readPreference = read_preference_1.ReadPreference.fromOptions(options);\n        }\n        if (options.maxCommitTimeMS) {\n            this.options.maxTimeMS = options.maxCommitTimeMS;\n        }\n        // TODO: This isn't technically necessary\n        this._pinnedServer = undefined;\n        this._recoveryToken = undefined;\n    }\n    /** @internal */\n    get server() {\n        return this._pinnedServer;\n    }\n    get recoveryToken() {\n        return this._recoveryToken;\n    }\n    get isPinned() {\n        return !!this.server;\n    }\n    /** @returns Whether the transaction has started */\n    get isStarting() {\n        return this.state === exports.TxnState.STARTING_TRANSACTION;\n    }\n    /**\n     * @returns Whether this session is presently in a transaction\n     */\n    get isActive() {\n        return ACTIVE_STATES.has(this.state);\n    }\n    get isCommitted() {\n        return COMMITTED_STATES.has(this.state);\n    }\n    /**\n     * Transition the transaction in the state machine\n     * @internal\n     * @param nextState - The new state to transition to\n     */\n    transition(nextState) {\n        const nextStates = stateMachine[this.state];\n        if (nextStates && nextStates.includes(nextState)) {\n            this.state = nextState;\n            if (this.state === exports.TxnState.NO_TRANSACTION ||\n                this.state === exports.TxnState.STARTING_TRANSACTION ||\n                this.state === exports.TxnState.TRANSACTION_ABORTED) {\n                this.unpinServer();\n            }\n            return;\n        }\n        throw new error_1.MongoRuntimeError(`Attempted illegal state transition from [${this.state}] to [${nextState}]`);\n    }\n    /** @internal */\n    pinServer(server) {\n        if (this.isActive) {\n            this._pinnedServer = server;\n        }\n    }\n    /** @internal */\n    unpinServer() {\n        this._pinnedServer = undefined;\n    }\n}\nexports.Transaction = Transaction;\nfunction isTransactionCommand(command) {\n    return !!(command.commitTransaction || command.abortTransaction);\n}\nexports.isTransactionCommand = isTransactionCommand;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,oBAAR,GAA+BF,OAAO,CAACG,WAAR,GAAsBH,OAAO,CAACI,QAAR,GAAmB,KAAK,CAA7E;;AACA,MAAMC,iBAAiB,GAAGC,OAAO,CAAC,mBAAD,CAAjC;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,gBAAD,CAA9B;;AACA,MAAMG,eAAe,GAAGH,OAAO,CAAC,iBAAD,CAA/B;AACA;;;AACAN,OAAO,CAACI,QAAR,GAAmBN,MAAM,CAACY,MAAP,CAAc;EAC7BC,cAAc,EAAE,gBADa;EAE7BC,oBAAoB,EAAE,sBAFO;EAG7BC,uBAAuB,EAAE,yBAHI;EAI7BC,qBAAqB,EAAE,uBAJM;EAK7BC,2BAA2B,EAAE,6BALA;EAM7BC,mBAAmB,EAAE;AANQ,CAAd,CAAnB;AAQA,MAAMC,YAAY,GAAG;EACjB,CAACjB,OAAO,CAACI,QAAR,CAAiBO,cAAlB,GAAmC,CAACX,OAAO,CAACI,QAAR,CAAiBO,cAAlB,EAAkCX,OAAO,CAACI,QAAR,CAAiBQ,oBAAnD,CADlB;EAEjB,CAACZ,OAAO,CAACI,QAAR,CAAiBQ,oBAAlB,GAAyC,CACrCZ,OAAO,CAACI,QAAR,CAAiBS,uBADoB,EAErCb,OAAO,CAACI,QAAR,CAAiBU,qBAFoB,EAGrCd,OAAO,CAACI,QAAR,CAAiBW,2BAHoB,EAIrCf,OAAO,CAACI,QAAR,CAAiBY,mBAJoB,CAFxB;EAQjB,CAAChB,OAAO,CAACI,QAAR,CAAiBS,uBAAlB,GAA4C,CACxCb,OAAO,CAACI,QAAR,CAAiBS,uBADuB,EAExCb,OAAO,CAACI,QAAR,CAAiBU,qBAFuB,EAGxCd,OAAO,CAACI,QAAR,CAAiBY,mBAHuB,CAR3B;EAajB,CAAChB,OAAO,CAACI,QAAR,CAAiBU,qBAAlB,GAA0C,CACtCd,OAAO,CAACI,QAAR,CAAiBU,qBADqB,EAEtCd,OAAO,CAACI,QAAR,CAAiBW,2BAFqB,EAGtCf,OAAO,CAACI,QAAR,CAAiBQ,oBAHqB,EAItCZ,OAAO,CAACI,QAAR,CAAiBO,cAJqB,CAbzB;EAmBjB,CAACX,OAAO,CAACI,QAAR,CAAiBY,mBAAlB,GAAwC,CAAChB,OAAO,CAACI,QAAR,CAAiBQ,oBAAlB,EAAwCZ,OAAO,CAACI,QAAR,CAAiBO,cAAzD,CAnBvB;EAoBjB,CAACX,OAAO,CAACI,QAAR,CAAiBW,2BAAlB,GAAgD,CAC5Cf,OAAO,CAACI,QAAR,CAAiBW,2BAD2B,EAE5Cf,OAAO,CAACI,QAAR,CAAiBO,cAF2B;AApB/B,CAArB;AAyBA,MAAMO,aAAa,GAAG,IAAIC,GAAJ,CAAQ,CAC1BnB,OAAO,CAACI,QAAR,CAAiBQ,oBADS,EAE1BZ,OAAO,CAACI,QAAR,CAAiBS,uBAFS,CAAR,CAAtB;AAIA,MAAMO,gBAAgB,GAAG,IAAID,GAAJ,CAAQ,CAC7BnB,OAAO,CAACI,QAAR,CAAiBU,qBADY,EAE7Bd,OAAO,CAACI,QAAR,CAAiBW,2BAFY,EAG7Bf,OAAO,CAACI,QAAR,CAAiBY,mBAHY,CAAR,CAAzB;AAKA;AACA;AACA;AACA;;AACA,MAAMb,WAAN,CAAkB;EACd;EACAkB,WAAW,CAACC,OAAD,EAAU;IACjBA,OAAO,GAAGA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyCA,OAAzC,GAAmD,EAA7D;IACA,KAAKC,KAAL,GAAavB,OAAO,CAACI,QAAR,CAAiBO,cAA9B;IACA,KAAKW,OAAL,GAAe,EAAf;IACA,MAAME,YAAY,GAAGf,eAAe,CAACgB,YAAhB,CAA6BC,WAA7B,CAAyCJ,OAAzC,CAArB;;IACA,IAAIE,YAAJ,EAAkB;MACd,IAAIA,YAAY,CAACG,CAAb,KAAmB,CAAvB,EAA0B;QACtB,MAAM,IAAIpB,OAAO,CAACqB,qBAAZ,CAAkC,0DAAlC,CAAN;MACH;;MACD,KAAKN,OAAL,CAAaE,YAAb,GAA4BA,YAA5B;IACH;;IACD,IAAIF,OAAO,CAACO,WAAZ,EAAyB;MACrB,KAAKP,OAAL,CAAaO,WAAb,GAA2BrB,cAAc,CAACsB,WAAf,CAA2BJ,WAA3B,CAAuCJ,OAAvC,CAA3B;IACH;;IACD,IAAIA,OAAO,CAACS,cAAZ,EAA4B;MACxB,KAAKT,OAAL,CAAaS,cAAb,GAA8B1B,iBAAiB,CAAC2B,cAAlB,CAAiCN,WAAjC,CAA6CJ,OAA7C,CAA9B;IACH;;IACD,IAAIA,OAAO,CAACW,eAAZ,EAA6B;MACzB,KAAKX,OAAL,CAAaY,SAAb,GAAyBZ,OAAO,CAACW,eAAjC;IACH,CAnBgB,CAoBjB;;;IACA,KAAKE,aAAL,GAAqBC,SAArB;IACA,KAAKC,cAAL,GAAsBD,SAAtB;EACH;EACD;;;EACU,IAANE,MAAM,GAAG;IACT,OAAO,KAAKH,aAAZ;EACH;;EACgB,IAAbI,aAAa,GAAG;IAChB,OAAO,KAAKF,cAAZ;EACH;;EACW,IAARG,QAAQ,GAAG;IACX,OAAO,CAAC,CAAC,KAAKF,MAAd;EACH;EACD;;;EACc,IAAVG,UAAU,GAAG;IACb,OAAO,KAAKlB,KAAL,KAAevB,OAAO,CAACI,QAAR,CAAiBQ,oBAAvC;EACH;EACD;AACJ;AACA;;;EACgB,IAAR8B,QAAQ,GAAG;IACX,OAAOxB,aAAa,CAACyB,GAAd,CAAkB,KAAKpB,KAAvB,CAAP;EACH;;EACc,IAAXqB,WAAW,GAAG;IACd,OAAOxB,gBAAgB,CAACuB,GAAjB,CAAqB,KAAKpB,KAA1B,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIsB,UAAU,CAACC,SAAD,EAAY;IAClB,MAAMC,UAAU,GAAG9B,YAAY,CAAC,KAAKM,KAAN,CAA/B;;IACA,IAAIwB,UAAU,IAAIA,UAAU,CAACC,QAAX,CAAoBF,SAApB,CAAlB,EAAkD;MAC9C,KAAKvB,KAAL,GAAauB,SAAb;;MACA,IAAI,KAAKvB,KAAL,KAAevB,OAAO,CAACI,QAAR,CAAiBO,cAAhC,IACA,KAAKY,KAAL,KAAevB,OAAO,CAACI,QAAR,CAAiBQ,oBADhC,IAEA,KAAKW,KAAL,KAAevB,OAAO,CAACI,QAAR,CAAiBY,mBAFpC,EAEyD;QACrD,KAAKiC,WAAL;MACH;;MACD;IACH;;IACD,MAAM,IAAI1C,OAAO,CAAC2C,iBAAZ,CAA+B,4CAA2C,KAAK3B,KAAM,SAAQuB,SAAU,GAAvG,CAAN;EACH;EACD;;;EACAK,SAAS,CAACb,MAAD,EAAS;IACd,IAAI,KAAKI,QAAT,EAAmB;MACf,KAAKP,aAAL,GAAqBG,MAArB;IACH;EACJ;EACD;;;EACAW,WAAW,GAAG;IACV,KAAKd,aAAL,GAAqBC,SAArB;EACH;;AA5Ea;;AA8ElBpC,OAAO,CAACG,WAAR,GAAsBA,WAAtB;;AACA,SAASD,oBAAT,CAA8BkD,OAA9B,EAAuC;EACnC,OAAO,CAAC,EAAEA,OAAO,CAACC,iBAAR,IAA6BD,OAAO,CAACE,gBAAvC,CAAR;AACH;;AACDtD,OAAO,CAACE,oBAAR,GAA+BA,oBAA/B"},"metadata":{},"sourceType":"script"}