{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Admin = void 0;\n\nconst add_user_1 = require(\"./operations/add_user\");\n\nconst remove_user_1 = require(\"./operations/remove_user\");\n\nconst validate_collection_1 = require(\"./operations/validate_collection\");\n\nconst list_databases_1 = require(\"./operations/list_databases\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst run_command_1 = require(\"./operations/run_command\");\n\nconst utils_1 = require(\"./utils\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```js\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n *\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Use the admin database for the operation\n *   const adminDb = client.db(dbName).admin();\n *\n *   // List all the available databases\n *   adminDb.listDatabases(function(err, dbs) {\n *     expect(err).to.not.exist;\n *     test.ok(dbs.databases.length > 0);\n *     client.close();\n *   });\n * });\n * ```\n */\n\n\nclass Admin {\n  /**\n   * Create a new Admin instance\n   * @internal\n   */\n  constructor(db) {\n    this.s = {\n      db\n    };\n  }\n\n  command(command, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = Object.assign({\n      dbName: 'admin'\n    }, options);\n    return execute_operation_1.executeOperation(utils_1.getTopology(this.s.db), new run_command_1.RunCommandOperation(this.s.db, command, options), callback);\n  }\n\n  buildInfo(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      buildinfo: 1\n    }, options, callback);\n  }\n\n  serverInfo(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      buildinfo: 1\n    }, options, callback);\n  }\n\n  serverStatus(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      serverStatus: 1\n    }, options, callback);\n  }\n\n  ping(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      ping: 1\n    }, options, callback);\n  }\n\n  addUser(username, password, options, callback) {\n    if (typeof password === 'function') {\n      callback = password, password = undefined, options = {};\n    } else if (typeof password !== 'string') {\n      if (typeof options === 'function') {\n        callback = options, options = password, password = undefined;\n      } else {\n        options = password, callback = undefined, password = undefined;\n      }\n    } else {\n      if (typeof options === 'function') callback = options, options = {};\n    }\n\n    options = Object.assign({\n      dbName: 'admin'\n    }, options);\n    return execute_operation_1.executeOperation(utils_1.getTopology(this.s.db), new add_user_1.AddUserOperation(this.s.db, username, password, options), callback);\n  }\n\n  removeUser(username, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = Object.assign({\n      dbName: 'admin'\n    }, options);\n    return execute_operation_1.executeOperation(utils_1.getTopology(this.s.db), new remove_user_1.RemoveUserOperation(this.s.db, username, options), callback);\n  }\n\n  validateCollection(collectionName, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this.s.db), new validate_collection_1.ValidateCollectionOperation(this, collectionName, options), callback);\n  }\n\n  listDatabases(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return execute_operation_1.executeOperation(utils_1.getTopology(this.s.db), new list_databases_1.ListDatabasesOperation(this.s.db, options), callback);\n  }\n\n  replSetGetStatus(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      replSetGetStatus: 1\n    }, options, callback);\n  }\n\n}\n\nexports.Admin = Admin;","map":{"version":3,"names":["Object","defineProperty","exports","value","Admin","add_user_1","require","remove_user_1","validate_collection_1","list_databases_1","execute_operation_1","run_command_1","utils_1","constructor","db","s","command","options","callback","assign","dbName","executeOperation","getTopology","RunCommandOperation","buildInfo","buildinfo","serverInfo","serverStatus","ping","addUser","username","password","undefined","AddUserOperation","removeUser","RemoveUserOperation","validateCollection","collectionName","ValidateCollectionOperation","listDatabases","ListDatabasesOperation","replSetGetStatus"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/admin.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Admin = void 0;\nconst add_user_1 = require(\"./operations/add_user\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst validate_collection_1 = require(\"./operations/validate_collection\");\nconst list_databases_1 = require(\"./operations/list_databases\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst utils_1 = require(\"./utils\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```js\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n *\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Use the admin database for the operation\n *   const adminDb = client.db(dbName).admin();\n *\n *   // List all the available databases\n *   adminDb.listDatabases(function(err, dbs) {\n *     expect(err).to.not.exist;\n *     test.ok(dbs.databases.length > 0);\n *     client.close();\n *   });\n * });\n * ```\n */\nclass Admin {\n    /**\n     * Create a new Admin instance\n     * @internal\n     */\n    constructor(db) {\n        this.s = { db };\n    }\n    command(command, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = Object.assign({ dbName: 'admin' }, options);\n        return execute_operation_1.executeOperation(utils_1.getTopology(this.s.db), new run_command_1.RunCommandOperation(this.s.db, command, options), callback);\n    }\n    buildInfo(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        return this.command({ buildinfo: 1 }, options, callback);\n    }\n    serverInfo(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        return this.command({ buildinfo: 1 }, options, callback);\n    }\n    serverStatus(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        return this.command({ serverStatus: 1 }, options, callback);\n    }\n    ping(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        return this.command({ ping: 1 }, options, callback);\n    }\n    addUser(username, password, options, callback) {\n        if (typeof password === 'function') {\n            (callback = password), (password = undefined), (options = {});\n        }\n        else if (typeof password !== 'string') {\n            if (typeof options === 'function') {\n                (callback = options), (options = password), (password = undefined);\n            }\n            else {\n                (options = password), (callback = undefined), (password = undefined);\n            }\n        }\n        else {\n            if (typeof options === 'function')\n                (callback = options), (options = {});\n        }\n        options = Object.assign({ dbName: 'admin' }, options);\n        return execute_operation_1.executeOperation(utils_1.getTopology(this.s.db), new add_user_1.AddUserOperation(this.s.db, username, password, options), callback);\n    }\n    removeUser(username, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = Object.assign({ dbName: 'admin' }, options);\n        return execute_operation_1.executeOperation(utils_1.getTopology(this.s.db), new remove_user_1.RemoveUserOperation(this.s.db, username, options), callback);\n    }\n    validateCollection(collectionName, options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        return execute_operation_1.executeOperation(utils_1.getTopology(this.s.db), new validate_collection_1.ValidateCollectionOperation(this, collectionName, options), callback);\n    }\n    listDatabases(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        return execute_operation_1.executeOperation(utils_1.getTopology(this.s.db), new list_databases_1.ListDatabasesOperation(this.s.db, options), callback);\n    }\n    replSetGetStatus(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        return this.command({ replSetGetStatus: 1 }, options, callback);\n    }\n}\nexports.Admin = Admin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}