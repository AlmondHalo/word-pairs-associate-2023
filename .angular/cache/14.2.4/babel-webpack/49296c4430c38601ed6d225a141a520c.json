{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoDBAWS = void 0;\n\nconst http = require(\"http\");\n\nconst crypto = require(\"crypto\");\n\nconst url = require(\"url\");\n\nconst BSON = require(\"../../bson\");\n\nconst auth_provider_1 = require(\"./auth_provider\");\n\nconst mongo_credentials_1 = require(\"./mongo_credentials\");\n\nconst error_1 = require(\"../../error\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst deps_1 = require(\"../../deps\");\n\nconst defaultAuthProviders_1 = require(\"./defaultAuthProviders\");\n\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions = {\n  promoteLongs: true,\n  promoteValues: true,\n  promoteBuffers: false,\n  bsonRegExp: false\n};\n\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n  auth(authContext, callback) {\n    const {\n      connection,\n      credentials\n    } = authContext;\n\n    if (!credentials) {\n      return callback(new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.'));\n    }\n\n    if ('kModuleError' in deps_1.aws4) {\n      return callback(deps_1.aws4['kModuleError']);\n    }\n\n    const {\n      sign\n    } = deps_1.aws4;\n\n    if (utils_1.maxWireVersion(connection) < 9) {\n      callback(new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later'));\n      return;\n    }\n\n    if (!credentials.username) {\n      makeTempCredentials(credentials, (err, tempCredentials) => {\n        if (err || !tempCredentials) return callback(err);\n        authContext.credentials = tempCredentials;\n        this.auth(authContext, callback);\n      });\n      return;\n    }\n\n    const username = credentials.username;\n    const password = credentials.password;\n    const db = credentials.source;\n    const token = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n    crypto.randomBytes(32, (err, nonce) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const saslStart = {\n        saslStart: 1,\n        mechanism: 'MONGODB-AWS',\n        payload: BSON.serialize({\n          r: nonce,\n          p: ASCII_N\n        }, bsonOptions)\n      };\n      connection.command(utils_1.ns(`${db}.$cmd`), saslStart, undefined, (err, res) => {\n        if (err) return callback(err);\n        const serverResponse = BSON.deserialize(res.payload.buffer, bsonOptions);\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n\n        if (serverNonce.length !== 64) {\n          callback( // TODO(NODE-3483)\n          new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`));\n          return;\n        }\n\n        if (serverNonce.compare(nonce, 0, nonce.length, 0, nonce.length) !== 0) {\n          // TODO(NODE-3483)\n          callback(new error_1.MongoRuntimeError('Server nonce does not begin with client nonce'));\n          return;\n        }\n\n        if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n          // TODO(NODE-3483)\n          callback(new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`));\n          return;\n        }\n\n        const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n        const options = sign({\n          method: 'POST',\n          host,\n          region: deriveRegion(serverResponse.h),\n          service: 'sts',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'Content-Length': body.length,\n            'X-MongoDB-Server-Nonce': serverNonce.toString('base64'),\n            'X-MongoDB-GS2-CB-Flag': 'n'\n          },\n          path: '/',\n          body\n        }, {\n          accessKeyId: username,\n          secretAccessKey: password,\n          token\n        });\n        const authorization = options.headers.Authorization;\n        const date = options.headers['X-Amz-Date'];\n        const payload = {\n          a: authorization,\n          d: date\n        };\n\n        if (token) {\n          payload.t = token;\n        }\n\n        const saslContinue = {\n          saslContinue: 1,\n          conversationId: 1,\n          payload: BSON.serialize(payload, bsonOptions)\n        };\n        connection.command(utils_1.ns(`${db}.$cmd`), saslContinue, undefined, callback);\n      });\n    });\n  }\n\n}\n\nexports.MongoDBAWS = MongoDBAWS;\n\nfunction makeTempCredentials(credentials, callback) {\n  function done(creds) {\n    if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n      callback(new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials'));\n      return;\n    }\n\n    callback(undefined, new mongo_credentials_1.MongoCredentials({\n      username: creds.AccessKeyId,\n      password: creds.SecretAccessKey,\n      source: credentials.source,\n      mechanism: defaultAuthProviders_1.AuthMechanism.MONGODB_AWS,\n      mechanismProperties: {\n        AWS_SESSION_TOKEN: creds.Token\n      }\n    }));\n  } // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n  // is set then drivers MUST assume that it was set by an AWS ECS agent\n\n\n  if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n    request(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`, (err, res) => {\n      if (err) return callback(err);\n      done(res);\n    });\n    return;\n  } // Otherwise assume we are on an EC2 instance\n  // get a token\n\n\n  request(`${AWS_EC2_URI}/latest/api/token`, {\n    method: 'PUT',\n    json: false,\n    headers: {\n      'X-aws-ec2-metadata-token-ttl-seconds': 30\n    }\n  }, (err, token) => {\n    if (err) return callback(err); // get role name\n\n    request(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n      json: false,\n      headers: {\n        'X-aws-ec2-metadata-token': token\n      }\n    }, (err, roleName) => {\n      if (err) return callback(err); // get temp credentials\n\n      request(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n        headers: {\n          'X-aws-ec2-metadata-token': token\n        }\n      }, (err, creds) => {\n        if (err) return callback(err);\n        done(creds);\n      });\n    });\n  });\n}\n\nfunction deriveRegion(host) {\n  const parts = host.split('.');\n\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\n    return 'us-east-1';\n  }\n\n  return parts[1];\n}\n\nfunction request(uri, _options, _callback) {\n  let options = _options;\n\n  if ('function' === typeof _options) {\n    options = {};\n  }\n\n  let callback = _options;\n\n  if (_callback) {\n    callback = _callback;\n  }\n\n  options = Object.assign({\n    method: 'GET',\n    timeout: 10000,\n    json: true\n  }, url.parse(uri), options);\n  const req = http.request(options, res => {\n    res.setEncoding('utf8');\n    let data = '';\n    res.on('data', d => data += d);\n    res.on('end', () => {\n      if (options.json === false) {\n        callback(undefined, data);\n        return;\n      }\n\n      try {\n        const parsed = JSON.parse(data);\n        callback(undefined, parsed);\n      } catch (err) {\n        // TODO(NODE-3483)\n        callback(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n      }\n    });\n  });\n  req.on('error', err => callback(err));\n  req.end();\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","MongoDBAWS","http","require","crypto","url","BSON","auth_provider_1","mongo_credentials_1","error_1","utils_1","deps_1","defaultAuthProviders_1","ASCII_N","AWS_RELATIVE_URI","AWS_EC2_URI","AWS_EC2_PATH","bsonOptions","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","AuthProvider","auth","authContext","callback","connection","credentials","MongoMissingCredentialsError","aws4","sign","maxWireVersion","MongoCompatibilityError","username","makeTempCredentials","err","tempCredentials","password","db","source","token","mechanismProperties","AWS_SESSION_TOKEN","randomBytes","nonce","saslStart","mechanism","payload","serialize","r","p","command","ns","undefined","res","serverResponse","deserialize","buffer","host","h","serverNonce","s","length","MongoRuntimeError","compare","indexOf","body","options","method","region","deriveRegion","service","headers","toString","path","accessKeyId","secretAccessKey","authorization","Authorization","date","a","d","t","saslContinue","conversationId","done","creds","AccessKeyId","SecretAccessKey","Token","MongoCredentials","AuthMechanism","MONGODB_AWS","process","env","AWS_CONTAINER_CREDENTIALS_RELATIVE_URI","request","json","roleName","parts","split","uri","_options","_callback","assign","timeout","parse","req","setEncoding","data","on","parsed","JSON","end"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/cmap/auth/mongodb_aws.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoDBAWS = void 0;\nconst http = require(\"http\");\nconst crypto = require(\"crypto\");\nconst url = require(\"url\");\nconst BSON = require(\"../../bson\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst mongo_credentials_1 = require(\"./mongo_credentials\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst deps_1 = require(\"../../deps\");\nconst defaultAuthProviders_1 = require(\"./defaultAuthProviders\");\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions = {\n    promoteLongs: true,\n    promoteValues: true,\n    promoteBuffers: false,\n    bsonRegExp: false\n};\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n    auth(authContext, callback) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            return callback(new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.'));\n        }\n        if ('kModuleError' in deps_1.aws4) {\n            return callback(deps_1.aws4['kModuleError']);\n        }\n        const { sign } = deps_1.aws4;\n        if (utils_1.maxWireVersion(connection) < 9) {\n            callback(new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later'));\n            return;\n        }\n        if (!credentials.username) {\n            makeTempCredentials(credentials, (err, tempCredentials) => {\n                if (err || !tempCredentials)\n                    return callback(err);\n                authContext.credentials = tempCredentials;\n                this.auth(authContext, callback);\n            });\n            return;\n        }\n        const username = credentials.username;\n        const password = credentials.password;\n        const db = credentials.source;\n        const token = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n        crypto.randomBytes(32, (err, nonce) => {\n            if (err) {\n                callback(err);\n                return;\n            }\n            const saslStart = {\n                saslStart: 1,\n                mechanism: 'MONGODB-AWS',\n                payload: BSON.serialize({ r: nonce, p: ASCII_N }, bsonOptions)\n            };\n            connection.command(utils_1.ns(`${db}.$cmd`), saslStart, undefined, (err, res) => {\n                if (err)\n                    return callback(err);\n                const serverResponse = BSON.deserialize(res.payload.buffer, bsonOptions);\n                const host = serverResponse.h;\n                const serverNonce = serverResponse.s.buffer;\n                if (serverNonce.length !== 64) {\n                    callback(\n                    // TODO(NODE-3483)\n                    new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`));\n                    return;\n                }\n                if (serverNonce.compare(nonce, 0, nonce.length, 0, nonce.length) !== 0) {\n                    // TODO(NODE-3483)\n                    callback(new error_1.MongoRuntimeError('Server nonce does not begin with client nonce'));\n                    return;\n                }\n                if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n                    // TODO(NODE-3483)\n                    callback(new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`));\n                    return;\n                }\n                const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n                const options = sign({\n                    method: 'POST',\n                    host,\n                    region: deriveRegion(serverResponse.h),\n                    service: 'sts',\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded',\n                        'Content-Length': body.length,\n                        'X-MongoDB-Server-Nonce': serverNonce.toString('base64'),\n                        'X-MongoDB-GS2-CB-Flag': 'n'\n                    },\n                    path: '/',\n                    body\n                }, {\n                    accessKeyId: username,\n                    secretAccessKey: password,\n                    token\n                });\n                const authorization = options.headers.Authorization;\n                const date = options.headers['X-Amz-Date'];\n                const payload = { a: authorization, d: date };\n                if (token) {\n                    payload.t = token;\n                }\n                const saslContinue = {\n                    saslContinue: 1,\n                    conversationId: 1,\n                    payload: BSON.serialize(payload, bsonOptions)\n                };\n                connection.command(utils_1.ns(`${db}.$cmd`), saslContinue, undefined, callback);\n            });\n        });\n    }\n}\nexports.MongoDBAWS = MongoDBAWS;\nfunction makeTempCredentials(credentials, callback) {\n    function done(creds) {\n        if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n            callback(new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials'));\n            return;\n        }\n        callback(undefined, new mongo_credentials_1.MongoCredentials({\n            username: creds.AccessKeyId,\n            password: creds.SecretAccessKey,\n            source: credentials.source,\n            mechanism: defaultAuthProviders_1.AuthMechanism.MONGODB_AWS,\n            mechanismProperties: {\n                AWS_SESSION_TOKEN: creds.Token\n            }\n        }));\n    }\n    // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n    // is set then drivers MUST assume that it was set by an AWS ECS agent\n    if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n        request(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`, (err, res) => {\n            if (err)\n                return callback(err);\n            done(res);\n        });\n        return;\n    }\n    // Otherwise assume we are on an EC2 instance\n    // get a token\n    request(`${AWS_EC2_URI}/latest/api/token`, { method: 'PUT', json: false, headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 } }, (err, token) => {\n        if (err)\n            return callback(err);\n        // get role name\n        request(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, { json: false, headers: { 'X-aws-ec2-metadata-token': token } }, (err, roleName) => {\n            if (err)\n                return callback(err);\n            // get temp credentials\n            request(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, { headers: { 'X-aws-ec2-metadata-token': token } }, (err, creds) => {\n                if (err)\n                    return callback(err);\n                done(creds);\n            });\n        });\n    });\n}\nfunction deriveRegion(host) {\n    const parts = host.split('.');\n    if (parts.length === 1 || parts[1] === 'amazonaws') {\n        return 'us-east-1';\n    }\n    return parts[1];\n}\nfunction request(uri, _options, _callback) {\n    let options = _options;\n    if ('function' === typeof _options) {\n        options = {};\n    }\n    let callback = _options;\n    if (_callback) {\n        callback = _callback;\n    }\n    options = Object.assign({\n        method: 'GET',\n        timeout: 10000,\n        json: true\n    }, url.parse(uri), options);\n    const req = http.request(options, res => {\n        res.setEncoding('utf8');\n        let data = '';\n        res.on('data', d => (data += d));\n        res.on('end', () => {\n            if (options.json === false) {\n                callback(undefined, data);\n                return;\n            }\n            try {\n                const parsed = JSON.parse(data);\n                callback(undefined, parsed);\n            }\n            catch (err) {\n                // TODO(NODE-3483)\n                callback(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n            }\n        });\n    });\n    req.on('error', err => callback(err));\n    req.end();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}