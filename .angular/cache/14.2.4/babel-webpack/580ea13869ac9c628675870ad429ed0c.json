{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\n\nconst error_1 = require(\"./error\");\n/** @public */\n\n\nexports.ReadPreferenceMode = Object.freeze({\n  primary: 'primary',\n  primaryPreferred: 'primaryPreferred',\n  secondary: 'secondary',\n  secondaryPreferred: 'secondaryPreferred',\n  nearest: 'nearest'\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://docs.mongodb.com/manual/core/read-preference/\n */\n\nclass ReadPreference {\n  /**\n   * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n   * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n   * @param options - Additional read preference options\n   */\n  constructor(mode, tags, options) {\n    if (!ReadPreference.isValid(mode)) {\n      throw new error_1.MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n    }\n\n    if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n      options = tags;\n      tags = undefined;\n    } else if (tags && !Array.isArray(tags)) {\n      throw new error_1.MongoInvalidArgumentError('ReadPreference tags must be an array');\n    }\n\n    this.mode = mode;\n    this.tags = tags;\n    this.hedge = options === null || options === void 0 ? void 0 : options.hedge;\n    this.maxStalenessSeconds = undefined;\n    this.minWireVersion = undefined;\n    options = options !== null && options !== void 0 ? options : {};\n\n    if (options.maxStalenessSeconds != null) {\n      if (options.maxStalenessSeconds <= 0) {\n        throw new error_1.MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n      }\n\n      this.maxStalenessSeconds = options.maxStalenessSeconds; // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n      //       topology has a lower value then a MongoError will be thrown during server selection.\n\n      this.minWireVersion = 5;\n    }\n\n    if (this.mode === ReadPreference.PRIMARY) {\n      if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n      }\n\n      if (this.maxStalenessSeconds) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with maxStalenessSeconds');\n      }\n\n      if (this.hedge) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with hedge');\n      }\n    }\n  } // Support the deprecated `preference` property introduced in the porcelain layer\n\n\n  get preference() {\n    return this.mode;\n  }\n\n  static fromString(mode) {\n    return new ReadPreference(mode);\n  }\n  /**\n   * Construct a ReadPreference given an options object.\n   *\n   * @param options - The options object from which to extract the read preference.\n   */\n\n\n  static fromOptions(options) {\n    var _a, _b, _c;\n\n    if (!options) return;\n    const readPreference = (_a = options.readPreference) !== null && _a !== void 0 ? _a : (_b = options.session) === null || _b === void 0 ? void 0 : _b.transaction.options.readPreference;\n    const readPreferenceTags = options.readPreferenceTags;\n\n    if (readPreference == null) {\n      return;\n    }\n\n    if (typeof readPreference === 'string') {\n      return new ReadPreference(readPreference, readPreferenceTags);\n    } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n      const mode = readPreference.mode || readPreference.preference;\n\n      if (mode && typeof mode === 'string') {\n        return new ReadPreference(mode, (_c = readPreference.tags) !== null && _c !== void 0 ? _c : readPreferenceTags, {\n          maxStalenessSeconds: readPreference.maxStalenessSeconds,\n          hedge: options.hedge\n        });\n      }\n    }\n\n    if (readPreferenceTags) {\n      readPreference.tags = readPreferenceTags;\n    }\n\n    return readPreference;\n  }\n  /**\n   * Replaces options.readPreference with a ReadPreference instance\n   */\n\n\n  static translate(options) {\n    if (options.readPreference == null) return options;\n    const r = options.readPreference;\n\n    if (typeof r === 'string') {\n      options.readPreference = new ReadPreference(r);\n    } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n      const mode = r.mode || r.preference;\n\n      if (mode && typeof mode === 'string') {\n        options.readPreference = new ReadPreference(mode, r.tags, {\n          maxStalenessSeconds: r.maxStalenessSeconds\n        });\n      }\n    } else if (!(r instanceof ReadPreference)) {\n      throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n    }\n\n    return options;\n  }\n  /**\n   * Validate if a mode is legal\n   *\n   * @param mode - The string representing the read preference mode.\n   */\n\n\n  static isValid(mode) {\n    const VALID_MODES = new Set([ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST, null]);\n    return VALID_MODES.has(mode);\n  }\n  /**\n   * Validate if a mode is legal\n   *\n   * @param mode - The string representing the read preference mode.\n   */\n\n\n  isValid(mode) {\n    return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n  }\n  /**\n   * Indicates that this readPreference needs the \"slaveOk\" bit when sent over the wire\n   *\n   * @see https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#op-query\n   */\n\n\n  slaveOk() {\n    const NEEDS_SLAVEOK = new Set([ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST]);\n    return NEEDS_SLAVEOK.has(this.mode);\n  }\n  /**\n   * Check if the two ReadPreferences are equivalent\n   *\n   * @param readPreference - The read preference with which to check equality\n   */\n\n\n  equals(readPreference) {\n    return readPreference.mode === this.mode;\n  }\n  /** Return JSON representation */\n\n\n  toJSON() {\n    const readPreference = {\n      mode: this.mode\n    };\n    if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n    if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n    if (this.hedge) readPreference.hedge = this.hedge;\n    return readPreference;\n  }\n\n}\n\nexports.ReadPreference = ReadPreference;\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);","map":{"version":3,"names":["Object","defineProperty","exports","value","ReadPreference","ReadPreferenceMode","error_1","require","freeze","primary","primaryPreferred","secondary","secondaryPreferred","nearest","constructor","mode","tags","options","isValid","MongoInvalidArgumentError","JSON","stringify","Array","isArray","undefined","hedge","maxStalenessSeconds","minWireVersion","PRIMARY","length","preference","fromString","fromOptions","_a","_b","_c","readPreference","session","transaction","readPreferenceTags","translate","r","VALID_MODES","Set","PRIMARY_PREFERRED","SECONDARY","SECONDARY_PREFERRED","NEAREST","has","slaveOk","NEEDS_SLAVEOK","equals","toJSON"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/read_preference.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\nconst error_1 = require(\"./error\");\n/** @public */\nexports.ReadPreferenceMode = Object.freeze({\n    primary: 'primary',\n    primaryPreferred: 'primaryPreferred',\n    secondary: 'secondary',\n    secondaryPreferred: 'secondaryPreferred',\n    nearest: 'nearest'\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://docs.mongodb.com/manual/core/read-preference/\n */\nclass ReadPreference {\n    /**\n     * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n     * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n     * @param options - Additional read preference options\n     */\n    constructor(mode, tags, options) {\n        if (!ReadPreference.isValid(mode)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n        }\n        if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n            options = tags;\n            tags = undefined;\n        }\n        else if (tags && !Array.isArray(tags)) {\n            throw new error_1.MongoInvalidArgumentError('ReadPreference tags must be an array');\n        }\n        this.mode = mode;\n        this.tags = tags;\n        this.hedge = options === null || options === void 0 ? void 0 : options.hedge;\n        this.maxStalenessSeconds = undefined;\n        this.minWireVersion = undefined;\n        options = options !== null && options !== void 0 ? options : {};\n        if (options.maxStalenessSeconds != null) {\n            if (options.maxStalenessSeconds <= 0) {\n                throw new error_1.MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n            }\n            this.maxStalenessSeconds = options.maxStalenessSeconds;\n            // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n            //       topology has a lower value then a MongoError will be thrown during server selection.\n            this.minWireVersion = 5;\n        }\n        if (this.mode === ReadPreference.PRIMARY) {\n            if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n            }\n            if (this.maxStalenessSeconds) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with maxStalenessSeconds');\n            }\n            if (this.hedge) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with hedge');\n            }\n        }\n    }\n    // Support the deprecated `preference` property introduced in the porcelain layer\n    get preference() {\n        return this.mode;\n    }\n    static fromString(mode) {\n        return new ReadPreference(mode);\n    }\n    /**\n     * Construct a ReadPreference given an options object.\n     *\n     * @param options - The options object from which to extract the read preference.\n     */\n    static fromOptions(options) {\n        var _a, _b, _c;\n        if (!options)\n            return;\n        const readPreference = (_a = options.readPreference) !== null && _a !== void 0 ? _a : (_b = options.session) === null || _b === void 0 ? void 0 : _b.transaction.options.readPreference;\n        const readPreferenceTags = options.readPreferenceTags;\n        if (readPreference == null) {\n            return;\n        }\n        if (typeof readPreference === 'string') {\n            return new ReadPreference(readPreference, readPreferenceTags);\n        }\n        else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n            const mode = readPreference.mode || readPreference.preference;\n            if (mode && typeof mode === 'string') {\n                return new ReadPreference(mode, (_c = readPreference.tags) !== null && _c !== void 0 ? _c : readPreferenceTags, {\n                    maxStalenessSeconds: readPreference.maxStalenessSeconds,\n                    hedge: options.hedge\n                });\n            }\n        }\n        if (readPreferenceTags) {\n            readPreference.tags = readPreferenceTags;\n        }\n        return readPreference;\n    }\n    /**\n     * Replaces options.readPreference with a ReadPreference instance\n     */\n    static translate(options) {\n        if (options.readPreference == null)\n            return options;\n        const r = options.readPreference;\n        if (typeof r === 'string') {\n            options.readPreference = new ReadPreference(r);\n        }\n        else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n            const mode = r.mode || r.preference;\n            if (mode && typeof mode === 'string') {\n                options.readPreference = new ReadPreference(mode, r.tags, {\n                    maxStalenessSeconds: r.maxStalenessSeconds\n                });\n            }\n        }\n        else if (!(r instanceof ReadPreference)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n        }\n        return options;\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    static isValid(mode) {\n        const VALID_MODES = new Set([\n            ReadPreference.PRIMARY,\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST,\n            null\n        ]);\n        return VALID_MODES.has(mode);\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    isValid(mode) {\n        return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n    }\n    /**\n     * Indicates that this readPreference needs the \"slaveOk\" bit when sent over the wire\n     *\n     * @see https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#op-query\n     */\n    slaveOk() {\n        const NEEDS_SLAVEOK = new Set([\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST\n        ]);\n        return NEEDS_SLAVEOK.has(this.mode);\n    }\n    /**\n     * Check if the two ReadPreferences are equivalent\n     *\n     * @param readPreference - The read preference with which to check equality\n     */\n    equals(readPreference) {\n        return readPreference.mode === this.mode;\n    }\n    /** Return JSON representation */\n    toJSON() {\n        const readPreference = { mode: this.mode };\n        if (Array.isArray(this.tags))\n            readPreference.tags = this.tags;\n        if (this.maxStalenessSeconds)\n            readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n        if (this.hedge)\n            readPreference.hedge = this.hedge;\n        return readPreference;\n    }\n}\nexports.ReadPreference = ReadPreference;\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}