{"ast":null,"code":"\"use strict\"; // Resolves the default auth mechanism according to\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoCredentials = void 0;\n\nconst error_1 = require(\"../../error\");\n\nconst defaultAuthProviders_1 = require(\"./defaultAuthProviders\"); // https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\n\n\nfunction getDefaultAuthMechanism(ismaster) {\n  if (ismaster) {\n    // If ismaster contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(ismaster.saslSupportedMechs)) {\n      return ismaster.saslSupportedMechs.includes(defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA256) ? defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA256 : defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n    } // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n\n\n    if (ismaster.maxWireVersion >= 3) {\n      return defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n  } // Default for wireprotocol < 3\n\n\n  return defaultAuthProviders_1.AuthMechanism.MONGODB_CR;\n}\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\n\n\nclass MongoCredentials {\n  constructor(options) {\n    this.username = options.username;\n    this.password = options.password;\n    this.source = options.source;\n\n    if (!this.source && options.db) {\n      this.source = options.db;\n    }\n\n    this.mechanism = options.mechanism || defaultAuthProviders_1.AuthMechanism.MONGODB_DEFAULT;\n    this.mechanismProperties = options.mechanismProperties || {};\n\n    if (this.mechanism.match(/MONGODB-AWS/i)) {\n      if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n        this.username = process.env.AWS_ACCESS_KEY_ID;\n      }\n\n      if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\n      }\n\n      if (!this.mechanismProperties.AWS_SESSION_TOKEN && process.env.AWS_SESSION_TOKEN) {\n        this.mechanismProperties = { ...this.mechanismProperties,\n          AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n        };\n      }\n    }\n\n    Object.freeze(this.mechanismProperties);\n    Object.freeze(this);\n  }\n  /** Determines if two MongoCredentials objects are equivalent */\n\n\n  equals(other) {\n    return this.mechanism === other.mechanism && this.username === other.username && this.password === other.password && this.source === other.source;\n  }\n  /**\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\n   * based on the server version and server supported sasl mechanisms.\n   *\n   * @param ismaster - An ismaster response from the server\n   */\n\n\n  resolveAuthMechanism(ismaster) {\n    // If the mechanism is not \"default\", then it does not need to be resolved\n    if (this.mechanism.match(/DEFAULT/i)) {\n      return new MongoCredentials({\n        username: this.username,\n        password: this.password,\n        source: this.source,\n        mechanism: getDefaultAuthMechanism(ismaster),\n        mechanismProperties: this.mechanismProperties\n      });\n    }\n\n    return this;\n  }\n\n  validate() {\n    if ((this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI || this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_CR || this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_PLAIN || this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA1 || this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA256) && !this.username) {\n      throw new error_1.MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n    }\n\n    if (this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI || this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_AWS || this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509) {\n      if (this.source != null && this.source !== '$external') {\n        // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n        throw new error_1.MongoAPIError(`Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`);\n      }\n    }\n\n    if (this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n      throw new error_1.MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n    }\n\n    if (this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n      if (this.password === '') {\n        Reflect.set(this, 'password', undefined);\n        return;\n      } // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n\n\n      throw new error_1.MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n    }\n  }\n\n  static merge(creds, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n\n    return new MongoCredentials({\n      username: (_b = (_a = options.username) !== null && _a !== void 0 ? _a : creds === null || creds === void 0 ? void 0 : creds.username) !== null && _b !== void 0 ? _b : '',\n      password: (_d = (_c = options.password) !== null && _c !== void 0 ? _c : creds === null || creds === void 0 ? void 0 : creds.password) !== null && _d !== void 0 ? _d : '',\n      mechanism: (_f = (_e = options.mechanism) !== null && _e !== void 0 ? _e : creds === null || creds === void 0 ? void 0 : creds.mechanism) !== null && _f !== void 0 ? _f : defaultAuthProviders_1.AuthMechanism.MONGODB_DEFAULT,\n      mechanismProperties: (_h = (_g = options.mechanismProperties) !== null && _g !== void 0 ? _g : creds === null || creds === void 0 ? void 0 : creds.mechanismProperties) !== null && _h !== void 0 ? _h : {},\n      source: (_l = (_k = (_j = options.source) !== null && _j !== void 0 ? _j : options.db) !== null && _k !== void 0 ? _k : creds === null || creds === void 0 ? void 0 : creds.source) !== null && _l !== void 0 ? _l : 'admin'\n    });\n  }\n\n}\n\nexports.MongoCredentials = MongoCredentials;","map":{"version":3,"names":["Object","defineProperty","exports","value","MongoCredentials","error_1","require","defaultAuthProviders_1","getDefaultAuthMechanism","ismaster","Array","isArray","saslSupportedMechs","includes","AuthMechanism","MONGODB_SCRAM_SHA256","MONGODB_SCRAM_SHA1","maxWireVersion","MONGODB_CR","constructor","options","username","password","source","db","mechanism","MONGODB_DEFAULT","mechanismProperties","match","process","env","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","freeze","equals","other","resolveAuthMechanism","validate","MONGODB_GSSAPI","MONGODB_PLAIN","MongoMissingCredentialsError","MONGODB_AWS","MONGODB_X509","MongoAPIError","Reflect","set","undefined","merge","creds","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/cmap/auth/mongo_credentials.js"],"sourcesContent":["\"use strict\";\n// Resolves the default auth mechanism according to\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoCredentials = void 0;\nconst error_1 = require(\"../../error\");\nconst defaultAuthProviders_1 = require(\"./defaultAuthProviders\");\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(ismaster) {\n    if (ismaster) {\n        // If ismaster contains saslSupportedMechs, use scram-sha-256\n        // if it is available, else scram-sha-1\n        if (Array.isArray(ismaster.saslSupportedMechs)) {\n            return ismaster.saslSupportedMechs.includes(defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA256)\n                ? defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA256\n                : defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n        // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n        if (ismaster.maxWireVersion >= 3) {\n            return defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n    }\n    // Default for wireprotocol < 3\n    return defaultAuthProviders_1.AuthMechanism.MONGODB_CR;\n}\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nclass MongoCredentials {\n    constructor(options) {\n        this.username = options.username;\n        this.password = options.password;\n        this.source = options.source;\n        if (!this.source && options.db) {\n            this.source = options.db;\n        }\n        this.mechanism = options.mechanism || defaultAuthProviders_1.AuthMechanism.MONGODB_DEFAULT;\n        this.mechanismProperties = options.mechanismProperties || {};\n        if (this.mechanism.match(/MONGODB-AWS/i)) {\n            if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n                this.username = process.env.AWS_ACCESS_KEY_ID;\n            }\n            if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n                this.password = process.env.AWS_SECRET_ACCESS_KEY;\n            }\n            if (!this.mechanismProperties.AWS_SESSION_TOKEN && process.env.AWS_SESSION_TOKEN) {\n                this.mechanismProperties = {\n                    ...this.mechanismProperties,\n                    AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n                };\n            }\n        }\n        Object.freeze(this.mechanismProperties);\n        Object.freeze(this);\n    }\n    /** Determines if two MongoCredentials objects are equivalent */\n    equals(other) {\n        return (this.mechanism === other.mechanism &&\n            this.username === other.username &&\n            this.password === other.password &&\n            this.source === other.source);\n    }\n    /**\n     * If the authentication mechanism is set to \"default\", resolves the authMechanism\n     * based on the server version and server supported sasl mechanisms.\n     *\n     * @param ismaster - An ismaster response from the server\n     */\n    resolveAuthMechanism(ismaster) {\n        // If the mechanism is not \"default\", then it does not need to be resolved\n        if (this.mechanism.match(/DEFAULT/i)) {\n            return new MongoCredentials({\n                username: this.username,\n                password: this.password,\n                source: this.source,\n                mechanism: getDefaultAuthMechanism(ismaster),\n                mechanismProperties: this.mechanismProperties\n            });\n        }\n        return this;\n    }\n    validate() {\n        if ((this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI ||\n            this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_CR ||\n            this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_PLAIN ||\n            this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA1 ||\n            this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_SCRAM_SHA256) &&\n            !this.username) {\n            throw new error_1.MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n        }\n        if (this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI ||\n            this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_AWS ||\n            this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509) {\n            if (this.source != null && this.source !== '$external') {\n                // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n                throw new error_1.MongoAPIError(`Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`);\n            }\n        }\n        if (this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n        }\n        if (this.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n            if (this.password === '') {\n                Reflect.set(this, 'password', undefined);\n                return;\n            }\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n        }\n    }\n    static merge(creds, options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        return new MongoCredentials({\n            username: (_b = (_a = options.username) !== null && _a !== void 0 ? _a : creds === null || creds === void 0 ? void 0 : creds.username) !== null && _b !== void 0 ? _b : '',\n            password: (_d = (_c = options.password) !== null && _c !== void 0 ? _c : creds === null || creds === void 0 ? void 0 : creds.password) !== null && _d !== void 0 ? _d : '',\n            mechanism: (_f = (_e = options.mechanism) !== null && _e !== void 0 ? _e : creds === null || creds === void 0 ? void 0 : creds.mechanism) !== null && _f !== void 0 ? _f : defaultAuthProviders_1.AuthMechanism.MONGODB_DEFAULT,\n            mechanismProperties: (_h = (_g = options.mechanismProperties) !== null && _g !== void 0 ? _g : creds === null || creds === void 0 ? void 0 : creds.mechanismProperties) !== null && _h !== void 0 ? _h : {},\n            source: (_l = (_k = (_j = options.source) !== null && _j !== void 0 ? _j : options.db) !== null && _k !== void 0 ? _k : creds === null || creds === void 0 ? void 0 : creds.source) !== null && _l !== void 0 ? _l : 'admin'\n        });\n    }\n}\nexports.MongoCredentials = MongoCredentials;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}