{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connect = exports.MONGO_CLIENT_EVENTS = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst topology_1 = require(\"../sdam/topology\");\n\nconst connection_string_1 = require(\"../connection_string\");\n\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\n\nconst connection_1 = require(\"../cmap/connection\");\n\nconst server_1 = require(\"../sdam/server\");\n/** @public */\n\n\nexports.MONGO_CLIENT_EVENTS = [...connection_pool_1.CMAP_EVENTS, ...connection_1.APM_EVENTS, ...topology_1.TOPOLOGY_EVENTS, ...server_1.HEARTBEAT_EVENTS];\n\nfunction connect(mongoClient, options, callback) {\n  if (!callback) {\n    throw new error_1.MongoInvalidArgumentError('Callback function must be provided');\n  } // If a connection already been established, we can terminate early\n\n\n  if (mongoClient.topology && mongoClient.topology.isConnected()) {\n    return callback(undefined, mongoClient);\n  }\n\n  const logger = mongoClient.logger;\n\n  const connectCallback = err => {\n    const warningMessage = 'seed list contains no mongos proxies, replicaset connections requires ' + 'the parameter replicaSet to be supplied in the URI or options object, ' + 'mongodb://server:port/db?replicaSet=name';\n\n    if (err && err.message === 'no mongos proxies found in seed list') {\n      if (logger.isWarn()) {\n        logger.warn(warningMessage);\n      } // Return a more specific error message for MongoClient.connect\n      // TODO(NODE-3483)\n\n\n      return callback(new error_1.MongoRuntimeError(warningMessage));\n    }\n\n    callback(err, mongoClient);\n  };\n\n  if (typeof options.srvHost === 'string') {\n    return connection_string_1.resolveSRVRecord(options, (err, hosts) => {\n      if (err || !hosts) return callback(err);\n\n      for (const [index, host] of hosts.entries()) {\n        options.hosts[index] = host;\n      }\n\n      return createTopology(mongoClient, options, connectCallback);\n    });\n  }\n\n  return createTopology(mongoClient, options, connectCallback);\n}\n\nexports.connect = connect;\n\nfunction createTopology(mongoClient, options, callback) {\n  // Create the topology\n  const topology = new topology_1.Topology(options.hosts, options); // Events can be emitted before initialization is complete so we have to\n  // save the reference to the topology on the client ASAP if the event handlers need to access it\n\n  mongoClient.topology = topology;\n  topology.once(topology_1.Topology.OPEN, () => mongoClient.emit('open', mongoClient));\n\n  for (const event of exports.MONGO_CLIENT_EVENTS) {\n    topology.on(event, (...args) => mongoClient.emit(event, ...args));\n  } // initialize CSFLE if requested\n\n\n  if (mongoClient.autoEncrypter) {\n    mongoClient.autoEncrypter.init(err => {\n      if (err) {\n        return callback(err);\n      }\n\n      topology.connect(options, err => {\n        if (err) {\n          topology.close({\n            force: true\n          });\n          return callback(err);\n        }\n\n        options.encrypter.connectInternalClient(error => {\n          if (error) return callback(error);\n          callback(undefined, topology);\n        });\n      });\n    });\n    return;\n  } // otherwise connect normally\n\n\n  topology.connect(options, err => {\n    if (err) {\n      topology.close({\n        force: true\n      });\n      return callback(err);\n    }\n\n    callback(undefined, topology);\n    return;\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","connect","MONGO_CLIENT_EVENTS","error_1","require","topology_1","connection_string_1","connection_pool_1","connection_1","server_1","CMAP_EVENTS","APM_EVENTS","TOPOLOGY_EVENTS","HEARTBEAT_EVENTS","mongoClient","options","callback","MongoInvalidArgumentError","topology","isConnected","undefined","logger","connectCallback","err","warningMessage","message","isWarn","warn","MongoRuntimeError","srvHost","resolveSRVRecord","hosts","index","host","entries","createTopology","Topology","once","OPEN","emit","event","on","args","autoEncrypter","init","close","force","encrypter","connectInternalClient","error"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/operations/connect.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.connect = exports.MONGO_CLIENT_EVENTS = void 0;\nconst error_1 = require(\"../error\");\nconst topology_1 = require(\"../sdam/topology\");\nconst connection_string_1 = require(\"../connection_string\");\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\nconst connection_1 = require(\"../cmap/connection\");\nconst server_1 = require(\"../sdam/server\");\n/** @public */\nexports.MONGO_CLIENT_EVENTS = [\n    ...connection_pool_1.CMAP_EVENTS,\n    ...connection_1.APM_EVENTS,\n    ...topology_1.TOPOLOGY_EVENTS,\n    ...server_1.HEARTBEAT_EVENTS\n];\nfunction connect(mongoClient, options, callback) {\n    if (!callback) {\n        throw new error_1.MongoInvalidArgumentError('Callback function must be provided');\n    }\n    // If a connection already been established, we can terminate early\n    if (mongoClient.topology && mongoClient.topology.isConnected()) {\n        return callback(undefined, mongoClient);\n    }\n    const logger = mongoClient.logger;\n    const connectCallback = err => {\n        const warningMessage = 'seed list contains no mongos proxies, replicaset connections requires ' +\n            'the parameter replicaSet to be supplied in the URI or options object, ' +\n            'mongodb://server:port/db?replicaSet=name';\n        if (err && err.message === 'no mongos proxies found in seed list') {\n            if (logger.isWarn()) {\n                logger.warn(warningMessage);\n            }\n            // Return a more specific error message for MongoClient.connect\n            // TODO(NODE-3483)\n            return callback(new error_1.MongoRuntimeError(warningMessage));\n        }\n        callback(err, mongoClient);\n    };\n    if (typeof options.srvHost === 'string') {\n        return connection_string_1.resolveSRVRecord(options, (err, hosts) => {\n            if (err || !hosts)\n                return callback(err);\n            for (const [index, host] of hosts.entries()) {\n                options.hosts[index] = host;\n            }\n            return createTopology(mongoClient, options, connectCallback);\n        });\n    }\n    return createTopology(mongoClient, options, connectCallback);\n}\nexports.connect = connect;\nfunction createTopology(mongoClient, options, callback) {\n    // Create the topology\n    const topology = new topology_1.Topology(options.hosts, options);\n    // Events can be emitted before initialization is complete so we have to\n    // save the reference to the topology on the client ASAP if the event handlers need to access it\n    mongoClient.topology = topology;\n    topology.once(topology_1.Topology.OPEN, () => mongoClient.emit('open', mongoClient));\n    for (const event of exports.MONGO_CLIENT_EVENTS) {\n        topology.on(event, (...args) => mongoClient.emit(event, ...args));\n    }\n    // initialize CSFLE if requested\n    if (mongoClient.autoEncrypter) {\n        mongoClient.autoEncrypter.init(err => {\n            if (err) {\n                return callback(err);\n            }\n            topology.connect(options, err => {\n                if (err) {\n                    topology.close({ force: true });\n                    return callback(err);\n                }\n                options.encrypter.connectInternalClient(error => {\n                    if (error)\n                        return callback(error);\n                    callback(undefined, topology);\n                });\n            });\n        });\n        return;\n    }\n    // otherwise connect normally\n    topology.connect(options, err => {\n        if (err) {\n            topology.close({ force: true });\n            return callback(err);\n        }\n        callback(undefined, topology);\n        return;\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}