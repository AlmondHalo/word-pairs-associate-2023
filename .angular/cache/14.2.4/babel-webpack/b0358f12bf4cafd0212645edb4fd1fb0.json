{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OrderedBulkOperation = void 0;\n\nconst BSON = require(\"../bson\");\n\nconst common_1 = require(\"./common\");\n\nconst error_1 = require(\"../error\");\n/** @public */\n\n\nclass OrderedBulkOperation extends common_1.BulkOperationBase {\n  constructor(collection, options) {\n    super(collection, options, true);\n  }\n\n  addToOperationsList(batchType, document) {\n    // Get the bsonSize\n    const bsonSize = BSON.calculateObjectSize(document, {\n      checkKeys: false,\n      // Since we don't know what the user selected for BSON options here,\n      // err on the safe side, and check the size with ignoreUndefined: false.\n      ignoreUndefined: false\n    }); // Throw error if the doc is bigger than the max BSON size\n\n    if (bsonSize >= this.s.maxBsonObjectSize) // TODO(NODE-3483): Change this to MongoBSONError\n      throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`); // Create a new batch object if we don't have a current one\n\n    if (this.s.currentBatch == null) {\n      this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n    }\n\n    const maxKeySize = this.s.maxKeySize; // Check if we need to create a new batch\n\n    if ( // New batch if we exceed the max batch op size\n    this.s.currentBatchSize + 1 >= this.s.maxWriteBatchSize || // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n    // since we can't sent an empty batch\n    this.s.currentBatchSize > 0 && this.s.currentBatchSizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes || // New batch if the new op does not have the same op type as the current batch\n    this.s.currentBatch.batchType !== batchType) {\n      // Save the batch to the execution stack\n      this.s.batches.push(this.s.currentBatch); // Create a new batch\n\n      this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex); // Reset the current size trackers\n\n      this.s.currentBatchSize = 0;\n      this.s.currentBatchSizeBytes = 0;\n    }\n\n    if (batchType === common_1.BatchType.INSERT) {\n      this.s.bulkResult.insertedIds.push({\n        index: this.s.currentIndex,\n        _id: document._id\n      });\n    } // We have an array of documents\n\n\n    if (Array.isArray(document)) {\n      throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n    }\n\n    this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n    this.s.currentBatch.operations.push(document);\n    this.s.currentBatchSize += 1;\n    this.s.currentBatchSizeBytes += maxKeySize + bsonSize;\n    this.s.currentIndex += 1;\n    return this;\n  }\n\n}\n\nexports.OrderedBulkOperation = OrderedBulkOperation;","map":{"version":3,"names":["Object","defineProperty","exports","value","OrderedBulkOperation","BSON","require","common_1","error_1","BulkOperationBase","constructor","collection","options","addToOperationsList","batchType","document","bsonSize","calculateObjectSize","checkKeys","ignoreUndefined","s","maxBsonObjectSize","MongoInvalidArgumentError","currentBatch","Batch","currentIndex","maxKeySize","currentBatchSize","maxWriteBatchSize","currentBatchSizeBytes","maxBatchSizeBytes","batches","push","BatchType","INSERT","bulkResult","insertedIds","index","_id","Array","isArray","originalIndexes","operations"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/bulk/ordered.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OrderedBulkOperation = void 0;\nconst BSON = require(\"../bson\");\nconst common_1 = require(\"./common\");\nconst error_1 = require(\"../error\");\n/** @public */\nclass OrderedBulkOperation extends common_1.BulkOperationBase {\n    constructor(collection, options) {\n        super(collection, options, true);\n    }\n    addToOperationsList(batchType, document) {\n        // Get the bsonSize\n        const bsonSize = BSON.calculateObjectSize(document, {\n            checkKeys: false,\n            // Since we don't know what the user selected for BSON options here,\n            // err on the safe side, and check the size with ignoreUndefined: false.\n            ignoreUndefined: false\n        });\n        // Throw error if the doc is bigger than the max BSON size\n        if (bsonSize >= this.s.maxBsonObjectSize)\n            // TODO(NODE-3483): Change this to MongoBSONError\n            throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n        // Create a new batch object if we don't have a current one\n        if (this.s.currentBatch == null) {\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        const maxKeySize = this.s.maxKeySize;\n        // Check if we need to create a new batch\n        if (\n        // New batch if we exceed the max batch op size\n        this.s.currentBatchSize + 1 >= this.s.maxWriteBatchSize ||\n            // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n            // since we can't sent an empty batch\n            (this.s.currentBatchSize > 0 &&\n                this.s.currentBatchSizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes) ||\n            // New batch if the new op does not have the same op type as the current batch\n            this.s.currentBatch.batchType !== batchType) {\n            // Save the batch to the execution stack\n            this.s.batches.push(this.s.currentBatch);\n            // Create a new batch\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n            // Reset the current size trackers\n            this.s.currentBatchSize = 0;\n            this.s.currentBatchSizeBytes = 0;\n        }\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.bulkResult.insertedIds.push({\n                index: this.s.currentIndex,\n                _id: document._id\n            });\n        }\n        // We have an array of documents\n        if (Array.isArray(document)) {\n            throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n        }\n        this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n        this.s.currentBatch.operations.push(document);\n        this.s.currentBatchSize += 1;\n        this.s.currentBatchSizeBytes += maxKeySize + bsonSize;\n        this.s.currentIndex += 1;\n        return this;\n    }\n}\nexports.OrderedBulkOperation = OrderedBulkOperation;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}