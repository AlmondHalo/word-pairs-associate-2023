{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GSSAPI = void 0;\n\nconst auth_provider_1 = require(\"./auth_provider\");\n\nconst error_1 = require(\"../../error\");\n\nconst deps_1 = require(\"../../deps\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst dns = require(\"dns\");\n\nclass GSSAPI extends auth_provider_1.AuthProvider {\n  auth(authContext, callback) {\n    const {\n      connection,\n      credentials\n    } = authContext;\n    if (credentials == null) return callback(new error_1.MongoMissingCredentialsError('Credentials required for GSSAPI authentication'));\n    const {\n      username\n    } = credentials;\n\n    function externalCommand(command, cb) {\n      return connection.command(utils_1.ns('$external.$cmd'), command, undefined, cb);\n    }\n\n    makeKerberosClient(authContext, (err, client) => {\n      if (err) return callback(err);\n      if (client == null) return callback(new error_1.MongoMissingDependencyError('GSSAPI client missing'));\n      client.step('', (err, payload) => {\n        if (err) return callback(err);\n        externalCommand(saslStart(payload), (err, result) => {\n          if (err) return callback(err);\n          if (result == null) return callback();\n          negotiate(client, 10, result.payload, (err, payload) => {\n            if (err) return callback(err);\n            externalCommand(saslContinue(payload, result.conversationId), (err, result) => {\n              if (err) return callback(err);\n              if (result == null) return callback();\n              finalize(client, username, result.payload, (err, payload) => {\n                if (err) return callback(err);\n                externalCommand({\n                  saslContinue: 1,\n                  conversationId: result.conversationId,\n                  payload\n                }, (err, result) => {\n                  if (err) return callback(err);\n                  callback(undefined, result);\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n\n}\n\nexports.GSSAPI = GSSAPI;\n\nfunction makeKerberosClient(authContext, callback) {\n  var _a;\n\n  const {\n    hostAddress\n  } = authContext.options;\n  const {\n    credentials\n  } = authContext;\n\n  if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n    return callback(new error_1.MongoInvalidArgumentError('Connection must have host and port and credentials defined.'));\n  }\n\n  if ('kModuleError' in deps_1.Kerberos) {\n    return callback(deps_1.Kerberos['kModuleError']);\n  }\n\n  const {\n    initializeClient\n  } = deps_1.Kerberos;\n  const {\n    username,\n    password\n  } = credentials;\n  const mechanismProperties = credentials.mechanismProperties;\n  const serviceName = (_a = mechanismProperties.SERVICE_NAME) !== null && _a !== void 0 ? _a : 'mongodb';\n  performGssapiCanonicalizeHostName(hostAddress.host, mechanismProperties, (err, host) => {\n    if (err) return callback(err);\n    const initOptions = {};\n\n    if (password != null) {\n      Object.assign(initOptions, {\n        user: username,\n        password: password\n      });\n    }\n\n    let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${host}`;\n\n    if ('SERVICE_REALM' in mechanismProperties) {\n      spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n    }\n\n    initializeClient(spn, initOptions, (err, client) => {\n      // TODO(NODE-3483)\n      if (err) return callback(new error_1.MongoRuntimeError(err));\n      callback(undefined, client);\n    });\n  });\n}\n\nfunction saslStart(payload) {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload,\n    autoAuthorize: 1\n  };\n}\n\nfunction saslContinue(payload, conversationId) {\n  return {\n    saslContinue: 1,\n    conversationId,\n    payload\n  };\n}\n\nfunction negotiate(client, retries, payload, callback) {\n  client.step(payload, (err, response) => {\n    // Retries exhausted, raise error\n    if (err && retries === 0) return callback(err); // Adjust number of retries and call step again\n\n    if (err) return negotiate(client, retries - 1, payload, callback); // Return the payload\n\n    callback(undefined, response || '');\n  });\n}\n\nfunction finalize(client, user, payload, callback) {\n  // GSS Client Unwrap\n  client.unwrap(payload, (err, response) => {\n    if (err) return callback(err); // Wrap the response\n\n    client.wrap(response || '', {\n      user\n    }, (err, wrapped) => {\n      if (err) return callback(err); // Return the payload\n\n      callback(undefined, wrapped);\n    });\n  });\n}\n\nfunction performGssapiCanonicalizeHostName(host, mechanismProperties, callback) {\n  if (!mechanismProperties.gssapiCanonicalizeHostName) return callback(undefined, host); // Attempt to resolve the host name\n\n  dns.resolveCname(host, (err, r) => {\n    if (err) return callback(err); // Get the first resolve host id\n\n    if (Array.isArray(r) && r.length > 0) {\n      return callback(undefined, r[0]);\n    }\n\n    callback(undefined, host);\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","GSSAPI","auth_provider_1","require","error_1","deps_1","utils_1","dns","AuthProvider","auth","authContext","callback","connection","credentials","MongoMissingCredentialsError","username","externalCommand","command","cb","ns","undefined","makeKerberosClient","err","client","MongoMissingDependencyError","step","payload","saslStart","result","negotiate","saslContinue","conversationId","finalize","_a","hostAddress","options","host","MongoInvalidArgumentError","Kerberos","initializeClient","password","mechanismProperties","serviceName","SERVICE_NAME","performGssapiCanonicalizeHostName","initOptions","assign","user","spn","process","platform","SERVICE_REALM","MongoRuntimeError","mechanism","autoAuthorize","retries","response","unwrap","wrap","wrapped","gssapiCanonicalizeHostName","resolveCname","r","Array","isArray","length"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/cmap/auth/gssapi.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GSSAPI = void 0;\nconst auth_provider_1 = require(\"./auth_provider\");\nconst error_1 = require(\"../../error\");\nconst deps_1 = require(\"../../deps\");\nconst utils_1 = require(\"../../utils\");\nconst dns = require(\"dns\");\nclass GSSAPI extends auth_provider_1.AuthProvider {\n    auth(authContext, callback) {\n        const { connection, credentials } = authContext;\n        if (credentials == null)\n            return callback(new error_1.MongoMissingCredentialsError('Credentials required for GSSAPI authentication'));\n        const { username } = credentials;\n        function externalCommand(command, cb) {\n            return connection.command(utils_1.ns('$external.$cmd'), command, undefined, cb);\n        }\n        makeKerberosClient(authContext, (err, client) => {\n            if (err)\n                return callback(err);\n            if (client == null)\n                return callback(new error_1.MongoMissingDependencyError('GSSAPI client missing'));\n            client.step('', (err, payload) => {\n                if (err)\n                    return callback(err);\n                externalCommand(saslStart(payload), (err, result) => {\n                    if (err)\n                        return callback(err);\n                    if (result == null)\n                        return callback();\n                    negotiate(client, 10, result.payload, (err, payload) => {\n                        if (err)\n                            return callback(err);\n                        externalCommand(saslContinue(payload, result.conversationId), (err, result) => {\n                            if (err)\n                                return callback(err);\n                            if (result == null)\n                                return callback();\n                            finalize(client, username, result.payload, (err, payload) => {\n                                if (err)\n                                    return callback(err);\n                                externalCommand({\n                                    saslContinue: 1,\n                                    conversationId: result.conversationId,\n                                    payload\n                                }, (err, result) => {\n                                    if (err)\n                                        return callback(err);\n                                    callback(undefined, result);\n                                });\n                            });\n                        });\n                    });\n                });\n            });\n        });\n    }\n}\nexports.GSSAPI = GSSAPI;\nfunction makeKerberosClient(authContext, callback) {\n    var _a;\n    const { hostAddress } = authContext.options;\n    const { credentials } = authContext;\n    if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n        return callback(new error_1.MongoInvalidArgumentError('Connection must have host and port and credentials defined.'));\n    }\n    if ('kModuleError' in deps_1.Kerberos) {\n        return callback(deps_1.Kerberos['kModuleError']);\n    }\n    const { initializeClient } = deps_1.Kerberos;\n    const { username, password } = credentials;\n    const mechanismProperties = credentials.mechanismProperties;\n    const serviceName = (_a = mechanismProperties.SERVICE_NAME) !== null && _a !== void 0 ? _a : 'mongodb';\n    performGssapiCanonicalizeHostName(hostAddress.host, mechanismProperties, (err, host) => {\n        if (err)\n            return callback(err);\n        const initOptions = {};\n        if (password != null) {\n            Object.assign(initOptions, { user: username, password: password });\n        }\n        let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${host}`;\n        if ('SERVICE_REALM' in mechanismProperties) {\n            spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n        }\n        initializeClient(spn, initOptions, (err, client) => {\n            // TODO(NODE-3483)\n            if (err)\n                return callback(new error_1.MongoRuntimeError(err));\n            callback(undefined, client);\n        });\n    });\n}\nfunction saslStart(payload) {\n    return {\n        saslStart: 1,\n        mechanism: 'GSSAPI',\n        payload,\n        autoAuthorize: 1\n    };\n}\nfunction saslContinue(payload, conversationId) {\n    return {\n        saslContinue: 1,\n        conversationId,\n        payload\n    };\n}\nfunction negotiate(client, retries, payload, callback) {\n    client.step(payload, (err, response) => {\n        // Retries exhausted, raise error\n        if (err && retries === 0)\n            return callback(err);\n        // Adjust number of retries and call step again\n        if (err)\n            return negotiate(client, retries - 1, payload, callback);\n        // Return the payload\n        callback(undefined, response || '');\n    });\n}\nfunction finalize(client, user, payload, callback) {\n    // GSS Client Unwrap\n    client.unwrap(payload, (err, response) => {\n        if (err)\n            return callback(err);\n        // Wrap the response\n        client.wrap(response || '', { user }, (err, wrapped) => {\n            if (err)\n                return callback(err);\n            // Return the payload\n            callback(undefined, wrapped);\n        });\n    });\n}\nfunction performGssapiCanonicalizeHostName(host, mechanismProperties, callback) {\n    if (!mechanismProperties.gssapiCanonicalizeHostName)\n        return callback(undefined, host);\n    // Attempt to resolve the host name\n    dns.resolveCname(host, (err, r) => {\n        if (err)\n            return callback(err);\n        // Get the first resolve host id\n        if (Array.isArray(r) && r.length > 0) {\n            return callback(undefined, r[0]);\n        }\n        callback(undefined, host);\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}