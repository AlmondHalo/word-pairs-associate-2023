{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommaAndColonSeparatedRecord = void 0;\n\nconst whatwg_url_1 = require(\"whatwg-url\");\n\nconst DUMMY_HOSTNAME = '__this_is_a_placeholder__';\nconst HOSTS_REGEX = new RegExp(String.raw`(?<protocol>mongodb(?:\\+srv|)):\\/\\/(?:(?<username>[^:]*)(?::(?<password>[^@]*))?@)?(?<hosts>(?!:)[^\\/?@]+)(?<rest>.*)`);\n\nclass CaseInsensitiveMap extends Map {\n  delete(name) {\n    return super.delete(this._normalizeKey(name));\n  }\n\n  get(name) {\n    return super.get(this._normalizeKey(name));\n  }\n\n  has(name) {\n    return super.has(this._normalizeKey(name));\n  }\n\n  set(name, value) {\n    return super.set(this._normalizeKey(name), value);\n  }\n\n  _normalizeKey(name) {\n    name = `${name}`;\n\n    for (const key of this.keys()) {\n      if (key.toLowerCase() === name.toLowerCase()) {\n        name = key;\n        break;\n      }\n    }\n\n    return name;\n  }\n\n}\n\nconst caseInsenstiveURLSearchParams = Ctor => class CaseInsenstiveURLSearchParams extends Ctor {\n  append(name, value) {\n    return super.append(this._normalizeKey(name), value);\n  }\n\n  delete(name) {\n    return super.delete(this._normalizeKey(name));\n  }\n\n  get(name) {\n    return super.get(this._normalizeKey(name));\n  }\n\n  getAll(name) {\n    return super.getAll(this._normalizeKey(name));\n  }\n\n  has(name) {\n    return super.has(this._normalizeKey(name));\n  }\n\n  set(name, value) {\n    return super.set(this._normalizeKey(name), value);\n  }\n\n  _normalizeKey(name) {\n    return CaseInsensitiveMap.prototype._normalizeKey.call(this, name);\n  }\n\n};\n\nclass URLWithoutHost extends whatwg_url_1.URL {}\n\nclass MongoParseError extends Error {\n  get name() {\n    return 'MongoParseError';\n  }\n\n}\n\nclass ConnectionString extends URLWithoutHost {\n  constructor(uri) {\n    var _a;\n\n    const match = uri.match(HOSTS_REGEX);\n\n    if (!match) {\n      throw new MongoParseError(`Invalid connection string \"${uri}\"`);\n    }\n\n    const {\n      protocol,\n      username,\n      password,\n      hosts,\n      rest\n    } = (_a = match.groups) !== null && _a !== void 0 ? _a : {};\n\n    if (!protocol || !hosts) {\n      throw new MongoParseError(`Protocol and host list are required in \"${uri}\"`);\n    }\n\n    try {\n      decodeURIComponent(username !== null && username !== void 0 ? username : '');\n      decodeURIComponent(password !== null && password !== void 0 ? password : '');\n    } catch (err) {\n      throw new MongoParseError(err.message);\n    }\n\n    const illegalCharacters = new RegExp(String.raw`[:/?#\\[\\]@]`, 'gi');\n\n    if (username === null || username === void 0 ? void 0 : username.match(illegalCharacters)) {\n      throw new MongoParseError(`Username contains unescaped characters ${username}`);\n    }\n\n    if (!username || !password) {\n      const uriWithoutProtocol = uri.replace(`${protocol}://`, '');\n\n      if (uriWithoutProtocol.startsWith('@') || uriWithoutProtocol.startsWith(':')) {\n        throw new MongoParseError('URI contained empty userinfo section');\n      }\n    }\n\n    if (password === null || password === void 0 ? void 0 : password.match(illegalCharacters)) {\n      throw new MongoParseError('Password contains unescaped characters');\n    }\n\n    let authString = '';\n    if (typeof username === 'string') authString += username;\n    if (typeof password === 'string') authString += `:${password}`;\n    if (authString) authString += '@';\n    super(`${protocol.toLowerCase()}://${authString}${DUMMY_HOSTNAME}${rest}`);\n    this._hosts = hosts.split(',');\n\n    if (this.isSRV && this.hosts.length !== 1) {\n      throw new MongoParseError('mongodb+srv URI cannot have multiple service names');\n    }\n\n    if (this.isSRV && this.hosts.some(host => host.includes(':'))) {\n      throw new MongoParseError('mongodb+srv URI cannot have port number');\n    }\n\n    if (!this.pathname) {\n      this.pathname = '/';\n    }\n\n    Object.setPrototypeOf(this.searchParams, caseInsenstiveURLSearchParams(this.searchParams.constructor).prototype);\n  }\n\n  get host() {\n    return DUMMY_HOSTNAME;\n  }\n\n  set host(_ignored) {\n    throw new Error('No single host for connection string');\n  }\n\n  get hostname() {\n    return DUMMY_HOSTNAME;\n  }\n\n  set hostname(_ignored) {\n    throw new Error('No single host for connection string');\n  }\n\n  get port() {\n    return '';\n  }\n\n  set port(_ignored) {\n    throw new Error('No single host for connection string');\n  }\n\n  get href() {\n    return this.toString();\n  }\n\n  set href(_ignored) {\n    throw new Error('Cannot set href for connection strings');\n  }\n\n  get isSRV() {\n    return this.protocol.includes('srv');\n  }\n\n  get hosts() {\n    return this._hosts;\n  }\n\n  set hosts(list) {\n    this._hosts = list;\n  }\n\n  toString() {\n    return super.toString().replace(DUMMY_HOSTNAME, this.hosts.join(','));\n  }\n\n  clone() {\n    return new ConnectionString(this.toString());\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    const {\n      href,\n      origin,\n      protocol,\n      username,\n      password,\n      hosts,\n      pathname,\n      search,\n      searchParams,\n      hash\n    } = this;\n    return {\n      href,\n      origin,\n      protocol,\n      username,\n      password,\n      hosts,\n      pathname,\n      search,\n      searchParams,\n      hash\n    };\n  }\n\n}\n\nexports.default = ConnectionString;\n\nclass CommaAndColonSeparatedRecord extends CaseInsensitiveMap {\n  constructor(from) {\n    super();\n\n    for (const entry of (from !== null && from !== void 0 ? from : '').split(',')) {\n      if (!entry) continue;\n      const colonIndex = entry.indexOf(':');\n\n      if (colonIndex === -1) {\n        this.set(entry, '');\n      } else {\n        this.set(entry.slice(0, colonIndex), entry.slice(colonIndex + 1));\n      }\n    }\n  }\n\n  toString() {\n    return [...this].map(entry => entry.join(':')).join(',');\n  }\n\n}\n\nexports.CommaAndColonSeparatedRecord = CommaAndColonSeparatedRecord;","map":{"version":3,"names":["Object","defineProperty","exports","value","CommaAndColonSeparatedRecord","whatwg_url_1","require","DUMMY_HOSTNAME","HOSTS_REGEX","RegExp","String","raw","CaseInsensitiveMap","Map","delete","name","_normalizeKey","get","has","set","key","keys","toLowerCase","caseInsenstiveURLSearchParams","Ctor","CaseInsenstiveURLSearchParams","append","getAll","prototype","call","URLWithoutHost","URL","MongoParseError","Error","ConnectionString","constructor","uri","_a","match","protocol","username","password","hosts","rest","groups","decodeURIComponent","err","message","illegalCharacters","uriWithoutProtocol","replace","startsWith","authString","_hosts","split","isSRV","length","some","host","includes","pathname","setPrototypeOf","searchParams","_ignored","hostname","port","href","toString","list","join","clone","Symbol","for","origin","search","hash","default","from","entry","colonIndex","indexOf","slice","map"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb-connection-string-url/lib/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommaAndColonSeparatedRecord = void 0;\nconst whatwg_url_1 = require(\"whatwg-url\");\nconst DUMMY_HOSTNAME = '__this_is_a_placeholder__';\nconst HOSTS_REGEX = new RegExp(String.raw `(?<protocol>mongodb(?:\\+srv|)):\\/\\/(?:(?<username>[^:]*)(?::(?<password>[^@]*))?@)?(?<hosts>(?!:)[^\\/?@]+)(?<rest>.*)`);\nclass CaseInsensitiveMap extends Map {\n    delete(name) {\n        return super.delete(this._normalizeKey(name));\n    }\n    get(name) {\n        return super.get(this._normalizeKey(name));\n    }\n    has(name) {\n        return super.has(this._normalizeKey(name));\n    }\n    set(name, value) {\n        return super.set(this._normalizeKey(name), value);\n    }\n    _normalizeKey(name) {\n        name = `${name}`;\n        for (const key of this.keys()) {\n            if (key.toLowerCase() === name.toLowerCase()) {\n                name = key;\n                break;\n            }\n        }\n        return name;\n    }\n}\nconst caseInsenstiveURLSearchParams = (Ctor) => class CaseInsenstiveURLSearchParams extends Ctor {\n    append(name, value) {\n        return super.append(this._normalizeKey(name), value);\n    }\n    delete(name) {\n        return super.delete(this._normalizeKey(name));\n    }\n    get(name) {\n        return super.get(this._normalizeKey(name));\n    }\n    getAll(name) {\n        return super.getAll(this._normalizeKey(name));\n    }\n    has(name) {\n        return super.has(this._normalizeKey(name));\n    }\n    set(name, value) {\n        return super.set(this._normalizeKey(name), value);\n    }\n    _normalizeKey(name) {\n        return CaseInsensitiveMap.prototype._normalizeKey.call(this, name);\n    }\n};\nclass URLWithoutHost extends whatwg_url_1.URL {\n}\nclass MongoParseError extends Error {\n    get name() {\n        return 'MongoParseError';\n    }\n}\nclass ConnectionString extends URLWithoutHost {\n    constructor(uri) {\n        var _a;\n        const match = uri.match(HOSTS_REGEX);\n        if (!match) {\n            throw new MongoParseError(`Invalid connection string \"${uri}\"`);\n        }\n        const { protocol, username, password, hosts, rest } = (_a = match.groups) !== null && _a !== void 0 ? _a : {};\n        if (!protocol || !hosts) {\n            throw new MongoParseError(`Protocol and host list are required in \"${uri}\"`);\n        }\n        try {\n            decodeURIComponent(username !== null && username !== void 0 ? username : '');\n            decodeURIComponent(password !== null && password !== void 0 ? password : '');\n        }\n        catch (err) {\n            throw new MongoParseError(err.message);\n        }\n        const illegalCharacters = new RegExp(String.raw `[:/?#\\[\\]@]`, 'gi');\n        if (username === null || username === void 0 ? void 0 : username.match(illegalCharacters)) {\n            throw new MongoParseError(`Username contains unescaped characters ${username}`);\n        }\n        if (!username || !password) {\n            const uriWithoutProtocol = uri.replace(`${protocol}://`, '');\n            if (uriWithoutProtocol.startsWith('@') || uriWithoutProtocol.startsWith(':')) {\n                throw new MongoParseError('URI contained empty userinfo section');\n            }\n        }\n        if (password === null || password === void 0 ? void 0 : password.match(illegalCharacters)) {\n            throw new MongoParseError('Password contains unescaped characters');\n        }\n        let authString = '';\n        if (typeof username === 'string')\n            authString += username;\n        if (typeof password === 'string')\n            authString += `:${password}`;\n        if (authString)\n            authString += '@';\n        super(`${protocol.toLowerCase()}://${authString}${DUMMY_HOSTNAME}${rest}`);\n        this._hosts = hosts.split(',');\n        if (this.isSRV && this.hosts.length !== 1) {\n            throw new MongoParseError('mongodb+srv URI cannot have multiple service names');\n        }\n        if (this.isSRV && this.hosts.some(host => host.includes(':'))) {\n            throw new MongoParseError('mongodb+srv URI cannot have port number');\n        }\n        if (!this.pathname) {\n            this.pathname = '/';\n        }\n        Object.setPrototypeOf(this.searchParams, caseInsenstiveURLSearchParams(this.searchParams.constructor).prototype);\n    }\n    get host() { return DUMMY_HOSTNAME; }\n    set host(_ignored) { throw new Error('No single host for connection string'); }\n    get hostname() { return DUMMY_HOSTNAME; }\n    set hostname(_ignored) { throw new Error('No single host for connection string'); }\n    get port() { return ''; }\n    set port(_ignored) { throw new Error('No single host for connection string'); }\n    get href() { return this.toString(); }\n    set href(_ignored) { throw new Error('Cannot set href for connection strings'); }\n    get isSRV() {\n        return this.protocol.includes('srv');\n    }\n    get hosts() {\n        return this._hosts;\n    }\n    set hosts(list) {\n        this._hosts = list;\n    }\n    toString() {\n        return super.toString().replace(DUMMY_HOSTNAME, this.hosts.join(','));\n    }\n    clone() {\n        return new ConnectionString(this.toString());\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        const { href, origin, protocol, username, password, hosts, pathname, search, searchParams, hash } = this;\n        return { href, origin, protocol, username, password, hosts, pathname, search, searchParams, hash };\n    }\n}\nexports.default = ConnectionString;\nclass CommaAndColonSeparatedRecord extends CaseInsensitiveMap {\n    constructor(from) {\n        super();\n        for (const entry of (from !== null && from !== void 0 ? from : '').split(',')) {\n            if (!entry)\n                continue;\n            const colonIndex = entry.indexOf(':');\n            if (colonIndex === -1) {\n                this.set(entry, '');\n            }\n            else {\n                this.set(entry.slice(0, colonIndex), entry.slice(colonIndex + 1));\n            }\n        }\n    }\n    toString() {\n        return [...this].map(entry => entry.join(':')).join(',');\n    }\n}\nexports.CommaAndColonSeparatedRecord = CommaAndColonSeparatedRecord;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}