{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamDescription = void 0;\n\nconst server_description_1 = require(\"../sdam/server_description\");\n\nconst common_1 = require(\"../sdam/common\");\n\nconst RESPONSE_FIELDS = ['minWireVersion', 'maxWireVersion', 'maxBsonObjectSize', 'maxMessageSizeBytes', 'maxWriteBatchSize', 'logicalSessionTimeoutMinutes'];\n/** @public */\n\nclass StreamDescription {\n  constructor(address, options) {\n    this.address = address;\n    this.type = common_1.ServerType.Unknown;\n    this.minWireVersion = undefined;\n    this.maxWireVersion = undefined;\n    this.maxBsonObjectSize = 16777216;\n    this.maxMessageSizeBytes = 48000000;\n    this.maxWriteBatchSize = 100000;\n    this.logicalSessionTimeoutMinutes = options === null || options === void 0 ? void 0 : options.logicalSessionTimeoutMinutes;\n    this.loadBalanced = !!(options === null || options === void 0 ? void 0 : options.loadBalanced);\n    this.compressors = options && options.compressors && Array.isArray(options.compressors) ? options.compressors : [];\n  }\n\n  receiveResponse(response) {\n    this.type = server_description_1.parseServerType(response);\n    RESPONSE_FIELDS.forEach(field => {\n      if (typeof response[field] != null) {\n        this[field] = response[field];\n      } // testing case\n\n\n      if ('__nodejs_mock_server__' in response) {\n        this.__nodejs_mock_server__ = response['__nodejs_mock_server__'];\n      }\n    });\n\n    if (response.compression) {\n      this.compressor = this.compressors.filter(c => {\n        var _a;\n\n        return (_a = response.compression) === null || _a === void 0 ? void 0 : _a.includes(c);\n      })[0];\n    }\n  }\n\n}\n\nexports.StreamDescription = StreamDescription;","map":{"version":3,"names":["Object","defineProperty","exports","value","StreamDescription","server_description_1","require","common_1","RESPONSE_FIELDS","constructor","address","options","type","ServerType","Unknown","minWireVersion","undefined","maxWireVersion","maxBsonObjectSize","maxMessageSizeBytes","maxWriteBatchSize","logicalSessionTimeoutMinutes","loadBalanced","compressors","Array","isArray","receiveResponse","response","parseServerType","forEach","field","__nodejs_mock_server__","compression","compressor","filter","c","_a","includes"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/cmap/stream_description.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamDescription = void 0;\nconst server_description_1 = require(\"../sdam/server_description\");\nconst common_1 = require(\"../sdam/common\");\nconst RESPONSE_FIELDS = [\n    'minWireVersion',\n    'maxWireVersion',\n    'maxBsonObjectSize',\n    'maxMessageSizeBytes',\n    'maxWriteBatchSize',\n    'logicalSessionTimeoutMinutes'\n];\n/** @public */\nclass StreamDescription {\n    constructor(address, options) {\n        this.address = address;\n        this.type = common_1.ServerType.Unknown;\n        this.minWireVersion = undefined;\n        this.maxWireVersion = undefined;\n        this.maxBsonObjectSize = 16777216;\n        this.maxMessageSizeBytes = 48000000;\n        this.maxWriteBatchSize = 100000;\n        this.logicalSessionTimeoutMinutes = options === null || options === void 0 ? void 0 : options.logicalSessionTimeoutMinutes;\n        this.loadBalanced = !!(options === null || options === void 0 ? void 0 : options.loadBalanced);\n        this.compressors =\n            options && options.compressors && Array.isArray(options.compressors)\n                ? options.compressors\n                : [];\n    }\n    receiveResponse(response) {\n        this.type = server_description_1.parseServerType(response);\n        RESPONSE_FIELDS.forEach(field => {\n            if (typeof response[field] != null) {\n                this[field] = response[field];\n            }\n            // testing case\n            if ('__nodejs_mock_server__' in response) {\n                this.__nodejs_mock_server__ = response['__nodejs_mock_server__'];\n            }\n        });\n        if (response.compression) {\n            this.compressor = this.compressors.filter(c => { var _a; return (_a = response.compression) === null || _a === void 0 ? void 0 : _a.includes(c); })[0];\n        }\n    }\n}\nexports.StreamDescription = StreamDescription;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,iBAAR,GAA4B,KAAK,CAAjC;;AACA,MAAMC,oBAAoB,GAAGC,OAAO,CAAC,4BAAD,CAApC;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,gBAAD,CAAxB;;AACA,MAAME,eAAe,GAAG,CACpB,gBADoB,EAEpB,gBAFoB,EAGpB,mBAHoB,EAIpB,qBAJoB,EAKpB,mBALoB,EAMpB,8BANoB,CAAxB;AAQA;;AACA,MAAMJ,iBAAN,CAAwB;EACpBK,WAAW,CAACC,OAAD,EAAUC,OAAV,EAAmB;IAC1B,KAAKD,OAAL,GAAeA,OAAf;IACA,KAAKE,IAAL,GAAYL,QAAQ,CAACM,UAAT,CAAoBC,OAAhC;IACA,KAAKC,cAAL,GAAsBC,SAAtB;IACA,KAAKC,cAAL,GAAsBD,SAAtB;IACA,KAAKE,iBAAL,GAAyB,QAAzB;IACA,KAAKC,mBAAL,GAA2B,QAA3B;IACA,KAAKC,iBAAL,GAAyB,MAAzB;IACA,KAAKC,4BAAL,GAAoCV,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACU,4BAA9F;IACA,KAAKC,YAAL,GAAoB,CAAC,EAAEX,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACW,YAA5D,CAArB;IACA,KAAKC,WAAL,GACIZ,OAAO,IAAIA,OAAO,CAACY,WAAnB,IAAkCC,KAAK,CAACC,OAAN,CAAcd,OAAO,CAACY,WAAtB,CAAlC,GACMZ,OAAO,CAACY,WADd,GAEM,EAHV;EAIH;;EACDG,eAAe,CAACC,QAAD,EAAW;IACtB,KAAKf,IAAL,GAAYP,oBAAoB,CAACuB,eAArB,CAAqCD,QAArC,CAAZ;IACAnB,eAAe,CAACqB,OAAhB,CAAwBC,KAAK,IAAI;MAC7B,IAAI,OAAOH,QAAQ,CAACG,KAAD,CAAf,IAA0B,IAA9B,EAAoC;QAChC,KAAKA,KAAL,IAAcH,QAAQ,CAACG,KAAD,CAAtB;MACH,CAH4B,CAI7B;;;MACA,IAAI,4BAA4BH,QAAhC,EAA0C;QACtC,KAAKI,sBAAL,GAA8BJ,QAAQ,CAAC,wBAAD,CAAtC;MACH;IACJ,CARD;;IASA,IAAIA,QAAQ,CAACK,WAAb,EAA0B;MACtB,KAAKC,UAAL,GAAkB,KAAKV,WAAL,CAAiBW,MAAjB,CAAwBC,CAAC,IAAI;QAAE,IAAIC,EAAJ;;QAAQ,OAAO,CAACA,EAAE,GAAGT,QAAQ,CAACK,WAAf,MAAgC,IAAhC,IAAwCI,EAAE,KAAK,KAAK,CAApD,GAAwD,KAAK,CAA7D,GAAiEA,EAAE,CAACC,QAAH,CAAYF,CAAZ,CAAxE;MAAyF,CAAhI,EAAkI,CAAlI,CAAlB;IACH;EACJ;;AA9BmB;;AAgCxBjC,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B"},"metadata":{},"sourceType":"script"}