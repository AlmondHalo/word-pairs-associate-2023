{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindCursor = exports.FLAGS = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst count_1 = require(\"../operations/count\");\n\nconst execute_operation_1 = require(\"../operations/execute_operation\");\n\nconst find_1 = require(\"../operations/find\");\n\nconst utils_1 = require(\"../utils\");\n\nconst sort_1 = require(\"../sort\");\n\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\n\n\nconst kFilter = Symbol('filter');\n/** @internal */\n\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\n\nconst kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\n\nexports.FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\n\nclass FindCursor extends abstract_cursor_1.AbstractCursor {\n  /** @internal */\n  constructor(topology, namespace, filter, options = {}) {\n    super(topology, namespace, options);\n    this[kFilter] = filter || {};\n    this[kBuiltOptions] = options;\n\n    if (options.sort != null) {\n      this[kBuiltOptions].sort = sort_1.formatSort(options.sort);\n    }\n  }\n\n  clone() {\n    const clonedOptions = utils_1.mergeOptions({}, this[kBuiltOptions]);\n    delete clonedOptions.session;\n    return new FindCursor(this.topology, this.namespace, this[kFilter], { ...clonedOptions\n    });\n  }\n\n  map(transform) {\n    return super.map(transform);\n  }\n  /** @internal */\n\n\n  _initialize(session, callback) {\n    const findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], { ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      session\n    });\n    execute_operation_1.executeOperation(this.topology, findOperation, (err, response) => {\n      if (err || response == null) return callback(err); // TODO: We only need this for legacy queries that do not support `limit`, maybe\n      //       the value should only be saved in those cases.\n\n      if (response.cursor) {\n        this[kNumReturned] = response.cursor.firstBatch.length;\n      } else {\n        this[kNumReturned] = response.documents ? response.documents.length : 0;\n      } // TODO: NODE-2882\n\n\n      callback(undefined, {\n        server: findOperation.server,\n        session,\n        response\n      });\n    });\n  }\n  /** @internal */\n\n\n  _getMore(batchSize, callback) {\n    // NOTE: this is to support client provided limits in pre-command servers\n    const numReturned = this[kNumReturned];\n\n    if (numReturned) {\n      const limit = this[kBuiltOptions].limit;\n      batchSize = limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n\n      if (batchSize <= 0) {\n        return this.close(callback);\n      }\n    }\n\n    super._getMore(batchSize, (err, response) => {\n      if (err) return callback(err); // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n\n      if (response) {\n        this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n      }\n\n      callback(undefined, response);\n    });\n  }\n\n  count(options, callback) {\n    if (typeof options === 'boolean') {\n      throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n    }\n\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return execute_operation_1.executeOperation(this.topology, new count_1.CountOperation(this.namespace, this[kFilter], { ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      ...options\n    }), callback);\n  }\n\n  explain(verbosity, callback) {\n    if (typeof verbosity === 'function') callback = verbosity, verbosity = true;\n    if (verbosity == null) verbosity = true;\n    return execute_operation_1.executeOperation(this.topology, new find_1.FindOperation(undefined, this.namespace, this[kFilter], { ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      explain: verbosity\n    }), callback);\n  }\n  /** Set the cursor query */\n\n\n  filter(filter) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kFilter] = filter;\n    return this;\n  }\n  /**\n   * Set the cursor hint\n   *\n   * @param hint - If specified, then the query system will only consider plans using the hinted index.\n   */\n\n\n  hint(hint) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].hint = hint;\n    return this;\n  }\n  /**\n   * Set the cursor min\n   *\n   * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n   */\n\n\n  min(min) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].min = min;\n    return this;\n  }\n  /**\n   * Set the cursor max\n   *\n   * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n   */\n\n\n  max(max) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].max = max;\n    return this;\n  }\n  /**\n   * Set the cursor returnKey.\n   * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n   * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n   *\n   * @param value - the returnKey value.\n   */\n\n\n  returnKey(value) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].returnKey = value;\n    return this;\n  }\n  /**\n   * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n   *\n   * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n   */\n\n\n  showRecordId(value) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].showRecordId = value;\n    return this;\n  }\n  /**\n   * Add a query modifier to the cursor query\n   *\n   * @param name - The query modifier (must start with $, such as $orderby etc)\n   * @param value - The modifier value.\n   */\n\n\n  addQueryModifier(name, value) {\n    abstract_cursor_1.assertUninitialized(this);\n\n    if (name[0] !== '$') {\n      throw new error_1.MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n    } // Strip of the $\n\n\n    const field = name.substr(1); // NOTE: consider some TS magic for this\n\n    switch (field) {\n      case 'comment':\n        this[kBuiltOptions].comment = value;\n        break;\n\n      case 'explain':\n        this[kBuiltOptions].explain = value;\n        break;\n\n      case 'hint':\n        this[kBuiltOptions].hint = value;\n        break;\n\n      case 'max':\n        this[kBuiltOptions].max = value;\n        break;\n\n      case 'maxTimeMS':\n        this[kBuiltOptions].maxTimeMS = value;\n        break;\n\n      case 'min':\n        this[kBuiltOptions].min = value;\n        break;\n\n      case 'orderby':\n        this[kBuiltOptions].sort = sort_1.formatSort(value);\n        break;\n\n      case 'query':\n        this[kFilter] = value;\n        break;\n\n      case 'returnKey':\n        this[kBuiltOptions].returnKey = value;\n        break;\n\n      case 'showDiskLoc':\n        this[kBuiltOptions].showRecordId = value;\n        break;\n\n      default:\n        throw new error_1.MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n    }\n\n    return this;\n  }\n  /**\n   * Add a comment to the cursor query allowing for tracking the comment in the log.\n   *\n   * @param value - The comment attached to this query.\n   */\n\n\n  comment(value) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].comment = value;\n    return this;\n  }\n  /**\n   * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n   *\n   * @param value - Number of milliseconds to wait before aborting the tailed query.\n   */\n\n\n  maxAwaitTimeMS(value) {\n    abstract_cursor_1.assertUninitialized(this);\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxAwaitTimeMS = value;\n    return this;\n  }\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n\n\n  maxTimeMS(value) {\n    abstract_cursor_1.assertUninitialized(this);\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxTimeMS = value;\n    return this;\n  }\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic\n   * {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.find().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n\n\n  project(value) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].projection = value;\n    return this;\n  }\n  /**\n   * Sets the sort order of the cursor query.\n   *\n   * @param sort - The key or keys set for the sort.\n   * @param direction - The direction of the sorting (1 or -1).\n   */\n\n\n  sort(sort, direction) {\n    abstract_cursor_1.assertUninitialized(this);\n\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n    }\n\n    this[kBuiltOptions].sort = sort_1.formatSort(sort, direction);\n    return this;\n  }\n  /**\n   * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n   *\n   * @remarks\n   * {@link https://docs.mongodb.com/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n   */\n\n\n  allowDiskUse() {\n    abstract_cursor_1.assertUninitialized(this);\n\n    if (!this[kBuiltOptions].sort) {\n      throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n    }\n\n    this[kBuiltOptions].allowDiskUse = true;\n    return this;\n  }\n  /**\n   * Set the collation options for the cursor.\n   *\n   * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n   */\n\n\n  collation(value) {\n    abstract_cursor_1.assertUninitialized(this);\n    this[kBuiltOptions].collation = value;\n    return this;\n  }\n  /**\n   * Set the limit for the cursor.\n   *\n   * @param value - The limit for the cursor query.\n   */\n\n\n  limit(value) {\n    abstract_cursor_1.assertUninitialized(this);\n\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n    }\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n    }\n\n    this[kBuiltOptions].limit = value;\n    return this;\n  }\n  /**\n   * Set the skip for the cursor.\n   *\n   * @param value - The skip for the cursor query.\n   */\n\n\n  skip(value) {\n    abstract_cursor_1.assertUninitialized(this);\n\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n    }\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n    }\n\n    this[kBuiltOptions].skip = value;\n    return this;\n  }\n\n}\n\nexports.FindCursor = FindCursor;","map":{"version":3,"names":["Object","defineProperty","exports","value","FindCursor","FLAGS","error_1","require","count_1","execute_operation_1","find_1","utils_1","sort_1","abstract_cursor_1","kFilter","Symbol","kNumReturned","kBuiltOptions","AbstractCursor","constructor","topology","namespace","filter","options","sort","formatSort","clone","clonedOptions","mergeOptions","session","map","transform","_initialize","callback","findOperation","FindOperation","undefined","cursorOptions","executeOperation","err","response","cursor","firstBatch","length","documents","server","_getMore","batchSize","numReturned","limit","close","nextBatch","count","MongoInvalidArgumentError","CountOperation","explain","verbosity","assertUninitialized","hint","min","max","returnKey","showRecordId","addQueryModifier","name","field","substr","comment","maxTimeMS","maxAwaitTimeMS","project","projection","direction","tailable","MongoTailableCursorError","allowDiskUse","collation","skip"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/cursor/find_cursor.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FindCursor = exports.FLAGS = void 0;\nconst error_1 = require(\"../error\");\nconst count_1 = require(\"../operations/count\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst find_1 = require(\"../operations/find\");\nconst utils_1 = require(\"../utils\");\nconst sort_1 = require(\"../sort\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\nconst kFilter = Symbol('filter');\n/** @internal */\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\nconst kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\nexports.FLAGS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'exhaust',\n    'partial'\n];\n/** @public */\nclass FindCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */\n    constructor(topology, namespace, filter, options = {}) {\n        super(topology, namespace, options);\n        this[kFilter] = filter || {};\n        this[kBuiltOptions] = options;\n        if (options.sort != null) {\n            this[kBuiltOptions].sort = sort_1.formatSort(options.sort);\n        }\n    }\n    clone() {\n        const clonedOptions = utils_1.mergeOptions({}, this[kBuiltOptions]);\n        delete clonedOptions.session;\n        return new FindCursor(this.topology, this.namespace, this[kFilter], {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */\n    _initialize(session, callback) {\n        const findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            session\n        });\n        execute_operation_1.executeOperation(this.topology, findOperation, (err, response) => {\n            if (err || response == null)\n                return callback(err);\n            // TODO: We only need this for legacy queries that do not support `limit`, maybe\n            //       the value should only be saved in those cases.\n            if (response.cursor) {\n                this[kNumReturned] = response.cursor.firstBatch.length;\n            }\n            else {\n                this[kNumReturned] = response.documents ? response.documents.length : 0;\n            }\n            // TODO: NODE-2882\n            callback(undefined, { server: findOperation.server, session, response });\n        });\n    }\n    /** @internal */\n    _getMore(batchSize, callback) {\n        // NOTE: this is to support client provided limits in pre-command servers\n        const numReturned = this[kNumReturned];\n        if (numReturned) {\n            const limit = this[kBuiltOptions].limit;\n            batchSize =\n                limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n            if (batchSize <= 0) {\n                return this.close(callback);\n            }\n        }\n        super._getMore(batchSize, (err, response) => {\n            if (err)\n                return callback(err);\n            // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n            if (response) {\n                this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n            }\n            callback(undefined, response);\n        });\n    }\n    count(options, callback) {\n        if (typeof options === 'boolean') {\n            throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n        }\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        return execute_operation_1.executeOperation(this.topology, new count_1.CountOperation(this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            ...options\n        }), callback);\n    }\n    explain(verbosity, callback) {\n        if (typeof verbosity === 'function')\n            (callback = verbosity), (verbosity = true);\n        if (verbosity == null)\n            verbosity = true;\n        return execute_operation_1.executeOperation(this.topology, new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            explain: verbosity\n        }), callback);\n    }\n    /** Set the cursor query */\n    filter(filter) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kFilter] = filter;\n        return this;\n    }\n    /**\n     * Set the cursor hint\n     *\n     * @param hint - If specified, then the query system will only consider plans using the hinted index.\n     */\n    hint(hint) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kBuiltOptions].hint = hint;\n        return this;\n    }\n    /**\n     * Set the cursor min\n     *\n     * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     */\n    min(min) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kBuiltOptions].min = min;\n        return this;\n    }\n    /**\n     * Set the cursor max\n     *\n     * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n     */\n    max(max) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kBuiltOptions].max = max;\n        return this;\n    }\n    /**\n     * Set the cursor returnKey.\n     * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n     * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n     *\n     * @param value - the returnKey value.\n     */\n    returnKey(value) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kBuiltOptions].returnKey = value;\n        return this;\n    }\n    /**\n     * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n     *\n     * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     */\n    showRecordId(value) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kBuiltOptions].showRecordId = value;\n        return this;\n    }\n    /**\n     * Add a query modifier to the cursor query\n     *\n     * @param name - The query modifier (must start with $, such as $orderby etc)\n     * @param value - The modifier value.\n     */\n    addQueryModifier(name, value) {\n        abstract_cursor_1.assertUninitialized(this);\n        if (name[0] !== '$') {\n            throw new error_1.MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n        }\n        // Strip of the $\n        const field = name.substr(1);\n        // NOTE: consider some TS magic for this\n        switch (field) {\n            case 'comment':\n                this[kBuiltOptions].comment = value;\n                break;\n            case 'explain':\n                this[kBuiltOptions].explain = value;\n                break;\n            case 'hint':\n                this[kBuiltOptions].hint = value;\n                break;\n            case 'max':\n                this[kBuiltOptions].max = value;\n                break;\n            case 'maxTimeMS':\n                this[kBuiltOptions].maxTimeMS = value;\n                break;\n            case 'min':\n                this[kBuiltOptions].min = value;\n                break;\n            case 'orderby':\n                this[kBuiltOptions].sort = sort_1.formatSort(value);\n                break;\n            case 'query':\n                this[kFilter] = value;\n                break;\n            case 'returnKey':\n                this[kBuiltOptions].returnKey = value;\n                break;\n            case 'showDiskLoc':\n                this[kBuiltOptions].showRecordId = value;\n                break;\n            default:\n                throw new error_1.MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n        }\n        return this;\n    }\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     *\n     * @param value - The comment attached to this query.\n     */\n    comment(value) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kBuiltOptions].comment = value;\n        return this;\n    }\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n     *\n     * @param value - Number of milliseconds to wait before aborting the tailed query.\n     */\n    maxAwaitTimeMS(value) {\n        abstract_cursor_1.assertUninitialized(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n        }\n        this[kBuiltOptions].maxAwaitTimeMS = value;\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value) {\n        abstract_cursor_1.assertUninitialized(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n        }\n        this[kBuiltOptions].maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic\n     * {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.find().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project(value) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kBuiltOptions].projection = value;\n        return this;\n    }\n    /**\n     * Sets the sort order of the cursor query.\n     *\n     * @param sort - The key or keys set for the sort.\n     * @param direction - The direction of the sorting (1 or -1).\n     */\n    sort(sort, direction) {\n        abstract_cursor_1.assertUninitialized(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n        }\n        this[kBuiltOptions].sort = sort_1.formatSort(sort, direction);\n        return this;\n    }\n    /**\n     * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n     *\n     * @remarks\n     * {@link https://docs.mongodb.com/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n     */\n    allowDiskUse() {\n        abstract_cursor_1.assertUninitialized(this);\n        if (!this[kBuiltOptions].sort) {\n            throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n        }\n        this[kBuiltOptions].allowDiskUse = true;\n        return this;\n    }\n    /**\n     * Set the collation options for the cursor.\n     *\n     * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n     */\n    collation(value) {\n        abstract_cursor_1.assertUninitialized(this);\n        this[kBuiltOptions].collation = value;\n        return this;\n    }\n    /**\n     * Set the limit for the cursor.\n     *\n     * @param value - The limit for the cursor query.\n     */\n    limit(value) {\n        abstract_cursor_1.assertUninitialized(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n        }\n        this[kBuiltOptions].limit = value;\n        return this;\n    }\n    /**\n     * Set the skip for the cursor.\n     *\n     * @param value - The skip for the cursor query.\n     */\n    skip(value) {\n        abstract_cursor_1.assertUninitialized(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n        }\n        this[kBuiltOptions].skip = value;\n        return this;\n    }\n}\nexports.FindCursor = FindCursor;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}