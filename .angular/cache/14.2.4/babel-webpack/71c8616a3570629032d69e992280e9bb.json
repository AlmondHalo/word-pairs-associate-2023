{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridFSBucket = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst download_1 = require(\"./download\");\n\nconst upload_1 = require(\"./upload\");\n\nconst utils_1 = require(\"../utils\");\n\nconst write_concern_1 = require(\"../write_concern\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst DEFAULT_GRIDFS_BUCKET_OPTIONS = {\n  bucketName: 'fs',\n  chunkSizeBytes: 255 * 1024\n};\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */\n\nclass GridFSBucket extends mongo_types_1.TypedEventEmitter {\n  constructor(db, options) {\n    super();\n    this.setMaxListeners(0);\n    const privateOptions = { ...DEFAULT_GRIDFS_BUCKET_OPTIONS,\n      ...options,\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n    };\n    this.s = {\n      db,\n      options: privateOptions,\n      _chunksCollection: db.collection(privateOptions.bucketName + '.chunks'),\n      _filesCollection: db.collection(privateOptions.bucketName + '.files'),\n      checkedIndexes: false,\n      calledOpenUploadStream: false\n    };\n  }\n  /**\n   * Returns a writable stream (GridFSBucketWriteStream) for writing\n   * buffers to GridFS. The stream's 'id' property contains the resulting\n   * file's id.\n   *\n   * @param filename - The value of the 'filename' key in the files doc\n   * @param options - Optional settings.\n   */\n\n\n  openUploadStream(filename, options) {\n    return new upload_1.GridFSBucketWriteStream(this, filename, options);\n  }\n  /**\n   * Returns a writable stream (GridFSBucketWriteStream) for writing\n   * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n   * file's id.\n   */\n\n\n  openUploadStreamWithId(id, filename, options) {\n    return new upload_1.GridFSBucketWriteStream(this, filename, { ...options,\n      id\n    });\n  }\n  /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */\n\n\n  openDownloadStream(id, options) {\n    return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, {\n      _id: id\n    }, options);\n  }\n\n  delete(id, callback) {\n    return utils_1.executeLegacyOperation(utils_1.getTopology(this.s.db), _delete, [this, id, callback], {\n      skipSessions: true\n    });\n  }\n  /** Convenience wrapper around find on the files collection */\n\n\n  find(filter, options) {\n    filter !== null && filter !== void 0 ? filter : filter = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.s._filesCollection.find(filter, options);\n  }\n  /**\n   * Returns a readable stream (GridFSBucketReadStream) for streaming the\n   * file with the given name from GridFS. If there are multiple files with\n   * the same name, this will stream the most recent file with the given name\n   * (as determined by the `uploadDate` field). You can set the `revision`\n   * option to change this behavior.\n   */\n\n\n  openDownloadStreamByName(filename, options) {\n    let sort = {\n      uploadDate: -1\n    };\n    let skip = undefined;\n\n    if (options && options.revision != null) {\n      if (options.revision >= 0) {\n        sort = {\n          uploadDate: 1\n        };\n        skip = options.revision;\n      } else {\n        skip = -options.revision - 1;\n      }\n    }\n\n    return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, {\n      filename\n    }, { ...options,\n      sort,\n      skip\n    });\n  }\n\n  rename(id, filename, callback) {\n    return utils_1.executeLegacyOperation(utils_1.getTopology(this.s.db), _rename, [this, id, filename, callback], {\n      skipSessions: true\n    });\n  }\n\n  drop(callback) {\n    return utils_1.executeLegacyOperation(utils_1.getTopology(this.s.db), _drop, [this, callback], {\n      skipSessions: true\n    });\n  }\n  /** Get the Db scoped logger. */\n\n\n  getLogger() {\n    return this.s.db.s.logger;\n  }\n\n}\n\nexports.GridFSBucket = GridFSBucket;\n/**\n * When the first call to openUploadStream is made, the upload stream will\n * check to see if it needs to create the proper indexes on the chunks and\n * files collections. This event is fired either when 1) it determines that\n * no index creation is necessary, 2) when it successfully creates the\n * necessary indexes.\n * @event\n */\n\nGridFSBucket.INDEX = 'index';\n\nfunction _delete(bucket, id, callback) {\n  return bucket.s._filesCollection.deleteOne({\n    _id: id\n  }, (error, res) => {\n    if (error) {\n      return callback(error);\n    }\n\n    return bucket.s._chunksCollection.deleteMany({\n      files_id: id\n    }, error => {\n      if (error) {\n        return callback(error);\n      } // Delete orphaned chunks before returning FileNotFound\n\n\n      if (!(res === null || res === void 0 ? void 0 : res.deletedCount)) {\n        // TODO(NODE-3483): Replace with more appropriate error\n        // Consider creating new error MongoGridFSFileNotFoundError\n        return callback(new error_1.MongoRuntimeError(`File not found for id ${id}`));\n      }\n\n      return callback();\n    });\n  });\n}\n\nfunction _rename(bucket, id, filename, callback) {\n  const filter = {\n    _id: id\n  };\n  const update = {\n    $set: {\n      filename\n    }\n  };\n  return bucket.s._filesCollection.updateOne(filter, update, (error, res) => {\n    if (error) {\n      return callback(error);\n    }\n\n    if (!(res === null || res === void 0 ? void 0 : res.matchedCount)) {\n      return callback(new error_1.MongoRuntimeError(`File with id ${id} not found`));\n    }\n\n    return callback();\n  });\n}\n\nfunction _drop(bucket, callback) {\n  return bucket.s._filesCollection.drop(error => {\n    if (error) {\n      return callback(error);\n    }\n\n    return bucket.s._chunksCollection.drop(error => {\n      if (error) {\n        return callback(error);\n      }\n\n      return callback();\n    });\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","GridFSBucket","error_1","require","download_1","upload_1","utils_1","write_concern_1","mongo_types_1","DEFAULT_GRIDFS_BUCKET_OPTIONS","bucketName","chunkSizeBytes","TypedEventEmitter","constructor","db","options","setMaxListeners","privateOptions","writeConcern","WriteConcern","fromOptions","s","_chunksCollection","collection","_filesCollection","checkedIndexes","calledOpenUploadStream","openUploadStream","filename","GridFSBucketWriteStream","openUploadStreamWithId","id","openDownloadStream","GridFSBucketReadStream","readPreference","_id","delete","callback","executeLegacyOperation","getTopology","_delete","skipSessions","find","filter","openDownloadStreamByName","sort","uploadDate","skip","undefined","revision","rename","_rename","drop","_drop","getLogger","logger","INDEX","bucket","deleteOne","error","res","deleteMany","files_id","deletedCount","MongoRuntimeError","update","$set","updateOne","matchedCount"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/gridfs/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GridFSBucket = void 0;\nconst error_1 = require(\"../error\");\nconst download_1 = require(\"./download\");\nconst upload_1 = require(\"./upload\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"../write_concern\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst DEFAULT_GRIDFS_BUCKET_OPTIONS = {\n    bucketName: 'fs',\n    chunkSizeBytes: 255 * 1024\n};\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */\nclass GridFSBucket extends mongo_types_1.TypedEventEmitter {\n    constructor(db, options) {\n        super();\n        this.setMaxListeners(0);\n        const privateOptions = {\n            ...DEFAULT_GRIDFS_BUCKET_OPTIONS,\n            ...options,\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n        };\n        this.s = {\n            db,\n            options: privateOptions,\n            _chunksCollection: db.collection(privateOptions.bucketName + '.chunks'),\n            _filesCollection: db.collection(privateOptions.bucketName + '.files'),\n            checkedIndexes: false,\n            calledOpenUploadStream: false\n        };\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS. The stream's 'id' property contains the resulting\n     * file's id.\n     *\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     */\n    openUploadStream(filename, options) {\n        return new upload_1.GridFSBucketWriteStream(this, filename, options);\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n     * file's id.\n     */\n    openUploadStreamWithId(id, filename, options) {\n        return new upload_1.GridFSBucketWriteStream(this, filename, { ...options, id });\n    }\n    /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */\n    openDownloadStream(id, options) {\n        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, { _id: id }, options);\n    }\n    delete(id, callback) {\n        return utils_1.executeLegacyOperation(utils_1.getTopology(this.s.db), _delete, [this, id, callback], {\n            skipSessions: true\n        });\n    }\n    /** Convenience wrapper around find on the files collection */\n    find(filter, options) {\n        filter !== null && filter !== void 0 ? filter : (filter = {});\n        options = options !== null && options !== void 0 ? options : {};\n        return this.s._filesCollection.find(filter, options);\n    }\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming the\n     * file with the given name from GridFS. If there are multiple files with\n     * the same name, this will stream the most recent file with the given name\n     * (as determined by the `uploadDate` field). You can set the `revision`\n     * option to change this behavior.\n     */\n    openDownloadStreamByName(filename, options) {\n        let sort = { uploadDate: -1 };\n        let skip = undefined;\n        if (options && options.revision != null) {\n            if (options.revision >= 0) {\n                sort = { uploadDate: 1 };\n                skip = options.revision;\n            }\n            else {\n                skip = -options.revision - 1;\n            }\n        }\n        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, { filename }, { ...options, sort, skip });\n    }\n    rename(id, filename, callback) {\n        return utils_1.executeLegacyOperation(utils_1.getTopology(this.s.db), _rename, [this, id, filename, callback], {\n            skipSessions: true\n        });\n    }\n    drop(callback) {\n        return utils_1.executeLegacyOperation(utils_1.getTopology(this.s.db), _drop, [this, callback], {\n            skipSessions: true\n        });\n    }\n    /** Get the Db scoped logger. */\n    getLogger() {\n        return this.s.db.s.logger;\n    }\n}\nexports.GridFSBucket = GridFSBucket;\n/**\n * When the first call to openUploadStream is made, the upload stream will\n * check to see if it needs to create the proper indexes on the chunks and\n * files collections. This event is fired either when 1) it determines that\n * no index creation is necessary, 2) when it successfully creates the\n * necessary indexes.\n * @event\n */\nGridFSBucket.INDEX = 'index';\nfunction _delete(bucket, id, callback) {\n    return bucket.s._filesCollection.deleteOne({ _id: id }, (error, res) => {\n        if (error) {\n            return callback(error);\n        }\n        return bucket.s._chunksCollection.deleteMany({ files_id: id }, error => {\n            if (error) {\n                return callback(error);\n            }\n            // Delete orphaned chunks before returning FileNotFound\n            if (!(res === null || res === void 0 ? void 0 : res.deletedCount)) {\n                // TODO(NODE-3483): Replace with more appropriate error\n                // Consider creating new error MongoGridFSFileNotFoundError\n                return callback(new error_1.MongoRuntimeError(`File not found for id ${id}`));\n            }\n            return callback();\n        });\n    });\n}\nfunction _rename(bucket, id, filename, callback) {\n    const filter = { _id: id };\n    const update = { $set: { filename } };\n    return bucket.s._filesCollection.updateOne(filter, update, (error, res) => {\n        if (error) {\n            return callback(error);\n        }\n        if (!(res === null || res === void 0 ? void 0 : res.matchedCount)) {\n            return callback(new error_1.MongoRuntimeError(`File with id ${id} not found`));\n        }\n        return callback();\n    });\n}\nfunction _drop(bucket, callback) {\n    return bucket.s._filesCollection.drop((error) => {\n        if (error) {\n            return callback(error);\n        }\n        return bucket.s._chunksCollection.drop((error) => {\n            if (error) {\n                return callback(error);\n            }\n            return callback();\n        });\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}