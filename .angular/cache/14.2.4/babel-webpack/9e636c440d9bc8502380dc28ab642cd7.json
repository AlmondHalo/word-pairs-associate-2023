{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RTTPinger = exports.Monitor = void 0;\n\nconst common_1 = require(\"./common\");\n\nconst utils_1 = require(\"../utils\");\n\nconst connect_1 = require(\"../cmap/connect\");\n\nconst connection_1 = require(\"../cmap/connection\");\n\nconst error_1 = require(\"../error\");\n\nconst bson_1 = require(\"../bson\");\n\nconst events_1 = require(\"./events\");\n\nconst server_1 = require(\"./server\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n/** @internal */\n\n\nconst kServer = Symbol('server');\n/** @internal */\n\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\n\nconst kConnection = Symbol('connection');\n/** @internal */\n\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\n\nconst kRTTPinger = Symbol('rttPinger');\n/** @internal */\n\nconst kRoundTripTime = Symbol('roundTripTime');\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = utils_1.makeStateMachine({\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, STATE_IDLE, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, STATE_MONITORING],\n  [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, common_1.STATE_CLOSING],\n  [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, common_1.STATE_CLOSING]\n});\nconst INVALID_REQUEST_CHECK_STATES = new Set([common_1.STATE_CLOSING, common_1.STATE_CLOSED, STATE_MONITORING]);\n\nfunction isInCloseState(monitor) {\n  return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @internal */\n\n\nclass Monitor extends mongo_types_1.TypedEventEmitter {\n  constructor(server, options) {\n    var _a, _b, _c;\n\n    super();\n    this[kServer] = server;\n    this[kConnection] = undefined;\n    this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kMonitorId] = undefined;\n    this.s = {\n      state: common_1.STATE_CLOSED\n    };\n    this.address = server.description.address;\n    this.options = Object.freeze({\n      connectTimeoutMS: (_a = options.connectTimeoutMS) !== null && _a !== void 0 ? _a : 10000,\n      heartbeatFrequencyMS: (_b = options.heartbeatFrequencyMS) !== null && _b !== void 0 ? _b : 10000,\n      minHeartbeatFrequencyMS: (_c = options.minHeartbeatFrequencyMS) !== null && _c !== void 0 ? _c : 500\n    });\n    const cancellationToken = this[kCancellationToken]; // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n\n    const connectOptions = Object.assign({\n      id: '<monitor>',\n      generation: server.s.pool.generation,\n      connectionType: connection_1.Connection,\n      cancellationToken,\n      hostAddress: server.description.hostAddress\n    }, options, // force BSON serialization options\n    {\n      raw: false,\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: true\n    }); // ensure no authentication is used for monitoring\n\n    delete connectOptions.credentials;\n\n    if (connectOptions.autoEncrypter) {\n      delete connectOptions.autoEncrypter;\n    }\n\n    this.connectOptions = Object.freeze(connectOptions);\n  }\n\n  connect() {\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    } // start\n\n\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = utils_1.makeInterruptibleAsyncInterval(monitorServer(this), {\n      interval: heartbeatFrequencyMS,\n      minInterval: minHeartbeatFrequencyMS,\n      immediate: true\n    });\n  }\n\n  requestCheck() {\n    var _a;\n\n    if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n      return;\n    }\n\n    (_a = this[kMonitorId]) === null || _a === void 0 ? void 0 : _a.wake();\n  }\n\n  reset() {\n    const topologyVersion = this[kServer].description.topologyVersion;\n\n    if (isInCloseState(this) || topologyVersion == null) {\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CLOSING);\n    resetMonitorState(this); // restart monitor\n\n    stateTransition(this, STATE_IDLE); // restart monitoring\n\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = utils_1.makeInterruptibleAsyncInterval(monitorServer(this), {\n      interval: heartbeatFrequencyMS,\n      minInterval: minHeartbeatFrequencyMS\n    });\n  }\n\n  close() {\n    if (isInCloseState(this)) {\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CLOSING);\n    resetMonitorState(this); // close monitor\n\n    this.emit('close');\n    stateTransition(this, common_1.STATE_CLOSED);\n  }\n\n}\n\nexports.Monitor = Monitor;\n\nfunction resetMonitorState(monitor) {\n  var _a, _b, _c;\n\n  (_a = monitor[kMonitorId]) === null || _a === void 0 ? void 0 : _a.stop();\n  monitor[kMonitorId] = undefined;\n  (_b = monitor[kRTTPinger]) === null || _b === void 0 ? void 0 : _b.close();\n  monitor[kRTTPinger] = undefined;\n  monitor[kCancellationToken].emit('cancel');\n  (_c = monitor[kConnection]) === null || _c === void 0 ? void 0 : _c.destroy({\n    force: true\n  });\n  monitor[kConnection] = undefined;\n}\n\nfunction checkServer(monitor, callback) {\n  let start = utils_1.now();\n  monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address));\n\n  function failureHandler(err) {\n    var _a;\n\n    (_a = monitor[kConnection]) === null || _a === void 0 ? void 0 : _a.destroy({\n      force: true\n    });\n    monitor[kConnection] = undefined;\n    monitor.emit(server_1.Server.SERVER_HEARTBEAT_FAILED, new events_1.ServerHeartbeatFailedEvent(monitor.address, utils_1.calculateDurationInMs(start), err));\n    monitor.emit('resetServer', err);\n    monitor.emit('resetConnectionPool');\n    callback(err);\n  }\n\n  const connection = monitor[kConnection];\n\n  if (connection && !connection.closed) {\n    const {\n      serverApi,\n      helloOk\n    } = connection;\n    const connectTimeoutMS = monitor.options.connectTimeoutMS;\n    const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n    const topologyVersion = monitor[kServer].description.topologyVersion;\n    const isAwaitable = topologyVersion != null;\n    const cmd = {\n      [(serverApi === null || serverApi === void 0 ? void 0 : serverApi.version) || helloOk ? 'hello' : 'ismaster']: true,\n      ...(isAwaitable && topologyVersion ? {\n        maxAwaitTimeMS,\n        topologyVersion: makeTopologyVersion(topologyVersion)\n      } : {})\n    };\n    const options = isAwaitable ? {\n      socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n      exhaustAllowed: true\n    } : {\n      socketTimeoutMS: connectTimeoutMS\n    };\n\n    if (isAwaitable && monitor[kRTTPinger] == null) {\n      monitor[kRTTPinger] = new RTTPinger(monitor[kCancellationToken], Object.assign({\n        heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS\n      }, monitor.connectOptions));\n    }\n\n    connection.command(utils_1.ns('admin.$cmd'), cmd, options, (err, isMaster) => {\n      var _a;\n\n      if (err) {\n        failureHandler(err);\n        return;\n      }\n\n      if ('isWritablePrimary' in isMaster) {\n        // Provide pre-hello-style response document.\n        isMaster.ismaster = isMaster.isWritablePrimary;\n      }\n\n      const rttPinger = monitor[kRTTPinger];\n      const duration = isAwaitable && rttPinger ? rttPinger.roundTripTime : utils_1.calculateDurationInMs(start);\n      monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, isMaster)); // if we are using the streaming protocol then we immediately issue another `started`\n      // event, otherwise the \"check\" is complete and return to the main monitor loop\n\n      if (isAwaitable && isMaster.topologyVersion) {\n        monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address));\n        start = utils_1.now();\n      } else {\n        (_a = monitor[kRTTPinger]) === null || _a === void 0 ? void 0 : _a.close();\n        monitor[kRTTPinger] = undefined;\n        callback(undefined, isMaster);\n      }\n    });\n    return;\n  } // connecting does an implicit `ismaster`\n\n\n  connect_1.connect(monitor.connectOptions, (err, conn) => {\n    if (err) {\n      monitor[kConnection] = undefined; // we already reset the connection pool on network errors in all cases\n\n      if (!(err instanceof error_1.MongoNetworkError)) {\n        monitor.emit('resetConnectionPool');\n      }\n\n      failureHandler(err);\n      return;\n    }\n\n    if (conn) {\n      if (isInCloseState(monitor)) {\n        conn.destroy({\n          force: true\n        });\n        return;\n      }\n\n      monitor[kConnection] = conn;\n      monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, utils_1.calculateDurationInMs(start), conn.ismaster));\n      callback(undefined, conn.ismaster);\n    }\n  });\n}\n\nfunction monitorServer(monitor) {\n  return callback => {\n    stateTransition(monitor, STATE_MONITORING);\n\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n\n      callback();\n    }\n\n    checkServer(monitor, (err, isMaster) => {\n      if (err) {\n        // otherwise an error occurred on initial discovery, also bail\n        if (monitor[kServer].description.type === common_1.ServerType.Unknown) {\n          monitor.emit('resetServer', err);\n          return done();\n        }\n      } // if the check indicates streaming is supported, immediately reschedule monitoring\n\n\n      if (isMaster && isMaster.topologyVersion) {\n        setTimeout(() => {\n          var _a;\n\n          if (!isInCloseState(monitor)) {\n            (_a = monitor[kMonitorId]) === null || _a === void 0 ? void 0 : _a.wake();\n          }\n        }, 0);\n      }\n\n      done();\n    });\n  };\n}\n\nfunction makeTopologyVersion(tv) {\n  return {\n    processId: tv.processId,\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n  };\n}\n/** @internal */\n\n\nclass RTTPinger {\n  constructor(cancellationToken, options) {\n    this[kConnection] = undefined;\n    this[kCancellationToken] = cancellationToken;\n    this[kRoundTripTime] = 0;\n    this.closed = false;\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    this[kMonitorId] = setTimeout(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n  }\n\n  get roundTripTime() {\n    return this[kRoundTripTime];\n  }\n\n  close() {\n    var _a;\n\n    this.closed = true;\n    clearTimeout(this[kMonitorId]);\n    (_a = this[kConnection]) === null || _a === void 0 ? void 0 : _a.destroy({\n      force: true\n    });\n    this[kConnection] = undefined;\n  }\n\n}\n\nexports.RTTPinger = RTTPinger;\n\nfunction measureRoundTripTime(rttPinger, options) {\n  const start = utils_1.now();\n  options.cancellationToken = rttPinger[kCancellationToken];\n  const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n\n  if (rttPinger.closed) {\n    return;\n  }\n\n  function measureAndReschedule(conn) {\n    if (rttPinger.closed) {\n      conn === null || conn === void 0 ? void 0 : conn.destroy({\n        force: true\n      });\n      return;\n    }\n\n    if (rttPinger[kConnection] == null) {\n      rttPinger[kConnection] = conn;\n    }\n\n    rttPinger[kRoundTripTime] = utils_1.calculateDurationInMs(start);\n    rttPinger[kMonitorId] = setTimeout(() => measureRoundTripTime(rttPinger, options), heartbeatFrequencyMS);\n  }\n\n  const connection = rttPinger[kConnection];\n\n  if (connection == null) {\n    connect_1.connect(options, (err, conn) => {\n      if (err) {\n        rttPinger[kConnection] = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n      }\n\n      measureAndReschedule(conn);\n    });\n    return;\n  }\n\n  connection.command(utils_1.ns('admin.$cmd'), {\n    ismaster: 1\n  }, undefined, err => {\n    if (err) {\n      rttPinger[kConnection] = undefined;\n      rttPinger[kRoundTripTime] = 0;\n      return;\n    }\n\n    measureAndReschedule();\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","RTTPinger","Monitor","common_1","require","utils_1","connect_1","connection_1","error_1","bson_1","events_1","server_1","mongo_types_1","kServer","Symbol","kMonitorId","kConnection","kCancellationToken","kRTTPinger","kRoundTripTime","STATE_IDLE","STATE_MONITORING","stateTransition","makeStateMachine","STATE_CLOSING","STATE_CLOSED","INVALID_REQUEST_CHECK_STATES","Set","isInCloseState","monitor","s","state","TypedEventEmitter","constructor","server","options","_a","_b","_c","undefined","CancellationToken","setMaxListeners","Infinity","address","description","freeze","connectTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","cancellationToken","connectOptions","assign","id","generation","pool","connectionType","Connection","hostAddress","raw","promoteLongs","promoteValues","promoteBuffers","credentials","autoEncrypter","connect","makeInterruptibleAsyncInterval","monitorServer","interval","minInterval","immediate","requestCheck","has","wake","reset","topologyVersion","resetMonitorState","close","emit","stop","destroy","force","checkServer","callback","start","now","Server","SERVER_HEARTBEAT_STARTED","ServerHeartbeatStartedEvent","failureHandler","err","SERVER_HEARTBEAT_FAILED","ServerHeartbeatFailedEvent","calculateDurationInMs","connection","closed","serverApi","helloOk","maxAwaitTimeMS","isAwaitable","cmd","version","makeTopologyVersion","socketTimeoutMS","exhaustAllowed","command","ns","isMaster","ismaster","isWritablePrimary","rttPinger","duration","roundTripTime","SERVER_HEARTBEAT_SUCCEEDED","ServerHeartbeatSucceededEvent","conn","MongoNetworkError","done","type","ServerType","Unknown","setTimeout","tv","processId","counter","Long","isLong","fromNumber","measureRoundTripTime","clearTimeout","measureAndReschedule"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/sdam/monitor.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RTTPinger = exports.Monitor = void 0;\nconst common_1 = require(\"./common\");\nconst utils_1 = require(\"../utils\");\nconst connect_1 = require(\"../cmap/connect\");\nconst connection_1 = require(\"../cmap/connection\");\nconst error_1 = require(\"../error\");\nconst bson_1 = require(\"../bson\");\nconst events_1 = require(\"./events\");\nconst server_1 = require(\"./server\");\nconst mongo_types_1 = require(\"../mongo_types\");\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kConnection = Symbol('connection');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kRTTPinger = Symbol('rttPinger');\n/** @internal */\nconst kRoundTripTime = Symbol('roundTripTime');\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = utils_1.makeStateMachine({\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, STATE_IDLE, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, STATE_MONITORING],\n    [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, common_1.STATE_CLOSING],\n    [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, common_1.STATE_CLOSING]\n});\nconst INVALID_REQUEST_CHECK_STATES = new Set([common_1.STATE_CLOSING, common_1.STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor) {\n    return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @internal */\nclass Monitor extends mongo_types_1.TypedEventEmitter {\n    constructor(server, options) {\n        var _a, _b, _c;\n        super();\n        this[kServer] = server;\n        this[kConnection] = undefined;\n        this[kCancellationToken] = new mongo_types_1.CancellationToken();\n        this[kCancellationToken].setMaxListeners(Infinity);\n        this[kMonitorId] = undefined;\n        this.s = {\n            state: common_1.STATE_CLOSED\n        };\n        this.address = server.description.address;\n        this.options = Object.freeze({\n            connectTimeoutMS: (_a = options.connectTimeoutMS) !== null && _a !== void 0 ? _a : 10000,\n            heartbeatFrequencyMS: (_b = options.heartbeatFrequencyMS) !== null && _b !== void 0 ? _b : 10000,\n            minHeartbeatFrequencyMS: (_c = options.minHeartbeatFrequencyMS) !== null && _c !== void 0 ? _c : 500\n        });\n        const cancellationToken = this[kCancellationToken];\n        // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n        const connectOptions = Object.assign({\n            id: '<monitor>',\n            generation: server.s.pool.generation,\n            connectionType: connection_1.Connection,\n            cancellationToken,\n            hostAddress: server.description.hostAddress\n        }, options, \n        // force BSON serialization options\n        {\n            raw: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: true\n        });\n        // ensure no authentication is used for monitoring\n        delete connectOptions.credentials;\n        if (connectOptions.autoEncrypter) {\n            delete connectOptions.autoEncrypter;\n        }\n        this.connectOptions = Object.freeze(connectOptions);\n    }\n    connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        // start\n        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n        this[kMonitorId] = utils_1.makeInterruptibleAsyncInterval(monitorServer(this), {\n            interval: heartbeatFrequencyMS,\n            minInterval: minHeartbeatFrequencyMS,\n            immediate: true\n        });\n    }\n    requestCheck() {\n        var _a;\n        if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n            return;\n        }\n        (_a = this[kMonitorId]) === null || _a === void 0 ? void 0 : _a.wake();\n    }\n    reset() {\n        const topologyVersion = this[kServer].description.topologyVersion;\n        if (isInCloseState(this) || topologyVersion == null) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        resetMonitorState(this);\n        // restart monitor\n        stateTransition(this, STATE_IDLE);\n        // restart monitoring\n        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n        this[kMonitorId] = utils_1.makeInterruptibleAsyncInterval(monitorServer(this), {\n            interval: heartbeatFrequencyMS,\n            minInterval: minHeartbeatFrequencyMS\n        });\n    }\n    close() {\n        if (isInCloseState(this)) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        resetMonitorState(this);\n        // close monitor\n        this.emit('close');\n        stateTransition(this, common_1.STATE_CLOSED);\n    }\n}\nexports.Monitor = Monitor;\nfunction resetMonitorState(monitor) {\n    var _a, _b, _c;\n    (_a = monitor[kMonitorId]) === null || _a === void 0 ? void 0 : _a.stop();\n    monitor[kMonitorId] = undefined;\n    (_b = monitor[kRTTPinger]) === null || _b === void 0 ? void 0 : _b.close();\n    monitor[kRTTPinger] = undefined;\n    monitor[kCancellationToken].emit('cancel');\n    (_c = monitor[kConnection]) === null || _c === void 0 ? void 0 : _c.destroy({ force: true });\n    monitor[kConnection] = undefined;\n}\nfunction checkServer(monitor, callback) {\n    let start = utils_1.now();\n    monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address));\n    function failureHandler(err) {\n        var _a;\n        (_a = monitor[kConnection]) === null || _a === void 0 ? void 0 : _a.destroy({ force: true });\n        monitor[kConnection] = undefined;\n        monitor.emit(server_1.Server.SERVER_HEARTBEAT_FAILED, new events_1.ServerHeartbeatFailedEvent(monitor.address, utils_1.calculateDurationInMs(start), err));\n        monitor.emit('resetServer', err);\n        monitor.emit('resetConnectionPool');\n        callback(err);\n    }\n    const connection = monitor[kConnection];\n    if (connection && !connection.closed) {\n        const { serverApi, helloOk } = connection;\n        const connectTimeoutMS = monitor.options.connectTimeoutMS;\n        const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n        const topologyVersion = monitor[kServer].description.topologyVersion;\n        const isAwaitable = topologyVersion != null;\n        const cmd = {\n            [(serverApi === null || serverApi === void 0 ? void 0 : serverApi.version) || helloOk ? 'hello' : 'ismaster']: true,\n            ...(isAwaitable && topologyVersion\n                ? { maxAwaitTimeMS, topologyVersion: makeTopologyVersion(topologyVersion) }\n                : {})\n        };\n        const options = isAwaitable\n            ? {\n                socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n                exhaustAllowed: true\n            }\n            : { socketTimeoutMS: connectTimeoutMS };\n        if (isAwaitable && monitor[kRTTPinger] == null) {\n            monitor[kRTTPinger] = new RTTPinger(monitor[kCancellationToken], Object.assign({ heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS }, monitor.connectOptions));\n        }\n        connection.command(utils_1.ns('admin.$cmd'), cmd, options, (err, isMaster) => {\n            var _a;\n            if (err) {\n                failureHandler(err);\n                return;\n            }\n            if ('isWritablePrimary' in isMaster) {\n                // Provide pre-hello-style response document.\n                isMaster.ismaster = isMaster.isWritablePrimary;\n            }\n            const rttPinger = monitor[kRTTPinger];\n            const duration = isAwaitable && rttPinger ? rttPinger.roundTripTime : utils_1.calculateDurationInMs(start);\n            monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, isMaster));\n            // if we are using the streaming protocol then we immediately issue another `started`\n            // event, otherwise the \"check\" is complete and return to the main monitor loop\n            if (isAwaitable && isMaster.topologyVersion) {\n                monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address));\n                start = utils_1.now();\n            }\n            else {\n                (_a = monitor[kRTTPinger]) === null || _a === void 0 ? void 0 : _a.close();\n                monitor[kRTTPinger] = undefined;\n                callback(undefined, isMaster);\n            }\n        });\n        return;\n    }\n    // connecting does an implicit `ismaster`\n    connect_1.connect(monitor.connectOptions, (err, conn) => {\n        if (err) {\n            monitor[kConnection] = undefined;\n            // we already reset the connection pool on network errors in all cases\n            if (!(err instanceof error_1.MongoNetworkError)) {\n                monitor.emit('resetConnectionPool');\n            }\n            failureHandler(err);\n            return;\n        }\n        if (conn) {\n            if (isInCloseState(monitor)) {\n                conn.destroy({ force: true });\n                return;\n            }\n            monitor[kConnection] = conn;\n            monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, utils_1.calculateDurationInMs(start), conn.ismaster));\n            callback(undefined, conn.ismaster);\n        }\n    });\n}\nfunction monitorServer(monitor) {\n    return (callback) => {\n        stateTransition(monitor, STATE_MONITORING);\n        function done() {\n            if (!isInCloseState(monitor)) {\n                stateTransition(monitor, STATE_IDLE);\n            }\n            callback();\n        }\n        checkServer(monitor, (err, isMaster) => {\n            if (err) {\n                // otherwise an error occurred on initial discovery, also bail\n                if (monitor[kServer].description.type === common_1.ServerType.Unknown) {\n                    monitor.emit('resetServer', err);\n                    return done();\n                }\n            }\n            // if the check indicates streaming is supported, immediately reschedule monitoring\n            if (isMaster && isMaster.topologyVersion) {\n                setTimeout(() => {\n                    var _a;\n                    if (!isInCloseState(monitor)) {\n                        (_a = monitor[kMonitorId]) === null || _a === void 0 ? void 0 : _a.wake();\n                    }\n                }, 0);\n            }\n            done();\n        });\n    };\n}\nfunction makeTopologyVersion(tv) {\n    return {\n        processId: tv.processId,\n        // tests mock counter as just number, but in a real situation counter should always be a Long\n        counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n    };\n}\n/** @internal */\nclass RTTPinger {\n    constructor(cancellationToken, options) {\n        this[kConnection] = undefined;\n        this[kCancellationToken] = cancellationToken;\n        this[kRoundTripTime] = 0;\n        this.closed = false;\n        const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n        this[kMonitorId] = setTimeout(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n    }\n    get roundTripTime() {\n        return this[kRoundTripTime];\n    }\n    close() {\n        var _a;\n        this.closed = true;\n        clearTimeout(this[kMonitorId]);\n        (_a = this[kConnection]) === null || _a === void 0 ? void 0 : _a.destroy({ force: true });\n        this[kConnection] = undefined;\n    }\n}\nexports.RTTPinger = RTTPinger;\nfunction measureRoundTripTime(rttPinger, options) {\n    const start = utils_1.now();\n    options.cancellationToken = rttPinger[kCancellationToken];\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    if (rttPinger.closed) {\n        return;\n    }\n    function measureAndReschedule(conn) {\n        if (rttPinger.closed) {\n            conn === null || conn === void 0 ? void 0 : conn.destroy({ force: true });\n            return;\n        }\n        if (rttPinger[kConnection] == null) {\n            rttPinger[kConnection] = conn;\n        }\n        rttPinger[kRoundTripTime] = utils_1.calculateDurationInMs(start);\n        rttPinger[kMonitorId] = setTimeout(() => measureRoundTripTime(rttPinger, options), heartbeatFrequencyMS);\n    }\n    const connection = rttPinger[kConnection];\n    if (connection == null) {\n        connect_1.connect(options, (err, conn) => {\n            if (err) {\n                rttPinger[kConnection] = undefined;\n                rttPinger[kRoundTripTime] = 0;\n                return;\n            }\n            measureAndReschedule(conn);\n        });\n        return;\n    }\n    connection.command(utils_1.ns('admin.$cmd'), { ismaster: 1 }, undefined, err => {\n        if (err) {\n            rttPinger[kConnection] = undefined;\n            rttPinger[kRoundTripTime] = 0;\n            return;\n        }\n        measureAndReschedule();\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}