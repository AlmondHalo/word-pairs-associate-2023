{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindOneAndUpdateOperation = exports.FindOneAndReplaceOperation = exports.FindOneAndDeleteOperation = exports.ReturnDocument = void 0;\n\nconst read_preference_1 = require(\"../read_preference\");\n\nconst utils_1 = require(\"../utils\");\n\nconst error_1 = require(\"../error\");\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n\nconst sort_1 = require(\"../sort\");\n/** @public */\n\n\nexports.ReturnDocument = Object.freeze({\n  BEFORE: 'before',\n  AFTER: 'after'\n});\n\nfunction configureFindAndModifyCmdBaseUpdateOpts(cmdBase, options) {\n  cmdBase.new = options.returnDocument === exports.ReturnDocument.AFTER;\n  cmdBase.upsert = options.upsert === true;\n\n  if (options.bypassDocumentValidation === true) {\n    cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n\n  return cmdBase;\n}\n/** @internal */\n\n\nclass FindAndModifyOperation extends command_1.CommandOperation {\n  constructor(collection, query, options) {\n    super(collection, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.cmdBase = {\n      remove: false,\n      new: false,\n      upsert: false\n    };\n    const sort = sort_1.formatSort(options.sort);\n\n    if (sort) {\n      this.cmdBase.sort = sort;\n    }\n\n    if (options.projection) {\n      this.cmdBase.fields = options.projection;\n    }\n\n    if (options.maxTimeMS) {\n      this.cmdBase.maxTimeMS = options.maxTimeMS;\n    } // Decorate the findAndModify command with the write Concern\n\n\n    if (options.writeConcern) {\n      this.cmdBase.writeConcern = options.writeConcern;\n    }\n\n    if (options.let) {\n      this.cmdBase.let = options.let;\n    } // force primary read preference\n\n\n    this.readPreference = read_preference_1.ReadPreference.primary;\n    this.collection = collection;\n    this.query = query;\n  }\n\n  execute(server, session, callback) {\n    var _a;\n\n    const coll = this.collection;\n    const query = this.query;\n    const options = { ...this.options,\n      ...this.bsonOptions\n    }; // Create findAndModify command object\n\n    const cmd = {\n      findAndModify: coll.collectionName,\n      query: query,\n      ...this.cmdBase\n    }; // Have we specified collation\n\n    try {\n      utils_1.decorateWithCollation(cmd, coll, options);\n    } catch (err) {\n      return callback(err);\n    }\n\n    if (options.hint) {\n      // TODO: once this method becomes a CommandOperation we will have the server\n      // in place to check.\n      const unacknowledgedWrite = ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) === 0;\n\n      if (unacknowledgedWrite || utils_1.maxWireVersion(server) < 8) {\n        callback(new error_1.MongoCompatibilityError('The current topology does not support a hint on findAndModify commands'));\n        return;\n      }\n\n      cmd.hint = options.hint;\n    }\n\n    if (this.explain && utils_1.maxWireVersion(server) < 4) {\n      callback(new error_1.MongoCompatibilityError(`Server ${server.name} does not support explain on findAndModify`));\n      return;\n    } // Execute the command\n\n\n    super.executeCommand(server, session, cmd, (err, result) => {\n      if (err) return callback(err);\n      return callback(undefined, result);\n    });\n  }\n\n}\n/** @internal */\n\n\nclass FindOneAndDeleteOperation extends FindAndModifyOperation {\n  constructor(collection, filter, options) {\n    // Basic validation\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.remove = true;\n  }\n\n}\n\nexports.FindOneAndDeleteOperation = FindOneAndDeleteOperation;\n/** @internal */\n\nclass FindOneAndReplaceOperation extends FindAndModifyOperation {\n  constructor(collection, filter, replacement, options) {\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n\n    if (replacement == null || typeof replacement !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n    }\n\n    if (utils_1.hasAtomicOperators(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.update = replacement;\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n  }\n\n}\n\nexports.FindOneAndReplaceOperation = FindOneAndReplaceOperation;\n/** @internal */\n\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n  constructor(collection, filter, update, options) {\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n\n    if (update == null || typeof update !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"update\" must be an object');\n    }\n\n    if (!utils_1.hasAtomicOperators(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.update = update;\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n\n    if (options.arrayFilters) {\n      this.cmdBase.arrayFilters = options.arrayFilters;\n    }\n  }\n\n}\n\nexports.FindOneAndUpdateOperation = FindOneAndUpdateOperation;\noperation_1.defineAspects(FindAndModifyOperation, [operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);","map":{"version":3,"names":["Object","defineProperty","exports","value","FindOneAndUpdateOperation","FindOneAndReplaceOperation","FindOneAndDeleteOperation","ReturnDocument","read_preference_1","require","utils_1","error_1","command_1","operation_1","sort_1","freeze","BEFORE","AFTER","configureFindAndModifyCmdBaseUpdateOpts","cmdBase","options","new","returnDocument","upsert","bypassDocumentValidation","FindAndModifyOperation","CommandOperation","constructor","collection","query","remove","sort","formatSort","projection","fields","maxTimeMS","writeConcern","let","readPreference","ReadPreference","primary","execute","server","session","callback","_a","coll","bsonOptions","cmd","findAndModify","collectionName","decorateWithCollation","err","hint","unacknowledgedWrite","w","maxWireVersion","MongoCompatibilityError","explain","name","executeCommand","result","undefined","filter","MongoInvalidArgumentError","replacement","hasAtomicOperators","update","arrayFilters","defineAspects","Aspect","WRITE_OPERATION","RETRYABLE","EXPLAINABLE"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/operations/find_and_modify.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FindOneAndUpdateOperation = exports.FindOneAndReplaceOperation = exports.FindOneAndDeleteOperation = exports.ReturnDocument = void 0;\nconst read_preference_1 = require(\"../read_preference\");\nconst utils_1 = require(\"../utils\");\nconst error_1 = require(\"../error\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\nconst sort_1 = require(\"../sort\");\n/** @public */\nexports.ReturnDocument = Object.freeze({\n    BEFORE: 'before',\n    AFTER: 'after'\n});\nfunction configureFindAndModifyCmdBaseUpdateOpts(cmdBase, options) {\n    cmdBase.new = options.returnDocument === exports.ReturnDocument.AFTER;\n    cmdBase.upsert = options.upsert === true;\n    if (options.bypassDocumentValidation === true) {\n        cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n    return cmdBase;\n}\n/** @internal */\nclass FindAndModifyOperation extends command_1.CommandOperation {\n    constructor(collection, query, options) {\n        super(collection, options);\n        this.options = options !== null && options !== void 0 ? options : {};\n        this.cmdBase = {\n            remove: false,\n            new: false,\n            upsert: false\n        };\n        const sort = sort_1.formatSort(options.sort);\n        if (sort) {\n            this.cmdBase.sort = sort;\n        }\n        if (options.projection) {\n            this.cmdBase.fields = options.projection;\n        }\n        if (options.maxTimeMS) {\n            this.cmdBase.maxTimeMS = options.maxTimeMS;\n        }\n        // Decorate the findAndModify command with the write Concern\n        if (options.writeConcern) {\n            this.cmdBase.writeConcern = options.writeConcern;\n        }\n        if (options.let) {\n            this.cmdBase.let = options.let;\n        }\n        // force primary read preference\n        this.readPreference = read_preference_1.ReadPreference.primary;\n        this.collection = collection;\n        this.query = query;\n    }\n    execute(server, session, callback) {\n        var _a;\n        const coll = this.collection;\n        const query = this.query;\n        const options = { ...this.options, ...this.bsonOptions };\n        // Create findAndModify command object\n        const cmd = {\n            findAndModify: coll.collectionName,\n            query: query,\n            ...this.cmdBase\n        };\n        // Have we specified collation\n        try {\n            utils_1.decorateWithCollation(cmd, coll, options);\n        }\n        catch (err) {\n            return callback(err);\n        }\n        if (options.hint) {\n            // TODO: once this method becomes a CommandOperation we will have the server\n            // in place to check.\n            const unacknowledgedWrite = ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) === 0;\n            if (unacknowledgedWrite || utils_1.maxWireVersion(server) < 8) {\n                callback(new error_1.MongoCompatibilityError('The current topology does not support a hint on findAndModify commands'));\n                return;\n            }\n            cmd.hint = options.hint;\n        }\n        if (this.explain && utils_1.maxWireVersion(server) < 4) {\n            callback(new error_1.MongoCompatibilityError(`Server ${server.name} does not support explain on findAndModify`));\n            return;\n        }\n        // Execute the command\n        super.executeCommand(server, session, cmd, (err, result) => {\n            if (err)\n                return callback(err);\n            return callback(undefined, result);\n        });\n    }\n}\n/** @internal */\nclass FindOneAndDeleteOperation extends FindAndModifyOperation {\n    constructor(collection, filter, options) {\n        // Basic validation\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        super(collection, filter, options);\n        this.cmdBase.remove = true;\n    }\n}\nexports.FindOneAndDeleteOperation = FindOneAndDeleteOperation;\n/** @internal */\nclass FindOneAndReplaceOperation extends FindAndModifyOperation {\n    constructor(collection, filter, replacement, options) {\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (replacement == null || typeof replacement !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n        }\n        if (utils_1.hasAtomicOperators(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = replacement;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n    }\n}\nexports.FindOneAndReplaceOperation = FindOneAndReplaceOperation;\n/** @internal */\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n    constructor(collection, filter, update, options) {\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (update == null || typeof update !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"update\" must be an object');\n        }\n        if (!utils_1.hasAtomicOperators(update)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = update;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n        if (options.arrayFilters) {\n            this.cmdBase.arrayFilters = options.arrayFilters;\n        }\n    }\n}\nexports.FindOneAndUpdateOperation = FindOneAndUpdateOperation;\noperation_1.defineAspects(FindAndModifyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE\n]);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}