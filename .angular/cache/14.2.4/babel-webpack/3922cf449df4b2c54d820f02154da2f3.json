{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Logger = exports.LoggerLevel = void 0;\n\nconst util_1 = require(\"util\");\n\nconst utils_1 = require(\"./utils\");\n\nconst error_1 = require(\"./error\"); // Filters for classes\n\n\nconst classFilters = {};\nlet filteredClasses = {};\nlet level; // Save the process id\n\nconst pid = process.pid; // current logger\n// eslint-disable-next-line no-console\n\nlet currentLogger = console.warn;\n/** @public */\n\nexports.LoggerLevel = Object.freeze({\n  ERROR: 'error',\n  WARN: 'warn',\n  INFO: 'info',\n  DEBUG: 'debug',\n  error: 'error',\n  warn: 'warn',\n  info: 'info',\n  debug: 'debug'\n});\n/**\n * @public\n */\n\nclass Logger {\n  /**\n   * Creates a new Logger instance\n   *\n   * @param className - The Class name associated with the logging instance\n   * @param options - Optional logging settings\n   */\n  constructor(className, options) {\n    options = options !== null && options !== void 0 ? options : {}; // Current reference\n\n    this.className = className; // Current logger\n\n    if (!(options.logger instanceof Logger) && typeof options.logger === 'function') {\n      currentLogger = options.logger;\n    } // Set level of logging, default is error\n\n\n    if (options.loggerLevel) {\n      level = options.loggerLevel || exports.LoggerLevel.ERROR;\n    } // Add all class names\n\n\n    if (filteredClasses[this.className] == null) {\n      classFilters[this.className] = true;\n    }\n  }\n  /**\n   * Log a message at the debug level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n\n\n  debug(message, object) {\n    if (this.isDebug() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n      const dateTime = new Date().getTime();\n      const msg = util_1.format('[%s-%s:%s] %s %s', 'DEBUG', this.className, pid, dateTime, message);\n      const state = {\n        type: exports.LoggerLevel.DEBUG,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n  /**\n   * Log a message at the warn level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n\n\n  warn(message, object) {\n    if (this.isWarn() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n      const dateTime = new Date().getTime();\n      const msg = util_1.format('[%s-%s:%s] %s %s', 'WARN', this.className, pid, dateTime, message);\n      const state = {\n        type: exports.LoggerLevel.WARN,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n  /**\n   * Log a message at the info level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n\n\n  info(message, object) {\n    if (this.isInfo() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n      const dateTime = new Date().getTime();\n      const msg = util_1.format('[%s-%s:%s] %s %s', 'INFO', this.className, pid, dateTime, message);\n      const state = {\n        type: exports.LoggerLevel.INFO,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n  /**\n   * Log a message at the error level\n   *\n   * @param message - The message to log\n   * @param object - Additional meta data to log\n   */\n\n\n  error(message, object) {\n    if (this.isError() && (Object.keys(filteredClasses).length > 0 && filteredClasses[this.className] || Object.keys(filteredClasses).length === 0 && classFilters[this.className])) {\n      const dateTime = new Date().getTime();\n      const msg = util_1.format('[%s-%s:%s] %s %s', 'ERROR', this.className, pid, dateTime, message);\n      const state = {\n        type: exports.LoggerLevel.ERROR,\n        message,\n        className: this.className,\n        pid,\n        date: dateTime\n      };\n      if (object) state.meta = object;\n      currentLogger(msg, state);\n    }\n  }\n  /** Is the logger set at info level */\n\n\n  isInfo() {\n    return level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n  }\n  /** Is the logger set at error level */\n\n\n  isError() {\n    return level === exports.LoggerLevel.ERROR || level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n  }\n  /** Is the logger set at error level */\n\n\n  isWarn() {\n    return level === exports.LoggerLevel.ERROR || level === exports.LoggerLevel.WARN || level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n  }\n  /** Is the logger set at debug level */\n\n\n  isDebug() {\n    return level === exports.LoggerLevel.DEBUG;\n  }\n  /** Resets the logger to default settings, error and no filtered classes */\n\n\n  static reset() {\n    level = exports.LoggerLevel.ERROR;\n    filteredClasses = {};\n  }\n  /** Get the current logger function */\n\n\n  static currentLogger() {\n    return currentLogger;\n  }\n  /**\n   * Set the current logger function\n   *\n   * @param logger - Custom logging function\n   */\n\n\n  static setCurrentLogger(logger) {\n    if (typeof logger !== 'function') {\n      throw new error_1.MongoInvalidArgumentError('Current logger must be a function');\n    }\n\n    currentLogger = logger;\n  }\n  /**\n   * Filter log messages for a particular class\n   *\n   * @param type - The type of filter (currently only class)\n   * @param values - The filters to apply\n   */\n\n\n  static filter(type, values) {\n    if (type === 'class' && Array.isArray(values)) {\n      filteredClasses = {};\n      values.forEach(x => filteredClasses[x] = true);\n    }\n  }\n  /**\n   * Set the current log level\n   *\n   * @param newLevel - Set current log level (debug, warn, info, error)\n   */\n\n\n  static setLevel(newLevel) {\n    if (newLevel !== exports.LoggerLevel.INFO && newLevel !== exports.LoggerLevel.ERROR && newLevel !== exports.LoggerLevel.DEBUG && newLevel !== exports.LoggerLevel.WARN) {\n      throw new error_1.MongoInvalidArgumentError(`Argument \"newLevel\" should be one of ${utils_1.enumToString(exports.LoggerLevel)}`);\n    }\n\n    level = newLevel;\n  }\n\n}\n\nexports.Logger = Logger;","map":{"version":3,"names":["Object","defineProperty","exports","value","Logger","LoggerLevel","util_1","require","utils_1","error_1","classFilters","filteredClasses","level","pid","process","currentLogger","console","warn","freeze","ERROR","WARN","INFO","DEBUG","error","info","debug","constructor","className","options","logger","loggerLevel","message","object","isDebug","keys","length","dateTime","Date","getTime","msg","format","state","type","date","meta","isWarn","isInfo","isError","reset","setCurrentLogger","MongoInvalidArgumentError","filter","values","Array","isArray","forEach","x","setLevel","newLevel","enumToString"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/logger.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Logger = exports.LoggerLevel = void 0;\nconst util_1 = require(\"util\");\nconst utils_1 = require(\"./utils\");\nconst error_1 = require(\"./error\");\n// Filters for classes\nconst classFilters = {};\nlet filteredClasses = {};\nlet level;\n// Save the process id\nconst pid = process.pid;\n// current logger\n// eslint-disable-next-line no-console\nlet currentLogger = console.warn;\n/** @public */\nexports.LoggerLevel = Object.freeze({\n    ERROR: 'error',\n    WARN: 'warn',\n    INFO: 'info',\n    DEBUG: 'debug',\n    error: 'error',\n    warn: 'warn',\n    info: 'info',\n    debug: 'debug'\n});\n/**\n * @public\n */\nclass Logger {\n    /**\n     * Creates a new Logger instance\n     *\n     * @param className - The Class name associated with the logging instance\n     * @param options - Optional logging settings\n     */\n    constructor(className, options) {\n        options = options !== null && options !== void 0 ? options : {};\n        // Current reference\n        this.className = className;\n        // Current logger\n        if (!(options.logger instanceof Logger) && typeof options.logger === 'function') {\n            currentLogger = options.logger;\n        }\n        // Set level of logging, default is error\n        if (options.loggerLevel) {\n            level = options.loggerLevel || exports.LoggerLevel.ERROR;\n        }\n        // Add all class names\n        if (filteredClasses[this.className] == null) {\n            classFilters[this.className] = true;\n        }\n    }\n    /**\n     * Log a message at the debug level\n     *\n     * @param message - The message to log\n     * @param object - Additional meta data to log\n     */\n    debug(message, object) {\n        if (this.isDebug() &&\n            ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n                (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))) {\n            const dateTime = new Date().getTime();\n            const msg = util_1.format('[%s-%s:%s] %s %s', 'DEBUG', this.className, pid, dateTime, message);\n            const state = {\n                type: exports.LoggerLevel.DEBUG,\n                message,\n                className: this.className,\n                pid,\n                date: dateTime\n            };\n            if (object)\n                state.meta = object;\n            currentLogger(msg, state);\n        }\n    }\n    /**\n     * Log a message at the warn level\n     *\n     * @param message - The message to log\n     * @param object - Additional meta data to log\n     */\n    warn(message, object) {\n        if (this.isWarn() &&\n            ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n                (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))) {\n            const dateTime = new Date().getTime();\n            const msg = util_1.format('[%s-%s:%s] %s %s', 'WARN', this.className, pid, dateTime, message);\n            const state = {\n                type: exports.LoggerLevel.WARN,\n                message,\n                className: this.className,\n                pid,\n                date: dateTime\n            };\n            if (object)\n                state.meta = object;\n            currentLogger(msg, state);\n        }\n    }\n    /**\n     * Log a message at the info level\n     *\n     * @param message - The message to log\n     * @param object - Additional meta data to log\n     */\n    info(message, object) {\n        if (this.isInfo() &&\n            ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n                (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))) {\n            const dateTime = new Date().getTime();\n            const msg = util_1.format('[%s-%s:%s] %s %s', 'INFO', this.className, pid, dateTime, message);\n            const state = {\n                type: exports.LoggerLevel.INFO,\n                message,\n                className: this.className,\n                pid,\n                date: dateTime\n            };\n            if (object)\n                state.meta = object;\n            currentLogger(msg, state);\n        }\n    }\n    /**\n     * Log a message at the error level\n     *\n     * @param message - The message to log\n     * @param object - Additional meta data to log\n     */\n    error(message, object) {\n        if (this.isError() &&\n            ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className]) ||\n                (Object.keys(filteredClasses).length === 0 && classFilters[this.className]))) {\n            const dateTime = new Date().getTime();\n            const msg = util_1.format('[%s-%s:%s] %s %s', 'ERROR', this.className, pid, dateTime, message);\n            const state = {\n                type: exports.LoggerLevel.ERROR,\n                message,\n                className: this.className,\n                pid,\n                date: dateTime\n            };\n            if (object)\n                state.meta = object;\n            currentLogger(msg, state);\n        }\n    }\n    /** Is the logger set at info level */\n    isInfo() {\n        return level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n    }\n    /** Is the logger set at error level */\n    isError() {\n        return level === exports.LoggerLevel.ERROR || level === exports.LoggerLevel.INFO || level === exports.LoggerLevel.DEBUG;\n    }\n    /** Is the logger set at error level */\n    isWarn() {\n        return (level === exports.LoggerLevel.ERROR ||\n            level === exports.LoggerLevel.WARN ||\n            level === exports.LoggerLevel.INFO ||\n            level === exports.LoggerLevel.DEBUG);\n    }\n    /** Is the logger set at debug level */\n    isDebug() {\n        return level === exports.LoggerLevel.DEBUG;\n    }\n    /** Resets the logger to default settings, error and no filtered classes */\n    static reset() {\n        level = exports.LoggerLevel.ERROR;\n        filteredClasses = {};\n    }\n    /** Get the current logger function */\n    static currentLogger() {\n        return currentLogger;\n    }\n    /**\n     * Set the current logger function\n     *\n     * @param logger - Custom logging function\n     */\n    static setCurrentLogger(logger) {\n        if (typeof logger !== 'function') {\n            throw new error_1.MongoInvalidArgumentError('Current logger must be a function');\n        }\n        currentLogger = logger;\n    }\n    /**\n     * Filter log messages for a particular class\n     *\n     * @param type - The type of filter (currently only class)\n     * @param values - The filters to apply\n     */\n    static filter(type, values) {\n        if (type === 'class' && Array.isArray(values)) {\n            filteredClasses = {};\n            values.forEach(x => (filteredClasses[x] = true));\n        }\n    }\n    /**\n     * Set the current log level\n     *\n     * @param newLevel - Set current log level (debug, warn, info, error)\n     */\n    static setLevel(newLevel) {\n        if (newLevel !== exports.LoggerLevel.INFO &&\n            newLevel !== exports.LoggerLevel.ERROR &&\n            newLevel !== exports.LoggerLevel.DEBUG &&\n            newLevel !== exports.LoggerLevel.WARN) {\n            throw new error_1.MongoInvalidArgumentError(`Argument \"newLevel\" should be one of ${utils_1.enumToString(exports.LoggerLevel)}`);\n        }\n        level = newLevel;\n    }\n}\nexports.Logger = Logger;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}