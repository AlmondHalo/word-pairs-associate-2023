{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReadConcern = exports.ReadConcernLevel = void 0;\n/** @public */\n\nexports.ReadConcernLevel = Object.freeze({\n  local: 'local',\n  majority: 'majority',\n  linearizable: 'linearizable',\n  available: 'available',\n  snapshot: 'snapshot'\n});\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @public\n *\n * @see https://docs.mongodb.com/manual/reference/read-concern/index.html\n */\n\nclass ReadConcern {\n  /** Constructs a ReadConcern from the read concern level.*/\n  constructor(level) {\n    var _a;\n    /**\n     * A spec test exists that allows level to be any string.\n     * \"invalid readConcern with out stage\"\n     * @see ./test/spec/crud/v2/aggregate-out-readConcern.json\n     * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#unknown-levels-and-additional-options-for-string-based-readconcerns\n     */\n\n\n    this.level = (_a = exports.ReadConcernLevel[level]) !== null && _a !== void 0 ? _a : level;\n  }\n  /**\n   * Construct a ReadConcern given an options object.\n   *\n   * @param options - The options object from which to extract the write concern.\n   */\n\n\n  static fromOptions(options) {\n    if (options == null) {\n      return;\n    }\n\n    if (options.readConcern) {\n      const {\n        readConcern\n      } = options;\n\n      if (readConcern instanceof ReadConcern) {\n        return readConcern;\n      } else if (typeof readConcern === 'string') {\n        return new ReadConcern(readConcern);\n      } else if ('level' in readConcern && readConcern.level) {\n        return new ReadConcern(readConcern.level);\n      }\n    }\n\n    if (options.level) {\n      return new ReadConcern(options.level);\n    }\n  }\n\n  static get MAJORITY() {\n    return exports.ReadConcernLevel.majority;\n  }\n\n  static get AVAILABLE() {\n    return exports.ReadConcernLevel.available;\n  }\n\n  static get LINEARIZABLE() {\n    return exports.ReadConcernLevel.linearizable;\n  }\n\n  static get SNAPSHOT() {\n    return exports.ReadConcernLevel.snapshot;\n  }\n\n  toJSON() {\n    return {\n      level: this.level\n    };\n  }\n\n}\n\nexports.ReadConcern = ReadConcern;","map":{"version":3,"names":["Object","defineProperty","exports","value","ReadConcern","ReadConcernLevel","freeze","local","majority","linearizable","available","snapshot","constructor","level","_a","fromOptions","options","readConcern","MAJORITY","AVAILABLE","LINEARIZABLE","SNAPSHOT","toJSON"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/read_concern.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReadConcern = exports.ReadConcernLevel = void 0;\n/** @public */\nexports.ReadConcernLevel = Object.freeze({\n    local: 'local',\n    majority: 'majority',\n    linearizable: 'linearizable',\n    available: 'available',\n    snapshot: 'snapshot'\n});\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @public\n *\n * @see https://docs.mongodb.com/manual/reference/read-concern/index.html\n */\nclass ReadConcern {\n    /** Constructs a ReadConcern from the read concern level.*/\n    constructor(level) {\n        var _a;\n        /**\n         * A spec test exists that allows level to be any string.\n         * \"invalid readConcern with out stage\"\n         * @see ./test/spec/crud/v2/aggregate-out-readConcern.json\n         * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#unknown-levels-and-additional-options-for-string-based-readconcerns\n         */\n        this.level = (_a = exports.ReadConcernLevel[level]) !== null && _a !== void 0 ? _a : level;\n    }\n    /**\n     * Construct a ReadConcern given an options object.\n     *\n     * @param options - The options object from which to extract the write concern.\n     */\n    static fromOptions(options) {\n        if (options == null) {\n            return;\n        }\n        if (options.readConcern) {\n            const { readConcern } = options;\n            if (readConcern instanceof ReadConcern) {\n                return readConcern;\n            }\n            else if (typeof readConcern === 'string') {\n                return new ReadConcern(readConcern);\n            }\n            else if ('level' in readConcern && readConcern.level) {\n                return new ReadConcern(readConcern.level);\n            }\n        }\n        if (options.level) {\n            return new ReadConcern(options.level);\n        }\n    }\n    static get MAJORITY() {\n        return exports.ReadConcernLevel.majority;\n    }\n    static get AVAILABLE() {\n        return exports.ReadConcernLevel.available;\n    }\n    static get LINEARIZABLE() {\n        return exports.ReadConcernLevel.linearizable;\n    }\n    static get SNAPSHOT() {\n        return exports.ReadConcernLevel.snapshot;\n    }\n    toJSON() {\n        return { level: this.level };\n    }\n}\nexports.ReadConcern = ReadConcern;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsBF,OAAO,CAACG,gBAAR,GAA2B,KAAK,CAAtD;AACA;;AACAH,OAAO,CAACG,gBAAR,GAA2BL,MAAM,CAACM,MAAP,CAAc;EACrCC,KAAK,EAAE,OAD8B;EAErCC,QAAQ,EAAE,UAF2B;EAGrCC,YAAY,EAAE,cAHuB;EAIrCC,SAAS,EAAE,WAJ0B;EAKrCC,QAAQ,EAAE;AAL2B,CAAd,CAA3B;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMP,WAAN,CAAkB;EACd;EACAQ,WAAW,CAACC,KAAD,EAAQ;IACf,IAAIC,EAAJ;IACA;AACR;AACA;AACA;AACA;AACA;;;IACQ,KAAKD,KAAL,GAAa,CAACC,EAAE,GAAGZ,OAAO,CAACG,gBAAR,CAAyBQ,KAAzB,CAAN,MAA2C,IAA3C,IAAmDC,EAAE,KAAK,KAAK,CAA/D,GAAmEA,EAAnE,GAAwED,KAArF;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACsB,OAAXE,WAAW,CAACC,OAAD,EAAU;IACxB,IAAIA,OAAO,IAAI,IAAf,EAAqB;MACjB;IACH;;IACD,IAAIA,OAAO,CAACC,WAAZ,EAAyB;MACrB,MAAM;QAAEA;MAAF,IAAkBD,OAAxB;;MACA,IAAIC,WAAW,YAAYb,WAA3B,EAAwC;QACpC,OAAOa,WAAP;MACH,CAFD,MAGK,IAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;QACtC,OAAO,IAAIb,WAAJ,CAAgBa,WAAhB,CAAP;MACH,CAFI,MAGA,IAAI,WAAWA,WAAX,IAA0BA,WAAW,CAACJ,KAA1C,EAAiD;QAClD,OAAO,IAAIT,WAAJ,CAAgBa,WAAW,CAACJ,KAA5B,CAAP;MACH;IACJ;;IACD,IAAIG,OAAO,CAACH,KAAZ,EAAmB;MACf,OAAO,IAAIT,WAAJ,CAAgBY,OAAO,CAACH,KAAxB,CAAP;IACH;EACJ;;EACkB,WAARK,QAAQ,GAAG;IAClB,OAAOhB,OAAO,CAACG,gBAAR,CAAyBG,QAAhC;EACH;;EACmB,WAATW,SAAS,GAAG;IACnB,OAAOjB,OAAO,CAACG,gBAAR,CAAyBK,SAAhC;EACH;;EACsB,WAAZU,YAAY,GAAG;IACtB,OAAOlB,OAAO,CAACG,gBAAR,CAAyBI,YAAhC;EACH;;EACkB,WAARY,QAAQ,GAAG;IAClB,OAAOnB,OAAO,CAACG,gBAAR,CAAyBM,QAAhC;EACH;;EACDW,MAAM,GAAG;IACL,OAAO;MAAET,KAAK,EAAE,KAAKA;IAAd,CAAP;EACH;;AAnDa;;AAqDlBX,OAAO,CAACE,WAAR,GAAsBA,WAAtB"},"metadata":{},"sourceType":"script"}