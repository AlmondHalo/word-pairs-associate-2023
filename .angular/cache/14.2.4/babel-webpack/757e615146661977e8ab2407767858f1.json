{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerCapabilities = exports.TOPOLOGY_EVENTS = exports.Topology = void 0;\n\nconst Denque = require(\"denque\");\n\nconst read_preference_1 = require(\"../read_preference\");\n\nconst server_description_1 = require(\"./server_description\");\n\nconst topology_description_1 = require(\"./topology_description\");\n\nconst server_1 = require(\"./server\");\n\nconst sessions_1 = require(\"../sessions\");\n\nconst srv_polling_1 = require(\"./srv_polling\");\n\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\n\nconst error_1 = require(\"../error\");\n\nconst server_selection_1 = require(\"./server_selection\");\n\nconst utils_1 = require(\"../utils\");\n\nconst common_1 = require(\"./common\");\n\nconst events_1 = require(\"./events\");\n\nconst connection_1 = require(\"../cmap/connection\");\n\nconst connection_string_1 = require(\"../connection_string\");\n\nconst bson_1 = require(\"../bson\");\n\nconst mongo_types_1 = require(\"../mongo_types\"); // Global state\n\n\nlet globalTopologyCounter = 0; // events that we relay to the `Topology`\n\nconst SERVER_RELAY_EVENTS = [server_1.Server.SERVER_HEARTBEAT_STARTED, server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, server_1.Server.SERVER_HEARTBEAT_FAILED, connection_1.Connection.COMMAND_STARTED, connection_1.Connection.COMMAND_SUCCEEDED, connection_1.Connection.COMMAND_FAILED, ...connection_pool_1.CMAP_EVENTS]; // all events we listen to from `Server` instances\n\nconst LOCAL_SERVER_EVENTS = [server_1.Server.CONNECT, server_1.Server.DESCRIPTION_RECEIVED, server_1.Server.CLOSED, server_1.Server.ENDED];\nconst stateTransition = utils_1.makeStateMachine({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\n\nconst kCancelled = Symbol('cancelled');\n/** @internal */\n\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\n\nclass Topology extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @param seedlist - a list of HostAddress instances to connect to\n   */\n  constructor(seeds, options) {\n    var _a;\n\n    super(); // Legacy CSFLE support\n\n    this.bson = Object.create(null);\n    this.bson.serialize = bson_1.serialize;\n    this.bson.deserialize = bson_1.deserialize; // Options should only be undefined in tests, MongoClient will always have defined options\n\n    options = options !== null && options !== void 0 ? options : {\n      hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n      retryReads: connection_string_1.DEFAULT_OPTIONS.get('retryReads'),\n      retryWrites: connection_string_1.DEFAULT_OPTIONS.get('retryWrites'),\n      serverSelectionTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('serverSelectionTimeoutMS'),\n      directConnection: connection_string_1.DEFAULT_OPTIONS.get('directConnection'),\n      loadBalanced: connection_string_1.DEFAULT_OPTIONS.get('loadBalanced'),\n      metadata: connection_string_1.DEFAULT_OPTIONS.get('metadata'),\n      monitorCommands: connection_string_1.DEFAULT_OPTIONS.get('monitorCommands'),\n      tls: connection_string_1.DEFAULT_OPTIONS.get('tls'),\n      maxPoolSize: connection_string_1.DEFAULT_OPTIONS.get('maxPoolSize'),\n      minPoolSize: connection_string_1.DEFAULT_OPTIONS.get('minPoolSize'),\n      waitQueueTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('waitQueueTimeoutMS'),\n      connectionType: connection_string_1.DEFAULT_OPTIONS.get('connectionType'),\n      connectTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('connectTimeoutMS'),\n      maxIdleTimeMS: connection_string_1.DEFAULT_OPTIONS.get('maxIdleTimeMS'),\n      heartbeatFrequencyMS: connection_string_1.DEFAULT_OPTIONS.get('heartbeatFrequencyMS'),\n      minHeartbeatFrequencyMS: connection_string_1.DEFAULT_OPTIONS.get('minHeartbeatFrequencyMS')\n    };\n\n    if (typeof seeds === 'string') {\n      seeds = [utils_1.HostAddress.fromString(seeds)];\n    } else if (!Array.isArray(seeds)) {\n      seeds = [seeds];\n    }\n\n    const seedlist = [];\n\n    for (const seed of seeds) {\n      if (typeof seed === 'string') {\n        seedlist.push(utils_1.HostAddress.fromString(seed));\n      } else if (seed instanceof utils_1.HostAddress) {\n        seedlist.push(seed);\n      } else {\n        // FIXME(NODE-3483): May need to be a MongoParseError\n        throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n      }\n    }\n\n    const topologyType = topologyTypeFromOptions(options);\n    const topologyId = globalTopologyCounter++;\n    const serverDescriptions = new Map();\n\n    for (const hostAddress of seedlist) {\n      serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n    }\n\n    this[kWaitQueue] = new Denque();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist,\n      // initial state\n      state: common_1.STATE_CLOSED,\n      // the topology description\n      description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      // Server Session Pool\n      sessionPool: new sessions_1.ServerSessionPool(this),\n      // Active client sessions\n      sessions: new Set(),\n      credentials: options === null || options === void 0 ? void 0 : options.credentials,\n      clusterTime: undefined,\n      // timer management\n      connectionTimers: new Set(),\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\n    };\n\n    if (options.srvHost && !options.loadBalanced) {\n      this.s.srvPoller = (_a = options.srvPoller) !== null && _a !== void 0 ? _a : new srv_polling_1.SrvPoller({\n        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n        srvHost: options.srvHost\n      });\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    }\n  }\n\n  detectShardedTopology(event) {\n    var _a, _b, _c;\n\n    const previousType = event.previousDescription.type;\n    const newType = event.newDescription.type;\n    const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n    const srvListeners = (_a = this.s.srvPoller) === null || _a === void 0 ? void 0 : _a.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n    const listeningToSrvPolling = !!(srvListeners === null || srvListeners === void 0 ? void 0 : srvListeners.includes(this.s.detectSrvRecords));\n\n    if (transitionToSharded && !listeningToSrvPolling) {\n      (_b = this.s.srvPoller) === null || _b === void 0 ? void 0 : _b.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      (_c = this.s.srvPoller) === null || _c === void 0 ? void 0 : _c.start();\n    }\n  }\n\n  detectSrvRecords(ev) {\n    const previousTopologyDescription = this.s.description;\n    this.s.description = this.s.description.updateFromSrvPollingEvent(ev);\n\n    if (this.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(this);\n    this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n  }\n  /**\n   * @returns A `TopologyDescription` for this topology\n   */\n\n\n  get description() {\n    return this.s.description;\n  }\n\n  get loadBalanced() {\n    return this.s.options.loadBalanced;\n  }\n\n  get capabilities() {\n    return new ServerCapabilities(this.lastIsMaster());\n  }\n  /** Initiate server connect */\n\n\n  connect(options, callback) {\n    var _a;\n\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n\n    if (this.s.state === common_1.STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CONNECTING); // emit SDAM monitoring events\n\n    this.emit(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id)); // emit an event for the topology change\n\n    this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown), // initial is always Unknown\n    this.s.description)); // connect all known servers, then attempt server selection to connect\n\n    const serverDescriptions = Array.from(this.s.description.servers.values());\n    connectServers(this, serverDescriptions); // In load balancer mode we need to fake a server description getting\n    // emitted from the monitor, since the monitor doesn't exist.\n\n    if (this.s.options.loadBalanced) {\n      for (const description of serverDescriptions) {\n        const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n          loadBalanced: this.s.options.loadBalanced\n        });\n        this.serverUpdateHandler(newDescription);\n      }\n    }\n\n    const readPreference = (_a = options.readPreference) !== null && _a !== void 0 ? _a : read_preference_1.ReadPreference.primary;\n    this.selectServer(server_selection_1.readPreferenceServerSelector(readPreference), options, (err, server) => {\n      if (err) {\n        this.close();\n        typeof callback === 'function' ? callback(err) : this.emit(Topology.ERROR, err);\n        return;\n      } // TODO: NODE-2471\n\n\n      if (server && this.s.credentials) {\n        server.command(utils_1.ns('admin.$cmd'), {\n          ping: 1\n        }, err => {\n          if (err) {\n            typeof callback === 'function' ? callback(err) : this.emit(Topology.ERROR, err);\n            return;\n          }\n\n          stateTransition(this, common_1.STATE_CONNECTED); // TODO(NODE-3273) - remove err\n\n          this.emit(Topology.OPEN, err, this);\n          this.emit(Topology.CONNECT, this);\n          if (typeof callback === 'function') callback(undefined, this);\n        });\n        return;\n      }\n\n      stateTransition(this, common_1.STATE_CONNECTED); // TODO(NODE-3273) - remove err\n\n      this.emit(Topology.OPEN, err, this);\n      this.emit(Topology.CONNECT, this);\n      if (typeof callback === 'function') callback(undefined, this);\n    });\n  }\n  /** Close this topology */\n\n\n  close(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof options === 'boolean') {\n      options = {\n        force: options\n      };\n    }\n\n    options = options !== null && options !== void 0 ? options : {};\n\n    if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CLOSING);\n    drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n    common_1.drainTimerQueue(this.s.connectionTimers);\n\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n      this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n    }\n\n    this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    utils_1.eachAsync(Array.from(this.s.sessions.values()), (session, cb) => session.endSession(cb), () => {\n      this.s.sessionPool.endAllPooledSessions(() => {\n        utils_1.eachAsync(Array.from(this.s.servers.values()), (server, cb) => destroyServer(server, this, options, cb), err => {\n          this.s.servers.clear(); // emit an event for close\n\n          this.emit(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n          stateTransition(this, common_1.STATE_CLOSED);\n\n          if (typeof callback === 'function') {\n            callback(err);\n          }\n        });\n      });\n    });\n  }\n\n  selectServer(selector, _options, _callback) {\n    let options = _options;\n    const callback = _callback !== null && _callback !== void 0 ? _callback : _options;\n\n    if (typeof options === 'function') {\n      options = {};\n    }\n\n    let serverSelector;\n\n    if (typeof selector !== 'function') {\n      if (typeof selector === 'string') {\n        serverSelector = server_selection_1.readPreferenceServerSelector(read_preference_1.ReadPreference.fromString(selector));\n      } else {\n        let readPreference;\n\n        if (selector instanceof read_preference_1.ReadPreference) {\n          readPreference = selector;\n        } else {\n          read_preference_1.ReadPreference.translate(options);\n          readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n        }\n\n        serverSelector = server_selection_1.readPreferenceServerSelector(readPreference);\n      }\n    } else {\n      serverSelector = selector;\n    }\n\n    options = Object.assign({}, {\n      serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS\n    }, options);\n    const isSharded = this.description.type === common_1.TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      callback(undefined, transaction.server);\n      return;\n    }\n\n    const waitQueueMember = {\n      serverSelector,\n      transaction,\n      callback\n    };\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n\n    if (serverSelectionTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${serverSelectionTimeoutMS} ms`, this.description);\n        waitQueueMember.callback(timeoutError);\n      }, serverSelectionTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n  } // Sessions related methods\n\n  /**\n   * @returns Whether the topology should initiate selection to determine session support\n   */\n\n\n  shouldCheckForSessionSupport() {\n    if (this.description.type === common_1.TopologyType.Single) {\n      return !this.description.hasKnownServers;\n    }\n\n    return !this.description.hasDataBearingServers;\n  }\n  /**\n   * @returns Whether sessions are supported on the current topology\n   */\n\n\n  hasSessionSupport() {\n    return this.loadBalanced || this.description.logicalSessionTimeoutMinutes != null;\n  }\n  /** Start a logical session */\n\n\n  startSession(options, clientOptions) {\n    const session = new sessions_1.ClientSession(this, this.s.sessionPool, options, clientOptions);\n    session.once('ended', () => {\n      this.s.sessions.delete(session);\n    });\n    this.s.sessions.add(session);\n    return session;\n  }\n  /** Send endSessions command(s) with the given session ids */\n\n\n  endSessions(sessions, callback) {\n    if (!Array.isArray(sessions)) {\n      sessions = [sessions];\n    }\n\n    this.selectServer(server_selection_1.readPreferenceServerSelector(read_preference_1.ReadPreference.primaryPreferred), (err, server) => {\n      if (err || !server) {\n        if (typeof callback === 'function') callback(err);\n        return;\n      }\n\n      server.command(utils_1.ns('admin.$cmd'), {\n        endSessions: sessions\n      }, {\n        noResponse: true\n      }, (err, result) => {\n        if (typeof callback === 'function') callback(err, result);\n      });\n    });\n  }\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param serverDescription - The server to update in the internal list of server descriptions\n   */\n\n\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    } // ignore this server update if its from an outdated topologyVersion\n\n\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    } // these will be used for monitoring events later\n\n\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n\n    if (!previousServerDescription) {\n      return;\n    } // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n\n\n    const clusterTime = serverDescription.$clusterTime;\n\n    if (clusterTime) {\n      common_1._advanceClusterTime(this, clusterTime);\n    } // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n\n\n    const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription); // first update the TopologyDescription\n\n    this.s.description = this.s.description.update(serverDescription);\n\n    if (this.s.description.compatibilityError) {\n      this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n      return;\n    } // emit monitoring events for this change\n\n\n    if (!equalDescriptions) {\n      const newDescription = this.s.description.servers.get(serverDescription.address);\n\n      if (newDescription) {\n        this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n      }\n    } // update server list from updated descriptions\n\n\n    updateServers(this, serverDescription); // attempt to resolve any outstanding server selection attempts\n\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n\n    if (!equalDescriptions) {\n      this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n  }\n\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') callback = credentials, credentials = undefined;\n    if (typeof callback === 'function') callback(undefined, true);\n  }\n\n  get clientMetadata() {\n    return this.s.options.metadata;\n  }\n\n  isConnected() {\n    return this.s.state === common_1.STATE_CONNECTED;\n  }\n\n  isDestroyed() {\n    return this.s.state === common_1.STATE_CLOSED;\n  }\n  /**\n   * @deprecated This function is deprecated and will be removed in the next major version.\n   */\n\n\n  unref() {\n    utils_1.emitWarning('`unref` is a noop and will be removed in the next major version');\n  } // NOTE: There are many places in code where we explicitly check the last isMaster\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first isMaster seen, which should suffice.\n\n\n  lastIsMaster() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(sd => sd.type !== common_1.ServerType.Unknown)[0];\n    const result = sd || {\n      maxWireVersion: this.description.commonWireVersion\n    };\n    return result;\n  }\n\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get clusterTime() {\n    return this.s.clusterTime;\n  }\n\n  set clusterTime(clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n\n}\n\nexports.Topology = Topology;\n/** @event */\n\nTopology.SERVER_OPENING = 'serverOpening';\n/** @event */\n\nTopology.SERVER_CLOSED = 'serverClosed';\n/** @event */\n\nTopology.SERVER_DESCRIPTION_CHANGED = 'serverDescriptionChanged';\n/** @event */\n\nTopology.TOPOLOGY_OPENING = 'topologyOpening';\n/** @event */\n\nTopology.TOPOLOGY_CLOSED = 'topologyClosed';\n/** @event */\n\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = 'topologyDescriptionChanged';\n/** @event */\n\nTopology.ERROR = 'error';\n/** @event */\n\nTopology.OPEN = 'open';\n/** @event */\n\nTopology.CONNECT = 'connect';\n/** @event */\n\nTopology.CLOSE = 'close';\n/** @event */\n\nTopology.TIMEOUT = 'timeout';\n/** @public */\n\nexports.TOPOLOGY_EVENTS = [Topology.SERVER_OPENING, Topology.SERVER_CLOSED, Topology.SERVER_DESCRIPTION_CHANGED, Topology.TOPOLOGY_OPENING, Topology.TOPOLOGY_CLOSED, Topology.TOPOLOGY_DESCRIPTION_CHANGED, Topology.ERROR, Topology.TIMEOUT, Topology.CLOSE];\n/** Destroys a server, and removes all event listeners from the instance */\n\nfunction destroyServer(server, topology, options, callback) {\n  options = options !== null && options !== void 0 ? options : {};\n\n  for (const event of LOCAL_SERVER_EVENTS) {\n    server.removeAllListeners(event);\n  }\n\n  server.destroy(options, () => {\n    topology.emit(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n\n    for (const event of SERVER_RELAY_EVENTS) {\n      server.removeAllListeners(event);\n    }\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n/** Predicts the TopologyType from options */\n\n\nfunction topologyTypeFromOptions(options) {\n  if (options === null || options === void 0 ? void 0 : options.directConnection) {\n    return common_1.TopologyType.Single;\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.replicaSet) {\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.loadBalanced) {\n    return common_1.TopologyType.LoadBalanced;\n  }\n\n  return common_1.TopologyType.Unknown;\n}\n\nfunction randomSelection(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n * @param connectDelay - Time to wait before attempting initial connection\n */\n\n\nfunction createAndConnectServer(topology, serverDescription, connectDelay) {\n  topology.emit(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n  const server = new server_1.Server(topology, serverDescription, topology.s.options);\n\n  for (const event of SERVER_RELAY_EVENTS) {\n    server.on(event, e => topology.emit(event, e));\n  }\n\n  server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n\n  if (connectDelay) {\n    const connectTimer = setTimeout(() => {\n      common_1.clearAndRemoveTimerFrom(connectTimer, topology.s.connectionTimers);\n      server.connect();\n    }, connectDelay);\n    topology.s.connectionTimers.add(connectTimer);\n    return server;\n  }\n\n  server.connect();\n  return server;\n}\n/**\n * Create `Server` instances for all initially known servers, connect them, and assign\n * them to the passed in `Topology`.\n *\n * @param topology - The topology responsible for the servers\n * @param serverDescriptions - A list of server descriptions to connect\n */\n\n\nfunction connectServers(topology, serverDescriptions) {\n  topology.s.servers = serverDescriptions.reduce((servers, serverDescription) => {\n    const server = createAndConnectServer(topology, serverDescription);\n    servers.set(serverDescription.address, server);\n    return servers;\n  }, new Map());\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\n\n\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n\n    if (server) {\n      server.s.description = incomingServerDescription;\n    }\n  } // add new servers for all descriptions we currently don't know about locally\n\n\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  } // for all servers no longer known, remove their descriptions and destroy their instances\n\n\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    if (!topology.s.servers.has(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress); // prepare server for garbage collection\n\n    if (server) {\n      destroyServer(server, topology);\n    }\n  }\n}\n\nfunction drainWaitQueue(queue, err) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember.timer) {\n      clearTimeout(waitQueueMember.timer);\n    }\n\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\n\nfunction processWaitQueue(topology) {\n  if (topology.s.state === common_1.STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n    return;\n  }\n\n  const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n\n  for (let i = 0; i < membersToProcess; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    let selectedDescriptions;\n\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions) : serverDescriptions;\n    } catch (e) {\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n\n      waitQueueMember.callback(e);\n      continue;\n    }\n\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    }\n\n    const selectedServerDescription = randomSelection(selectedDescriptions);\n    const selectedServer = topology.s.servers.get(selectedServerDescription.address);\n    const transaction = waitQueueMember.transaction;\n\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\n      transaction.pinServer(selectedServer);\n    }\n\n    if (waitQueueMember.timer) {\n      clearTimeout(waitQueueMember.timer);\n    }\n\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    for (const [, server] of topology.s.servers) {\n      process.nextTick(function scheduleServerCheck() {\n        return server.requestCheck();\n      });\n    }\n  }\n}\n\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n  const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n  const currentTopologyVersion = currentServerDescription === null || currentServerDescription === void 0 ? void 0 : currentServerDescription.topologyVersion;\n  return server_description_1.compareTopologyVersion(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0;\n}\n/** @public */\n\n\nclass ServerCapabilities {\n  constructor(ismaster) {\n    this.minWireVersion = ismaster.minWireVersion || 0;\n    this.maxWireVersion = ismaster.maxWireVersion || 0;\n  }\n\n  get hasAggregationCursor() {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasWriteCommands() {\n    return this.maxWireVersion >= 2;\n  }\n\n  get hasTextSearch() {\n    return this.minWireVersion >= 0;\n  }\n\n  get hasAuthCommands() {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasListCollectionsCommand() {\n    return this.maxWireVersion >= 3;\n  }\n\n  get hasListIndexesCommand() {\n    return this.maxWireVersion >= 3;\n  }\n\n  get supportsSnapshotReads() {\n    return this.maxWireVersion >= 13;\n  }\n\n  get commandsTakeWriteConcern() {\n    return this.maxWireVersion >= 5;\n  }\n\n  get commandsTakeCollation() {\n    return this.maxWireVersion >= 5;\n  }\n\n}\n\nexports.ServerCapabilities = ServerCapabilities;","map":{"version":3,"names":["Object","defineProperty","exports","value","ServerCapabilities","TOPOLOGY_EVENTS","Topology","Denque","require","read_preference_1","server_description_1","topology_description_1","server_1","sessions_1","srv_polling_1","connection_pool_1","error_1","server_selection_1","utils_1","common_1","events_1","connection_1","connection_string_1","bson_1","mongo_types_1","globalTopologyCounter","SERVER_RELAY_EVENTS","Server","SERVER_HEARTBEAT_STARTED","SERVER_HEARTBEAT_SUCCEEDED","SERVER_HEARTBEAT_FAILED","Connection","COMMAND_STARTED","COMMAND_SUCCEEDED","COMMAND_FAILED","CMAP_EVENTS","LOCAL_SERVER_EVENTS","CONNECT","DESCRIPTION_RECEIVED","CLOSED","ENDED","stateTransition","makeStateMachine","STATE_CLOSED","STATE_CONNECTING","STATE_CLOSING","STATE_CONNECTED","kCancelled","Symbol","kWaitQueue","TypedEventEmitter","constructor","seeds","options","_a","bson","create","serialize","deserialize","hosts","HostAddress","fromString","retryReads","DEFAULT_OPTIONS","get","retryWrites","serverSelectionTimeoutMS","directConnection","loadBalanced","metadata","monitorCommands","tls","maxPoolSize","minPoolSize","waitQueueTimeoutMS","connectionType","connectTimeoutMS","maxIdleTimeMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","Array","isArray","seedlist","seed","push","MongoRuntimeError","JSON","stringify","topologyType","topologyTypeFromOptions","topologyId","serverDescriptions","Map","hostAddress","set","toString","ServerDescription","s","id","state","description","TopologyDescription","replicaSet","undefined","servers","sessionPool","ServerSessionPool","sessions","Set","credentials","clusterTime","connectionTimers","detectShardedTopology","ev","detectSrvRecords","srvHost","srvPoller","SrvPoller","on","TOPOLOGY_DESCRIPTION_CHANGED","event","_b","_c","previousType","previousDescription","type","newType","newDescription","transitionToSharded","TopologyType","Sharded","srvListeners","listeners","SRV_RECORD_DISCOVERY","listeningToSrvPolling","includes","start","previousTopologyDescription","updateFromSrvPollingEvent","updateServers","emit","TopologyDescriptionChangedEvent","capabilities","lastIsMaster","connect","callback","TOPOLOGY_OPENING","TopologyOpeningEvent","Unknown","from","values","connectServers","serverUpdateHandler","readPreference","ReadPreference","primary","selectServer","readPreferenceServerSelector","err","server","close","ERROR","command","ns","ping","OPEN","force","drainWaitQueue","MongoTopologyClosedError","drainTimerQueue","stop","removeListener","eachAsync","session","cb","endSession","endAllPooledSessions","destroyServer","clear","TOPOLOGY_CLOSED","TopologyClosedEvent","selector","_options","_callback","serverSelector","translate","assign","isSharded","transaction","waitQueueMember","timer","setTimeout","timeoutError","MongoServerSelectionError","processWaitQueue","shouldCheckForSessionSupport","Single","hasKnownServers","hasDataBearingServers","hasSessionSupport","logicalSessionTimeoutMinutes","startSession","clientOptions","ClientSession","once","delete","add","endSessions","primaryPreferred","noResponse","result","serverDescription","hasServer","address","isStaleServerDescription","previousServerDescription","$clusterTime","_advanceClusterTime","equalDescriptions","equals","update","compatibilityError","MongoCompatibilityError","SERVER_DESCRIPTION_CHANGED","ServerDescriptionChangedEvent","length","auth","clientMetadata","isConnected","isDestroyed","unref","emitWarning","sd","filter","ServerType","maxWireVersion","commonWireVersion","SERVER_OPENING","SERVER_CLOSED","CLOSE","TIMEOUT","topology","removeAllListeners","destroy","ServerClosedEvent","ReplicaSetNoPrimary","LoadBalanced","randomSelection","array","Math","floor","random","createAndConnectServer","connectDelay","ServerOpeningEvent","e","connectTimer","clearAndRemoveTimerFrom","reduce","incomingServerDescription","has","entry","serverAddress","queue","shift","clearTimeout","membersToProcess","i","selectedDescriptions","selectedServerDescription","selectedServer","isActive","pinServer","process","nextTick","scheduleServerCheck","requestCheck","topologyDescription","currentServerDescription","currentTopologyVersion","topologyVersion","compareTopologyVersion","ismaster","minWireVersion","hasAggregationCursor","hasWriteCommands","hasTextSearch","hasAuthCommands","hasListCollectionsCommand","hasListIndexesCommand","supportsSnapshotReads","commandsTakeWriteConcern","commandsTakeCollation"],"sources":["/Users/yoannesfigueiras/node_modules/mongodb/lib/sdam/topology.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServerCapabilities = exports.TOPOLOGY_EVENTS = exports.Topology = void 0;\nconst Denque = require(\"denque\");\nconst read_preference_1 = require(\"../read_preference\");\nconst server_description_1 = require(\"./server_description\");\nconst topology_description_1 = require(\"./topology_description\");\nconst server_1 = require(\"./server\");\nconst sessions_1 = require(\"../sessions\");\nconst srv_polling_1 = require(\"./srv_polling\");\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\nconst error_1 = require(\"../error\");\nconst server_selection_1 = require(\"./server_selection\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst connection_1 = require(\"../cmap/connection\");\nconst connection_string_1 = require(\"../connection_string\");\nconst bson_1 = require(\"../bson\");\nconst mongo_types_1 = require(\"../mongo_types\");\n// Global state\nlet globalTopologyCounter = 0;\n// events that we relay to the `Topology`\nconst SERVER_RELAY_EVENTS = [\n    server_1.Server.SERVER_HEARTBEAT_STARTED,\n    server_1.Server.SERVER_HEARTBEAT_SUCCEEDED,\n    server_1.Server.SERVER_HEARTBEAT_FAILED,\n    connection_1.Connection.COMMAND_STARTED,\n    connection_1.Connection.COMMAND_SUCCEEDED,\n    connection_1.Connection.COMMAND_FAILED,\n    ...connection_pool_1.CMAP_EVENTS\n];\n// all events we listen to from `Server` instances\nconst LOCAL_SERVER_EVENTS = [\n    server_1.Server.CONNECT,\n    server_1.Server.DESCRIPTION_RECEIVED,\n    server_1.Server.CLOSED,\n    server_1.Server.ENDED\n];\nconst stateTransition = utils_1.makeStateMachine({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nclass Topology extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @param seedlist - a list of HostAddress instances to connect to\n     */\n    constructor(seeds, options) {\n        var _a;\n        super();\n        // Legacy CSFLE support\n        this.bson = Object.create(null);\n        this.bson.serialize = bson_1.serialize;\n        this.bson.deserialize = bson_1.deserialize;\n        // Options should only be undefined in tests, MongoClient will always have defined options\n        options = options !== null && options !== void 0 ? options : {\n            hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n            retryReads: connection_string_1.DEFAULT_OPTIONS.get('retryReads'),\n            retryWrites: connection_string_1.DEFAULT_OPTIONS.get('retryWrites'),\n            serverSelectionTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('serverSelectionTimeoutMS'),\n            directConnection: connection_string_1.DEFAULT_OPTIONS.get('directConnection'),\n            loadBalanced: connection_string_1.DEFAULT_OPTIONS.get('loadBalanced'),\n            metadata: connection_string_1.DEFAULT_OPTIONS.get('metadata'),\n            monitorCommands: connection_string_1.DEFAULT_OPTIONS.get('monitorCommands'),\n            tls: connection_string_1.DEFAULT_OPTIONS.get('tls'),\n            maxPoolSize: connection_string_1.DEFAULT_OPTIONS.get('maxPoolSize'),\n            minPoolSize: connection_string_1.DEFAULT_OPTIONS.get('minPoolSize'),\n            waitQueueTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('waitQueueTimeoutMS'),\n            connectionType: connection_string_1.DEFAULT_OPTIONS.get('connectionType'),\n            connectTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('connectTimeoutMS'),\n            maxIdleTimeMS: connection_string_1.DEFAULT_OPTIONS.get('maxIdleTimeMS'),\n            heartbeatFrequencyMS: connection_string_1.DEFAULT_OPTIONS.get('heartbeatFrequencyMS'),\n            minHeartbeatFrequencyMS: connection_string_1.DEFAULT_OPTIONS.get('minHeartbeatFrequencyMS')\n        };\n        if (typeof seeds === 'string') {\n            seeds = [utils_1.HostAddress.fromString(seeds)];\n        }\n        else if (!Array.isArray(seeds)) {\n            seeds = [seeds];\n        }\n        const seedlist = [];\n        for (const seed of seeds) {\n            if (typeof seed === 'string') {\n                seedlist.push(utils_1.HostAddress.fromString(seed));\n            }\n            else if (seed instanceof utils_1.HostAddress) {\n                seedlist.push(seed);\n            }\n            else {\n                // FIXME(NODE-3483): May need to be a MongoParseError\n                throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n            }\n        }\n        const topologyType = topologyTypeFromOptions(options);\n        const topologyId = globalTopologyCounter++;\n        const serverDescriptions = new Map();\n        for (const hostAddress of seedlist) {\n            serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n        }\n        this[kWaitQueue] = new Denque();\n        this.s = {\n            // the id of this topology\n            id: topologyId,\n            // passed in options\n            options,\n            // initial seedlist of servers to connect to\n            seedlist,\n            // initial state\n            state: common_1.STATE_CLOSED,\n            // the topology description\n            description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n            serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n            // a map of server instances to normalized addresses\n            servers: new Map(),\n            // Server Session Pool\n            sessionPool: new sessions_1.ServerSessionPool(this),\n            // Active client sessions\n            sessions: new Set(),\n            credentials: options === null || options === void 0 ? void 0 : options.credentials,\n            clusterTime: undefined,\n            // timer management\n            connectionTimers: new Set(),\n            detectShardedTopology: ev => this.detectShardedTopology(ev),\n            detectSrvRecords: ev => this.detectSrvRecords(ev)\n        };\n        if (options.srvHost && !options.loadBalanced) {\n            this.s.srvPoller =\n                (_a = options.srvPoller) !== null && _a !== void 0 ? _a : new srv_polling_1.SrvPoller({\n                    heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n                    srvHost: options.srvHost\n                });\n            this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n        }\n    }\n    detectShardedTopology(event) {\n        var _a, _b, _c;\n        const previousType = event.previousDescription.type;\n        const newType = event.newDescription.type;\n        const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n        const srvListeners = (_a = this.s.srvPoller) === null || _a === void 0 ? void 0 : _a.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n        const listeningToSrvPolling = !!(srvListeners === null || srvListeners === void 0 ? void 0 : srvListeners.includes(this.s.detectSrvRecords));\n        if (transitionToSharded && !listeningToSrvPolling) {\n            (_b = this.s.srvPoller) === null || _b === void 0 ? void 0 : _b.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n            (_c = this.s.srvPoller) === null || _c === void 0 ? void 0 : _c.start();\n        }\n    }\n    detectSrvRecords(ev) {\n        const previousTopologyDescription = this.s.description;\n        this.s.description = this.s.description.updateFromSrvPollingEvent(ev);\n        if (this.s.description === previousTopologyDescription) {\n            // Nothing changed, so return\n            return;\n        }\n        updateServers(this);\n        this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n    /**\n     * @returns A `TopologyDescription` for this topology\n     */\n    get description() {\n        return this.s.description;\n    }\n    get loadBalanced() {\n        return this.s.options.loadBalanced;\n    }\n    get capabilities() {\n        return new ServerCapabilities(this.lastIsMaster());\n    }\n    /** Initiate server connect */\n    connect(options, callback) {\n        var _a;\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options !== null && options !== void 0 ? options : {};\n        if (this.s.state === common_1.STATE_CONNECTED) {\n            if (typeof callback === 'function') {\n                callback();\n            }\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // emit SDAM monitoring events\n        this.emit(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));\n        // emit an event for the topology change\n        this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown), // initial is always Unknown\n        this.s.description));\n        // connect all known servers, then attempt server selection to connect\n        const serverDescriptions = Array.from(this.s.description.servers.values());\n        connectServers(this, serverDescriptions);\n        // In load balancer mode we need to fake a server description getting\n        // emitted from the monitor, since the monitor doesn't exist.\n        if (this.s.options.loadBalanced) {\n            for (const description of serverDescriptions) {\n                const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n                    loadBalanced: this.s.options.loadBalanced\n                });\n                this.serverUpdateHandler(newDescription);\n            }\n        }\n        const readPreference = (_a = options.readPreference) !== null && _a !== void 0 ? _a : read_preference_1.ReadPreference.primary;\n        this.selectServer(server_selection_1.readPreferenceServerSelector(readPreference), options, (err, server) => {\n            if (err) {\n                this.close();\n                typeof callback === 'function' ? callback(err) : this.emit(Topology.ERROR, err);\n                return;\n            }\n            // TODO: NODE-2471\n            if (server && this.s.credentials) {\n                server.command(utils_1.ns('admin.$cmd'), { ping: 1 }, err => {\n                    if (err) {\n                        typeof callback === 'function' ? callback(err) : this.emit(Topology.ERROR, err);\n                        return;\n                    }\n                    stateTransition(this, common_1.STATE_CONNECTED);\n                    // TODO(NODE-3273) - remove err\n                    this.emit(Topology.OPEN, err, this);\n                    this.emit(Topology.CONNECT, this);\n                    if (typeof callback === 'function')\n                        callback(undefined, this);\n                });\n                return;\n            }\n            stateTransition(this, common_1.STATE_CONNECTED);\n            // TODO(NODE-3273) - remove err\n            this.emit(Topology.OPEN, err, this);\n            this.emit(Topology.CONNECT, this);\n            if (typeof callback === 'function')\n                callback(undefined, this);\n        });\n    }\n    /** Close this topology */\n    close(options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = {};\n        }\n        if (typeof options === 'boolean') {\n            options = { force: options };\n        }\n        options = options !== null && options !== void 0 ? options : {};\n        if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n            if (typeof callback === 'function') {\n                callback();\n            }\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n        common_1.drainTimerQueue(this.s.connectionTimers);\n        if (this.s.srvPoller) {\n            this.s.srvPoller.stop();\n            this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n        }\n        this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n        utils_1.eachAsync(Array.from(this.s.sessions.values()), (session, cb) => session.endSession(cb), () => {\n            this.s.sessionPool.endAllPooledSessions(() => {\n                utils_1.eachAsync(Array.from(this.s.servers.values()), (server, cb) => destroyServer(server, this, options, cb), err => {\n                    this.s.servers.clear();\n                    // emit an event for close\n                    this.emit(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n                    stateTransition(this, common_1.STATE_CLOSED);\n                    if (typeof callback === 'function') {\n                        callback(err);\n                    }\n                });\n            });\n        });\n    }\n    selectServer(selector, _options, _callback) {\n        let options = _options;\n        const callback = (_callback !== null && _callback !== void 0 ? _callback : _options);\n        if (typeof options === 'function') {\n            options = {};\n        }\n        let serverSelector;\n        if (typeof selector !== 'function') {\n            if (typeof selector === 'string') {\n                serverSelector = server_selection_1.readPreferenceServerSelector(read_preference_1.ReadPreference.fromString(selector));\n            }\n            else {\n                let readPreference;\n                if (selector instanceof read_preference_1.ReadPreference) {\n                    readPreference = selector;\n                }\n                else {\n                    read_preference_1.ReadPreference.translate(options);\n                    readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n                }\n                serverSelector = server_selection_1.readPreferenceServerSelector(readPreference);\n            }\n        }\n        else {\n            serverSelector = selector;\n        }\n        options = Object.assign({}, { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS }, options);\n        const isSharded = this.description.type === common_1.TopologyType.Sharded;\n        const session = options.session;\n        const transaction = session && session.transaction;\n        if (isSharded && transaction && transaction.server) {\n            callback(undefined, transaction.server);\n            return;\n        }\n        const waitQueueMember = {\n            serverSelector,\n            transaction,\n            callback\n        };\n        const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n        if (serverSelectionTimeoutMS) {\n            waitQueueMember.timer = setTimeout(() => {\n                waitQueueMember[kCancelled] = true;\n                waitQueueMember.timer = undefined;\n                const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${serverSelectionTimeoutMS} ms`, this.description);\n                waitQueueMember.callback(timeoutError);\n            }, serverSelectionTimeoutMS);\n        }\n        this[kWaitQueue].push(waitQueueMember);\n        processWaitQueue(this);\n    }\n    // Sessions related methods\n    /**\n     * @returns Whether the topology should initiate selection to determine session support\n     */\n    shouldCheckForSessionSupport() {\n        if (this.description.type === common_1.TopologyType.Single) {\n            return !this.description.hasKnownServers;\n        }\n        return !this.description.hasDataBearingServers;\n    }\n    /**\n     * @returns Whether sessions are supported on the current topology\n     */\n    hasSessionSupport() {\n        return this.loadBalanced || this.description.logicalSessionTimeoutMinutes != null;\n    }\n    /** Start a logical session */\n    startSession(options, clientOptions) {\n        const session = new sessions_1.ClientSession(this, this.s.sessionPool, options, clientOptions);\n        session.once('ended', () => {\n            this.s.sessions.delete(session);\n        });\n        this.s.sessions.add(session);\n        return session;\n    }\n    /** Send endSessions command(s) with the given session ids */\n    endSessions(sessions, callback) {\n        if (!Array.isArray(sessions)) {\n            sessions = [sessions];\n        }\n        this.selectServer(server_selection_1.readPreferenceServerSelector(read_preference_1.ReadPreference.primaryPreferred), (err, server) => {\n            if (err || !server) {\n                if (typeof callback === 'function')\n                    callback(err);\n                return;\n            }\n            server.command(utils_1.ns('admin.$cmd'), { endSessions: sessions }, { noResponse: true }, (err, result) => {\n                if (typeof callback === 'function')\n                    callback(err, result);\n            });\n        });\n    }\n    /**\n     * Update the internal TopologyDescription with a ServerDescription\n     *\n     * @param serverDescription - The server to update in the internal list of server descriptions\n     */\n    serverUpdateHandler(serverDescription) {\n        if (!this.s.description.hasServer(serverDescription.address)) {\n            return;\n        }\n        // ignore this server update if its from an outdated topologyVersion\n        if (isStaleServerDescription(this.s.description, serverDescription)) {\n            return;\n        }\n        // these will be used for monitoring events later\n        const previousTopologyDescription = this.s.description;\n        const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n        if (!previousServerDescription) {\n            return;\n        }\n        // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n        // a server it MUST compare it to the current highest seen cluster time\n        // for the deployment. If the new cluster time is higher than the\n        // highest seen cluster time it MUST become the new highest seen cluster\n        // time. Two cluster times are compared using only the BsonTimestamp\n        // value of the clusterTime embedded field.\"\n        const clusterTime = serverDescription.$clusterTime;\n        if (clusterTime) {\n            common_1._advanceClusterTime(this, clusterTime);\n        }\n        // If we already know all the information contained in this updated description, then\n        // we don't need to emit SDAM events, but still need to update the description, in order\n        // to keep client-tracked attributes like last update time and round trip time up to date\n        const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);\n        // first update the TopologyDescription\n        this.s.description = this.s.description.update(serverDescription);\n        if (this.s.description.compatibilityError) {\n            this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n            return;\n        }\n        // emit monitoring events for this change\n        if (!equalDescriptions) {\n            const newDescription = this.s.description.servers.get(serverDescription.address);\n            if (newDescription) {\n                this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n            }\n        }\n        // update server list from updated descriptions\n        updateServers(this, serverDescription);\n        // attempt to resolve any outstanding server selection attempts\n        if (this[kWaitQueue].length > 0) {\n            processWaitQueue(this);\n        }\n        if (!equalDescriptions) {\n            this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n        }\n    }\n    auth(credentials, callback) {\n        if (typeof credentials === 'function')\n            (callback = credentials), (credentials = undefined);\n        if (typeof callback === 'function')\n            callback(undefined, true);\n    }\n    get clientMetadata() {\n        return this.s.options.metadata;\n    }\n    isConnected() {\n        return this.s.state === common_1.STATE_CONNECTED;\n    }\n    isDestroyed() {\n        return this.s.state === common_1.STATE_CLOSED;\n    }\n    /**\n     * @deprecated This function is deprecated and will be removed in the next major version.\n     */\n    unref() {\n        utils_1.emitWarning('`unref` is a noop and will be removed in the next major version');\n    }\n    // NOTE: There are many places in code where we explicitly check the last isMaster\n    //       to do feature support detection. This should be done any other way, but for\n    //       now we will just return the first isMaster seen, which should suffice.\n    lastIsMaster() {\n        const serverDescriptions = Array.from(this.description.servers.values());\n        if (serverDescriptions.length === 0)\n            return {};\n        const sd = serverDescriptions.filter((sd) => sd.type !== common_1.ServerType.Unknown)[0];\n        const result = sd || { maxWireVersion: this.description.commonWireVersion };\n        return result;\n    }\n    get logicalSessionTimeoutMinutes() {\n        return this.description.logicalSessionTimeoutMinutes;\n    }\n    get clusterTime() {\n        return this.s.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.s.clusterTime = clusterTime;\n    }\n}\nexports.Topology = Topology;\n/** @event */\nTopology.SERVER_OPENING = 'serverOpening';\n/** @event */\nTopology.SERVER_CLOSED = 'serverClosed';\n/** @event */\nTopology.SERVER_DESCRIPTION_CHANGED = 'serverDescriptionChanged';\n/** @event */\nTopology.TOPOLOGY_OPENING = 'topologyOpening';\n/** @event */\nTopology.TOPOLOGY_CLOSED = 'topologyClosed';\n/** @event */\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = 'topologyDescriptionChanged';\n/** @event */\nTopology.ERROR = 'error';\n/** @event */\nTopology.OPEN = 'open';\n/** @event */\nTopology.CONNECT = 'connect';\n/** @event */\nTopology.CLOSE = 'close';\n/** @event */\nTopology.TIMEOUT = 'timeout';\n/** @public */\nexports.TOPOLOGY_EVENTS = [\n    Topology.SERVER_OPENING,\n    Topology.SERVER_CLOSED,\n    Topology.SERVER_DESCRIPTION_CHANGED,\n    Topology.TOPOLOGY_OPENING,\n    Topology.TOPOLOGY_CLOSED,\n    Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n    Topology.ERROR,\n    Topology.TIMEOUT,\n    Topology.CLOSE\n];\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(server, topology, options, callback) {\n    options = options !== null && options !== void 0 ? options : {};\n    for (const event of LOCAL_SERVER_EVENTS) {\n        server.removeAllListeners(event);\n    }\n    server.destroy(options, () => {\n        topology.emit(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n        for (const event of SERVER_RELAY_EVENTS) {\n            server.removeAllListeners(event);\n        }\n        if (typeof callback === 'function') {\n            callback();\n        }\n    });\n}\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options) {\n    if (options === null || options === void 0 ? void 0 : options.directConnection) {\n        return common_1.TopologyType.Single;\n    }\n    if (options === null || options === void 0 ? void 0 : options.replicaSet) {\n        return common_1.TopologyType.ReplicaSetNoPrimary;\n    }\n    if (options === null || options === void 0 ? void 0 : options.loadBalanced) {\n        return common_1.TopologyType.LoadBalanced;\n    }\n    return common_1.TopologyType.Unknown;\n}\nfunction randomSelection(array) {\n    return array[Math.floor(Math.random() * array.length)];\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n * @param connectDelay - Time to wait before attempting initial connection\n */\nfunction createAndConnectServer(topology, serverDescription, connectDelay) {\n    topology.emit(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n    const server = new server_1.Server(topology, serverDescription, topology.s.options);\n    for (const event of SERVER_RELAY_EVENTS) {\n        server.on(event, (e) => topology.emit(event, e));\n    }\n    server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n    if (connectDelay) {\n        const connectTimer = setTimeout(() => {\n            common_1.clearAndRemoveTimerFrom(connectTimer, topology.s.connectionTimers);\n            server.connect();\n        }, connectDelay);\n        topology.s.connectionTimers.add(connectTimer);\n        return server;\n    }\n    server.connect();\n    return server;\n}\n/**\n * Create `Server` instances for all initially known servers, connect them, and assign\n * them to the passed in `Topology`.\n *\n * @param topology - The topology responsible for the servers\n * @param serverDescriptions - A list of server descriptions to connect\n */\nfunction connectServers(topology, serverDescriptions) {\n    topology.s.servers = serverDescriptions.reduce((servers, serverDescription) => {\n        const server = createAndConnectServer(topology, serverDescription);\n        servers.set(serverDescription.address, server);\n        return servers;\n    }, new Map());\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology, incomingServerDescription) {\n    // update the internal server's description\n    if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n        const server = topology.s.servers.get(incomingServerDescription.address);\n        if (server) {\n            server.s.description = incomingServerDescription;\n        }\n    }\n    // add new servers for all descriptions we currently don't know about locally\n    for (const serverDescription of topology.description.servers.values()) {\n        if (!topology.s.servers.has(serverDescription.address)) {\n            const server = createAndConnectServer(topology, serverDescription);\n            topology.s.servers.set(serverDescription.address, server);\n        }\n    }\n    // for all servers no longer known, remove their descriptions and destroy their instances\n    for (const entry of topology.s.servers) {\n        const serverAddress = entry[0];\n        if (topology.description.hasServer(serverAddress)) {\n            continue;\n        }\n        if (!topology.s.servers.has(serverAddress)) {\n            continue;\n        }\n        const server = topology.s.servers.get(serverAddress);\n        topology.s.servers.delete(serverAddress);\n        // prepare server for garbage collection\n        if (server) {\n            destroyServer(server, topology);\n        }\n    }\n}\nfunction drainWaitQueue(queue, err) {\n    while (queue.length) {\n        const waitQueueMember = queue.shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        if (waitQueueMember.timer) {\n            clearTimeout(waitQueueMember.timer);\n        }\n        if (!waitQueueMember[kCancelled]) {\n            waitQueueMember.callback(err);\n        }\n    }\n}\nfunction processWaitQueue(topology) {\n    if (topology.s.state === common_1.STATE_CLOSED) {\n        drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n        return;\n    }\n    const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n    const serverDescriptions = Array.from(topology.description.servers.values());\n    const membersToProcess = topology[kWaitQueue].length;\n    for (let i = 0; i < membersToProcess; ++i) {\n        const waitQueueMember = topology[kWaitQueue].shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        if (waitQueueMember[kCancelled]) {\n            continue;\n        }\n        let selectedDescriptions;\n        try {\n            const serverSelector = waitQueueMember.serverSelector;\n            selectedDescriptions = serverSelector\n                ? serverSelector(topology.description, serverDescriptions)\n                : serverDescriptions;\n        }\n        catch (e) {\n            if (waitQueueMember.timer) {\n                clearTimeout(waitQueueMember.timer);\n            }\n            waitQueueMember.callback(e);\n            continue;\n        }\n        if (selectedDescriptions.length === 0) {\n            topology[kWaitQueue].push(waitQueueMember);\n            continue;\n        }\n        const selectedServerDescription = randomSelection(selectedDescriptions);\n        const selectedServer = topology.s.servers.get(selectedServerDescription.address);\n        const transaction = waitQueueMember.transaction;\n        if (isSharded && transaction && transaction.isActive && selectedServer) {\n            transaction.pinServer(selectedServer);\n        }\n        if (waitQueueMember.timer) {\n            clearTimeout(waitQueueMember.timer);\n        }\n        waitQueueMember.callback(undefined, selectedServer);\n    }\n    if (topology[kWaitQueue].length > 0) {\n        // ensure all server monitors attempt monitoring soon\n        for (const [, server] of topology.s.servers) {\n            process.nextTick(function scheduleServerCheck() {\n                return server.requestCheck();\n            });\n        }\n    }\n}\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n    const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n    const currentTopologyVersion = currentServerDescription === null || currentServerDescription === void 0 ? void 0 : currentServerDescription.topologyVersion;\n    return (server_description_1.compareTopologyVersion(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0);\n}\n/** @public */\nclass ServerCapabilities {\n    constructor(ismaster) {\n        this.minWireVersion = ismaster.minWireVersion || 0;\n        this.maxWireVersion = ismaster.maxWireVersion || 0;\n    }\n    get hasAggregationCursor() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasWriteCommands() {\n        return this.maxWireVersion >= 2;\n    }\n    get hasTextSearch() {\n        return this.minWireVersion >= 0;\n    }\n    get hasAuthCommands() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasListCollectionsCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get hasListIndexesCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get supportsSnapshotReads() {\n        return this.maxWireVersion >= 13;\n    }\n    get commandsTakeWriteConcern() {\n        return this.maxWireVersion >= 5;\n    }\n    get commandsTakeCollation() {\n        return this.maxWireVersion >= 5;\n    }\n}\nexports.ServerCapabilities = ServerCapabilities;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}