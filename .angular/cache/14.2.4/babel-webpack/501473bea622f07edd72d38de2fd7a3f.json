{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { AppModule } from '../app.module'; // yoannes\n\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../app.module\";\nimport * as i4 from \"../disable-on-enter.directive\";\nconst _c0 = [\"userInputs\"];\nvar global_error = 0;\nvar global_correct = 0;\nvar myUserInputList = \"\"; //yoannes\n\nconst win = window;\nconst currentTime = new Date();\nconst pacificTime = new Date(currentTime.toLocaleString('en-US', {\n  timeZone: 'America/Los_Angeles'\n}));\nconst hour = pacificTime.getHours();\nexport let WordListInputFiveComponent = /*#__PURE__*/(() => {\n  class WordListInputFiveComponent {\n    //constructor() { }\n    //yoannes Inject the class in the components where you want to access the global variable:\n    constructor(myForm, router, globalService) {\n      this.myForm = myForm;\n      this.router = router;\n      this.globalService = globalService;\n      this.fromDataList = '';\n      this.correctWord = '';\n      this.errorMessage = '';\n      this.userInputs = '';\n      this.words = 0; //yoannes\n\n      this.studyID = '';\n      this.numberOfWords = 40;\n      this.numberCorrectPairs = 0;\n      this.current_date = new Date().toISOString();\n      this.percentage = 0;\n      this.listOfPairs = \"power - ruler,butterfly - bloom,dream - reality,language - acoustic,examiner - failure,coach - horse,animal - frog,demand - difficulty,question - objection,grass - cattle,decency - custom,welcoming - kindness,criticism - doubt,friend - trust,pardon - mercy,loss - removal,destiny - irony,mountain - cabin,ghost - appearance,barrel - basement,marriage - engagement,swell - steamship,discipline - obedience,painter - pianist,analysis - result,veiling - headscarf,nephew - grandmother,redemption - heaven,growth - progress,look - perspective,twilight - dawn,illusion - perception,comedy - drama,clock - church,bungalow - settlement,firmness - strength,criterion - selection,valley - meadow,skin - blood,garden - flowerbed\";\n    }\n\n    trackByFn(index, item) {\n      return index;\n    }\n\n    accessGlobalVariable() {\n      console.log(AppModule.globalVariable);\n    } // yoannes end\n\n\n    ngOnInit() {\n      this.inputForm = this.myForm.group({\n        userInputs: ''\n      });\n      myUserInputList += \"  ,\"; // yoannes. In case Enter key is nor pressed the input value will be empty\n    }\n\n    ngOnDestroy() {}\n\n    setFocus() {\n      this.focus_element.nativeElement.focus();\n    }\n\n    ngAfterViewInit() {\n      this.focus_element.nativeElement.focus();\n    } //Funtion with condition for different scenarios\n\n\n    onEnter(fromDataList = '', myWord, myuserInput) {\n      //creating a list w the values given by the user\n      myUserInputList = myUserInputList.replace(\" ,\", \"\"); //yoannes. Remuving the empty value predefined in case the Enter key were not pressed.\n\n      myUserInputList += myuserInput + \",\";\n\n      if (myuserInput === '') {\n        // yoannes, checking time to print message if its\n        if (hour >= 17) {\n          this.errorMessage = \"The correct word is \" + myWord;\n        }\n\n        global_error++;\n        /*console.log(\"Correct:\", global_correct);\n        console.log(\"Error :\", global_error);\n        console.log(\"From data: \", fromDataList);*/\n      } else if (myuserInput != myWord) {\n        // yoannes, checking time to print message if its\n        if (hour >= 17) {\n          this.errorMessage = \"INCORRECT!, not \" + \"'\" + myuserInput + \"'\" + \", the correct word is \" + myWord;\n        }\n\n        global_error++;\n        /*console.log(\"Correct:\", global_correct);\n        console.log(\"Error :\", global_error);\n        console.log(\"From data: \", fromDataList);*/\n      } else if (myWord === myuserInput) {\n        // yoannes, checking time to print message if its evening\n        if (hour >= 17) {\n          this.correctWord = \"Correct answer\";\n        }\n\n        global_correct++;\n        /*console.log(\"Correct:\", global_correct);\n        console.log(\"Error :\", global_error);\n        console.log(\"From data: \", fromDataList);*/\n      }\n\n      this.popSweetAlert(fromDataList);\n    }\n\n    popSweetAlert(fromDataList) {\n      this.numberCorrectPairs = global_correct; //yoannes\n\n      this.percentage = global_correct * 100 / 40; //yoannes\n\n      if (fromDataList == 'garden') {\n        if (global_correct < 24) {\n          // total of 40 words, 60% of 40 is 24 \n          var thisComp = this; // //Creating the .CSV file that stores final results. //yoannes\n          // this.createCSVFile(studyID, numberOfWords ,numberCorrectPairs ,percentage , current_date);     \n\n          Swal.fire({\n            text: \"You answered \" + this.percentage + \" % of the questions correctly. Please try up to 3 times in total to reach at least 60% of correctly answered questions\",\n            showCancelButton: true,\n            cancelButtonText: \"End Test\",\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Continue Test'\n          }).then(result => {\n            if (result.value) {\n              //win.location = \"input-one\"\n              this.router.navigate(['/app-lits-five']);\n              this.createCSVFile(AppModule.globalVariable, this.numberOfWords, this.numberCorrectPairs, this.percentage, this.current_date);\n            } else if (result.dismiss === Swal.DismissReason.cancel) {\n              //Asking the user to enter the Study ID to generate the file\n              this.createCSVFile(AppModule.globalVariable, this.numberOfWords, this.numberCorrectPairs, this.percentage, this.current_date); //Go to the home page\n\n              this.router.navigate(['/pass-test']);\n            }\n          });\n        } else if (global_correct >= 24) {\n          Swal.fire({\n            text: \"You answered \" + this.percentage + \" % out of 40 words, Test completed\"\n          }).then(function () {\n            win.location = \"pass-test\";\n          });\n          this.createCSVFile(AppModule.globalVariable, this.numberOfWords, this.numberCorrectPairs, this.percentage, this.current_date);\n        }\n      }\n    } // FRunction that creates the .CSV file //yoannes\n\n\n    createCSVFile(studyID, numberOfWords, numberCorrectPairs, percentage, current_date) {\n      /* Define the data */\n      const data = [['Study ID', 'Number of Words', 'Number of Correct Pairs', '% of Correct Pairs', 'Date', this.listOfPairs], [studyID, numberOfWords, numberCorrectPairs, percentage + \"%\", current_date, myUserInputList]];\n      /* Convert the data to a CSV string */\n\n      const csvContent = data.map(row => row.join(',')).join('\\n');\n      /* Create a Blob object containing the CSV string */\n\n      const blob = new Blob([csvContent], {\n        type: 'text/csv'\n      });\n      /* Create a link element */\n\n      const link = document.createElement('a');\n      /* Set the link's href to the Blob object */\n\n      link.href = window.URL.createObjectURL(blob);\n      /* Set the link's download attribute */\n\n      link.download = AppModule.globalVariable + '-' + current_date + '.csv';\n      /* Append the link to the document */\n\n      document.body.appendChild(link);\n      /* Click the link to trigger the download */\n\n      link.click();\n      /* Remove the link from the document */\n\n      document.body.removeChild(link);\n    }\n\n  }\n\n  WordListInputFiveComponent.ɵfac = function WordListInputFiveComponent_Factory(t) {\n    return new (t || WordListInputFiveComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AppModule));\n  };\n\n  WordListInputFiveComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WordListInputFiveComponent,\n    selectors: [[\"app-word-list-input-five\"]],\n    viewQuery: function WordListInputFiveComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.focus_element = _t.first);\n      }\n    },\n    inputs: {\n      data: \"data\"\n    },\n    decls: 13,\n    vars: 4,\n    consts: [[1, \"form-match\", 3, \"formGroup\"], [1, \"message\"], [\"disable-on-enter\", \"\", \"id\", \"userInputs\", \"type\", \"text\", \"spellcheck\", \"true\", \"name\", \"userInputs\", \"autocomplete\", \"off\", 3, \"keyup.enter\", \"click\"], [\"userInputs\", \"\"], [1, \"outputMessage\", 2, \"color\", \"red\", \"text-align\", \"center\", \"font-size\", \"x-large\"], [1, \"correctMessage\", 2, \"color\", \"blue\", \"text-align\", \"center\", \"font-size\", \"x-large\"]],\n    template: function WordListInputFiveComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"h6\");\n        i0.ɵɵtext(2, \"Please press ENTER after you type your word\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"label\", 1);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"input\", 2, 3);\n        i0.ɵɵlistener(\"keyup.enter\", function WordListInputFiveComponent_Template_input_keyup_enter_5_listener() {\n          i0.ɵɵrestoreView(_r1);\n\n          const _r0 = i0.ɵɵreference(6);\n\n          return i0.ɵɵresetView(ctx.onEnter(ctx.data.listfive, ctx.data.listfivesec, _r0.value.toLowerCase()));\n        })(\"click\", function WordListInputFiveComponent_Template_input_click_5_listener($event) {\n          return $event.stopPropagation();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"span\", 4)(8, \"div\");\n        i0.ɵɵtext(9);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"span\", 5)(11, \"div\");\n        i0.ɵɵtext(12);\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.inputForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"\", ctx.data.listfive, \" - \");\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(ctx.errorMessage);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.correctWord);\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i4.DisableOnEnterDirective],\n    encapsulation: 2\n  });\n  return WordListInputFiveComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}